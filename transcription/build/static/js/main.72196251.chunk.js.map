{"version":3,"sources":["utils/getApiKey.ts","utils/chunkManipulation/chunkManipulation.ts","components/SimpleCard/SimpleCard.tsx","components/SimpleCard/ChunkCard.tsx","components/ChunkEditor/ChunkEditorStyles.ts","hooks/useToggle.ts","hooks/useLocalStorage.ts","components/UserProvider/UserProvider.tsx","utils/localStorageKeys.ts","hooks/useDefaultState.ts","components/IndabaSlider/IndabaSlider.tsx","components/VideoPlayer/Hooks/useVideoPlayerProps.ts","components/VideoPlayer/ProgressBarLabel.tsx","components/VideoPlayer/VideoPlayerStyles.ts","components/VideoPlayer/VideoPlayer.tsx","components/VideoPlayer/Hooks/useVideoPlayerController.ts","utils/adjacentMap.ts","utils/oneSatisfies.ts","utils/ChunksContext/chunksActions.ts","utils/ChunksContext/chunksContext.tsx","components/IndabaButton/IndabaButton.tsx","components/FlatPaper/FlatPaper.tsx","components/CentralModal/CentralModal.tsx","hooks/useConfirmBeforeAction.ts","components/ChunkEditor/ChunkCropper.tsx","components/EditChunkModal/EditChunkModal.tsx","components/VideoPlayer/VideoThumbnail.tsx","components/BackButton/BackButton.tsx","components/WarningMessage/WarningMessage.tsx","components/ConfirmIntentModal/ConfirmIntentModal.tsx","components/TranscriptionsModal/TranscriptionsModal.tsx","components/ScrollToOnMount/ScrollToOnMount.tsx","components/IndabaMenu/IndabaMenu.tsx","components/ChunkEditor/ChunkCardContextMenu.tsx","components/LoadingModal/LoadingModal.tsx","hooks/useSlideshow.ts","components/OnboardingModal/OnboardingModalStyles.ts","components/OnboardingModal/OnboardingModal.tsx","components/ChunkEditor/ChunkEditor.tsx","components/FlatCard/FlatCard.tsx","components/LinearProgressWithLabel/LinearProgressWithLabel.tsx","components/App/Views.ts","components/App/StepInfoStyles.ts","components/App/StepInfo.tsx","components/Dashboard/DashboardStyles.ts","components/SimpleInputForm/SimpleInputForm.tsx","components/NameModal/NameModalStyles.ts","components/NameModal/NameModal.tsx","components/Dashboard/Dashboard.tsx","components/Header/Header.tsx","components/App/hooks/useSteps.ts","components/Transcriber/TranscriberStyles.ts","components/Slideshow/SlideshowStyles.ts","components/Slideshow/Slideshow.tsx","components/SimpleCard/EditTranscriptionCard.tsx","components/Transcriber/hooks/useTranscriberState.ts","components/Transcriber/hooks/useAutoPauseOnType.ts","components/Transcriber/Transcriber.tsx","components/App/hooks/useOurstoryApi.ts","components/Reviewer/Reviewer.tsx","components/ContributersModal/ContributersModal.tsx","components/App/App.tsx","utils/getId.ts","reportWebVitals.ts","index.tsx"],"names":["api_key","strings","LocalizedStrings","en","defaultChunkName","zeroPad","value","rounded","Math","floor","toString","toTimeStamp","seconds","round","toShortTimeStamp","substring","getLastEndTimeStamp","chunks","length","endtimestamp","getLastEndTimeSeconds","endtimeseconds","getEnclosingChunk","time","i","starttimeseconds","hasTranscription","chunk","transcriptions","reduce","acc","t","content","parseTimeStamp","stamp","hours","Number","slice","minutes","milliseconds","parseChunkTimeStamps","start","starttimestamp","end","secondsOf","getNameOf","name","formatString","SimpleCard","title","children","contentStyle","cardStyle","Card","style","variant","CardContent","Typography","component","useStyles","makeStyles","titleContainer","fontSize","position","ChunkCard","transcriptionIcon","classes","startEnd","endSeconds","startSeconds","className","display","flexDirection","lineHeight","margin","fontWeight","overflowWrap","justifyContent","padding","theme","videoContainer","height","minHeight","maxWidth","breakpoints","up","videoPlayerContainer","actionButton","background","chunksList","flexWrap","overflowX","marginTop","backButton","color","backButtonContainer","onboardingTitle","chunkCardBody","newChunkButtonContainer","right","bottom","zIndex","useToggle","initialValue","useState","state","setState","s","useLocalStorage","key","defaultValue","window","localStorage","getItem","fetched","toggleFetched","item","useCallback","setter","setItem","old_val","new_val","removeItem","undefined","userName","setName","clearName","UserContext","createContext","UserProvider","useMemo","Provider","useDefaultState","optional","defaultState","def","progressBarColor","progressBarRoot","width","transform","progressBarRail","progressBarTrack","progressBarThumb","progressBarMark","markedSlider","IndabaSlider","styles","props","Slider","colorPrimary","root","rail","track","thumb","mark","marked","useVideoPlayerProps","progressState","playStateIn","playerRef","setDuration","split","onProgressDrag","loop","isPlaying","setIsPlaying","isLoaded","setIsLoaded","dragging","setDragging","progress","setProgress","setProgressWithVideoUpdate","useEffect","current","getDuration","playerProps","playing","progressInterval","onProgress","played","onReady","onEnded","throttleUpdateVideo","useThrottleCallback","newVal","playerUpdater","setWithVideoUpdate","newValue","setWithoutVideoUpdate","useProgressBarControls","progressBarValue","onScrobble","updateProgressBar","progressBarProps","min","max","step","onChange","_","onChangeCommitted","showControls","toggleIsPlaying","ProgressBarLabel","open","Tooltip","enterTouchDelay","placement","videoControlsContainer","left","videoPlayerButton","borderRadius","videoControlsRewindButtonsContainer","videoControlsRewindButtonsContainerRight","videoControlsRewindButtonsContainerLeft","roundButton","top","progressBarContainer","marginBottom","VideoPlayer","url","controller","sliderMarks","slider","durationState","duration","playState","playingState","splitState","sliderValueLabelFormat","skipForwardHandler","skipBackwardHandler","Grid","container","xs","alignContent","alignItems","ref","Button","disableRipple","onClick","Replay5","Pause","PlayArrow","Forward5","valueLabelDisplay","valueLabelFormat","ValueLabelComponent","marks","useVideoPlayerController","autoPlay","useRef","updatePlayerProgress","secondsLoaded","getSecondsLoaded","seekTo","progressSetter","prevVal","adjacentMap","arr","func","val","ind","input","concat","map","pair","oneSatisfies","pred","filter","useUpdateTranscription","setChunks","toUpdate","updatedTranscription","id","review","selectedtranscription","transcription","creatorid","getTranscriptionByCreator","removeReview","updatedat","Date","uuidv4","useCropChunk","storyDuration","newSplit","newName","allChunks","neighbouringChunks","el","idx","prev","next","deleteNegativeChunks","renameChunk","sort","a","b","ChunksContext","chunksContext","ChunksProvider","useChunksState","useContext","useButtonStyles","button","backgroundColor","marginLeft","marginRight","textTransform","IndabaButton","overrideClass","overrideStyles","useStyleClass","FlatPaper","React","forwardRef","Paper","elevation","modal","outline","modalContentBox","modalPaper","maxWith","CentralModal","header","exit","Modal","DialogContent","Container","paddingTop","Close","Divider","location","href","api_base_address","decodeURIComponent","NotAttemptingAction","CropThumbComponent","isProgressThumb","ChunkCropper","story_id","croppedSplitState","cropPlayerProgressState","cropPlayerController","cropperPlayerRef","videoSplit","setVideoSplit","croppedSplit","setCroppedSplit","ThumbComponent","moveTo","EditChunkModal","cropChunk","newCropSplit","setNewCropSplit","paddingBottom","VideoThumbnail","crossOrigin","BackButton","action","Fab","ChevronLeft","useConfirmBeforeAction","condition","True","attemptingActionWith","setAttemptingActionWith","confirmAction","cancelAction","attemptAction","args","WarningMessage","message","Warning","ConfirmIntentModal","actionControls","warningMessage","TranscriptionsModal","overflow","ScrollToOnMount","scrollIntoView","behavior","block","inline","IndabaMenu","anchor","show","menuItems","Menu","anchorEl","MenuItem","handler","ChunkCardContextMenu","showContextMenu","setShowContextMenu","alignSelf","ClickAwayListener","onClickAway","IconButton","MoreVert","loadingModal","LoadingModal","CircularProgress","useSlideshow","list","page","direction","setPage","reset","lastPage","goTo","contentContainer","instructionsContainer","flexGrow","divider","centerVertically","textAlign","buttonsContainer","stepIcon","fill","stepText","stepCompleted","stepLabel","OnboardingModal","dismiss","steps","stepsLabels","startButtonContent","dismissHandler","nextPageHandler","prevPageHandler","Stepper","activeStep","alternativeLabel","Step","StepLabel","StepIconProps","active","text","completed","size","disableElevation","ChevronRight","instructionsOne","instructionOneStepLabel","instructionsTwo","instructionTwoStepLabel","instructionsThree","instructionThreeStepLabel","instructionsFour","instructionFourStepLabel","instructionsTitle","startChunking","attemptDeleteWarningTitle","attemptDeleteWarningBody","attemptNewChunkTitle","attemptNewChunkBody","delete","edit","viewTranscriptions","newChunk","doneCard","GetCols","useTheme","matches","useMediaQuery","console","log","ChunkEditor","atExit","onboarding","newChunks","videoPlayerProgressState","videoPlayerController","setPlay","getMarks","doWithChunks","doWith","useDoWithChunks","deleteChunk","toDelete","c","first","useDeleteChunk","splitAt","onBoundary","invalidSplit","enclosingChunk","useNewChunk","playingChunk","setPlayingChunk","handleChunkPlayButtonClick","videoPlaying","croppingChunk","setCroppingChunk","attemptNewChunk","attemptToDeleteChunk","attemptDeleteActionControls","showTranscriptionsFor","setShowTranscriptionsFor","playButtonStyle","chunkCardContentStyle","chunkCardStyle","showOnboardingModal","dismissOnboardingModal","playerDragHandler","justify","GridList","cellHeight","cols","GridListTile","forEach","handleAttemptDeleteChunk","Stop","Check","Add","FlatCard","context","actions","card","CardMedia","card_image","image","CardActions","LinearProgressWithLabel","View","Box","mr","LinearProgress","minWidth","borderColor","html","fontFamily","paper","border","borderTop","borderTopRightRadius","borderTopLeftRadius","stepHeader","borderBottomRightRadius","borderBottomLeftRadius","perform","StepInfo","description","onSelect","enabled","disabled","introContainer","transcriberModal","SimpleInputForm","placeholder","buttonText","onSubmit","setInput","InputBase","e","target","flex","paddingLeft","NameModal","back","greeting","transcriptionFor","notMe","Title","storyName","Dashboard","logOutAction","md","Chip","onDelete","avatar","Avatar","label","spacing","lg","Header","contextMenuItems","HelpOutline","chunkingDesc","chunkingTitle","transcriptionDesc","transcriptionTitle","reviewDesc","reviewTitle","useSteps","setView","Chunking","Transcribing","Reviewing","chunkProgressHeight","transcribeButton","inputField","chunkProgressRail","chunkProgressTrack","chunkProgressMark","opacity","stepperDots","stepperDotsContainer","stepperDot","stepperRoot","slideshowContainer","slideshowContentContainer","Slideshow","onNavigate","onComplete","currentPage","numberOfPages","contentContainerStyle","leftColumn","rightColumn","aria-label","NavigateBefore","Done","NavigateNext","EditTranscriptionCard","inputRef","transcriptionValue","TextField","autoFocus","multiline","rows","getUsersTranscription","getMiniChunks","miniChunks","currentTime","push","getMiniChunkEnd","miniChunk","useTranscriberReducer","updateTranscription","setSplit","pageChange","newCurrentChunk","newMiniChunks","newCurrentMiniChunk","newTranscription","prevMiniChunk","currentChunk","newChunkStart","currentMiniChunk","includes","actionType","lastMiniChunk","useAutoPauseOnType","setPlaying","setTypingDebounced","playStateBeforeTypingDebounce","setPlayStateBeforeTypingDebounce","debouncedPlay","useDebounceCallback","typingDebounced","last","EmptyComponent","Transcriber","transcriberReducer","useReducer","transcriberState","transcriberDispatch","focus","exitHandler","onType","markActive","MobileStepper","dotActive","dots","dot","nextButton","ArrowLeft","ArrowRight","pushStoryChanges","new_story","axios","request","method","withCredentials","data","useOurstoryApi","story","setStory","setChunksWithUpdate","transformResponse","r","JSON","parse","new_chunks","old_story","then","response","memoChunks","storyTitle","chunksState","editingTranscriptionWarningHeading","nameTranscription","doneButton","cardContainer","textReview","whiteSpace","maxHeight","overflowY","Reviewer","playerController","chunksToReview","updateReview","selectedTranscription","reviewedat","reviewedby","useUpdateReview","deleteReview","useDeleteReview","transcriptionEdit","setTranscriptionEdit","editingTranscription","setEditingTranscription","Radio","checked","textDecoration","List","ListItem","yr","mt","dy","hr","sec","yrs","mts","dys","hrs","mins","secs","periodAgo","contributions","created","transcribed","reviewed","contributionDescription","epochs","timeAgo","date","timeAgoInSeconds","interval","epoch","getString","pluralize","ContributionDescription","contribution","type","typeDescription","ContributerListModal","contributers","Array","from","listContributions","get","set","Map","contributer","loading","viewInstructions","chunking","dashboard","reviewing","transcribing","showContributions","getTitle","view","App","storyId","setStoryId","editid","useStoryId","chunkingProgress","transcriptionProgress","countChunksWithTranscription","reviewProgress","countReviewedChunks","showContributers","toggleShowContributers","showChunkEditorOnboarding","setShowChunkEditorOnboarding","showTranscriberOnboarding","setShowTranscriberOnboarding","showReviewerOnboardring","setShowReviewerOnboarding","hidden","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","typography","join","palette","primary","main","secondary","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"iJAAIA,E,mLCGEC,EAAU,IAAIC,IAAiB,CACnCC,GAAI,CACFC,iBAAkB,sBA2BTC,EAAU,SAACC,GAAD,OACnBC,EAEAC,KAAKC,MAAMH,IADD,GAAV,WAAmBC,EAAU,EAAI,EAAIA,GAAYA,EAAQG,WAD1D,IAACH,GAYSI,EAAc,SAACC,GAAD,gBACtBP,EAAQO,EAAO,MADO,YACUP,EAAQO,EAAU,IAD5B,YACmCP,EAC1DO,EAAU,IAFa,YAGpBP,EAAQG,KAAKK,MAAwC,KAAjCD,EAAUJ,KAAKC,MAAMG,QAWnCE,EAAmB,SAACF,GAAD,OAC9BA,EAAU,KACND,EAAYC,GAASG,UAAU,EAAG,GAClCJ,EAAYC,GAASG,UAAU,EAAG,IAQ3BC,EAAsB,SAACC,GAAD,OACjCA,EAAOC,OAAS,EAAID,EAAOA,EAAOC,OAAS,GAAGC,aAAe,eAQlDC,EAAwB,SAACH,GAAD,OACnCA,EAAOC,OAAS,EAAID,EAAOA,EAAOC,OAAS,GAAGG,eAAiB,GAepDC,EAAoB,SAC/BL,EACAM,GAEA,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAOC,OAAQM,IACjC,GAAID,EAAON,EAAOO,GAAGC,kBAAoBF,EAAON,EAAOO,GAAGH,eACxD,OAAOJ,EAAOO,IAyCPE,EAAmB,SAACC,GAAD,OAC9BA,EAAMC,eAAeC,QACnB,SAACC,EAAKC,GAAN,OAAYD,GAAqB,KAAdC,EAAEC,WACrB,IAwFSC,EAAiB,SAACC,GAAD,MAAoB,CAChDC,MAAOC,OAAOF,EAAMG,MAAM,EAAG,IAC7BC,QAASF,OAAOF,EAAMG,MAAM,EAAG,IAC/BzB,QAASwB,OAAOF,EAAMG,MAAM,EAAG,IAC/BE,aAAcH,OAAOF,EAAMG,MAAM,EAAG,OAQzBG,EAAuB,SAClCb,GADkC,MAEF,CAChCc,MAAOR,EAAeN,EAAMe,gBAC5BC,IAAKV,EAAeN,EAAMR,gBASfyB,EAAY,SAACrB,GAAD,OACV,GAAbA,EAAKY,MAAa,GAAoB,GAAfZ,EAAKe,QAAef,EAAKX,SAErCiC,EAAY,SAAClB,GAAD,OACvBA,EAAMmB,KACFnB,EAAMmB,KACL7C,EAAQ8C,aACP9C,EAAQG,iBADT,UAGGwC,EAAUX,EAAeN,EAAMR,eAC/ByB,EAAUX,EAAeN,EAAMe,oB,kCC1O1BM,EAzB+B,SAAC,GAKxC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,aACAC,EACI,EADJA,UAEA,OACE,cAACC,EAAA,EAAD,CAAOC,MAAK,eAAOF,GAAaG,QAAQ,WAAxC,SACE,eAACC,EAAA,EAAD,CAAaF,MAAK,eAAOH,GAAzB,UACGD,EACD,cAACO,EAAA,EAAD,CAAYF,QAAQ,YAAYG,UAAU,MAA1C,SACGT,UCTLU,EAAYC,YAAW,CAC3BC,eAAgB,CACdC,SAAU,SACVC,SAAU,cAuDCC,EA/CV,SAAC,GAAmD,IAAjDrC,EAAgD,EAAhDA,MAAOuB,EAAyC,EAAzCA,SAAUI,EAA+B,EAA/BA,MAAOW,EAAwB,EAAxBA,kBACxBC,EAAUP,IACVQ,EAAW3B,EAAqBb,GAEhCyC,EAAaxB,EAAUuB,EAASxB,KAChC0B,EAAezB,EAAUuB,EAAS1B,OAExC,OACE,cAAC,EAAD,CACEQ,MACE,8BACE,uBACEqB,UAAWJ,EAAQL,eACnBP,MAAO,CACLiB,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,OAAQ,YANZ,UASE,uBACEpB,MAAO,CACLqB,WAAY,IACZC,aAAc,WACdL,QAAS,OACTM,eAAgB,gBAChBJ,WAAY,OACZX,SAAU,QAPd,UAUGjB,EAAUlB,GACVsC,KApBL,UAsBMnD,EAAiBuD,GAtBvB,cAsB0CvD,EACtCsD,SAKRhB,UAAS,2BAAOE,GAAP,IAAcS,SAAU,aACjCZ,aAAY,2BAAOG,GAAP,IAAcwB,QAAS,qBAhCrC,SAkCG5B,K,QCdQS,EAhDGC,aAAW,SAACmB,GAAD,MAAY,CACvCC,eAAe,aACbC,OAAQ,MACRC,UAAW,QACXC,SAAU,OACTJ,EAAMK,YAAYC,GAAG,MAAQ,CAC5BF,SAAU,QAGdG,qBAAsB,CACpBZ,OAAQ,QAEVa,aAAc,CACZ,UAAW,CACTC,WAAY,YAGhBC,WAAY,CACVC,SAAU,SACVC,UAAW,SACXV,OAAQ,OACRW,UAAW,OAEbC,WAAY,CACVL,WAAY,cACZM,MAAO,QACPhC,SAAU,QAEZiC,oBAAqB,CACnBH,UAAW,MACXd,QAAS,OAEXkB,gBAAiB,CACftB,OAAQ,GAEVuB,cAAe,CACblC,SAAU,YAEZmC,wBAAyB,CACvBnC,SAAU,QACVoC,MAAO,EACPC,OAAQ,EACRC,QAAQ,OC/BGC,EATG,SAACC,GAAwC,IAAD,EAE5BC,mBAASD,GAFmB,mBAE/CE,EAF+C,KAExCC,EAFwC,KAMtD,MAAO,CAACD,EAFY,kBAAMC,GAAS,SAAAC,GAAC,OAAKA,MAEbD,IC2BjBE,EAjCS,SAACC,EAAaC,GAA8F,IAAD,IAEvGN,mBAAQ,UAAqBO,OAAOC,aAAaC,QAAQJ,UAAjD,QAAyDC,GAFsC,mBAE1HL,EAF0H,KAEnHC,EAFmH,OAIhGJ,GAAU,GAJsF,mBAI1HY,EAJ0H,KAIjHC,EAJiH,KAMjI,IAAKD,EAAS,CACZ,IAAME,EAAOL,OAAOC,aAAaC,QAAQJ,GACzCM,IACAC,GAAQV,EAASU,GAqBnB,MAAO,CAACX,EAlBaY,uBAAY,SAACC,GACX,iBAAVA,GAAiC,OAAXA,GAC/BZ,EAASY,GACTP,OAAOC,aAAaO,QAAQV,EAA5B,OAAiCS,QAAjC,IAAiCA,IAAU,KAClCA,GACTZ,GAAS,SAACc,GACR,IAAMC,EAAUH,EAAOE,GAEvB,OADAT,OAAOC,aAAaO,QAAQV,EAA5B,OAAiCY,QAAjC,IAAiCA,IAAW,IACrCA,OAGV,CAACZ,IAEiBQ,uBAAY,WAC7BN,OAAOC,aAAaU,WAAWb,GAC/BH,OAASiB,KACV,CAACjB,EAAUG,MCrBVN,EAAgC,CACpCqB,cAAUD,EACVE,QAAS,kBAAM,MACfC,UAAW,kBAAM,OAGNC,EAAcC,wBAA+BzB,GAiB3C0B,EAfoB,SAAC,GAAkB,IAAhB/E,EAAe,EAAfA,SAAe,EAChB0D,ECnBb,QDkB6B,mBAC5C9D,EAD4C,KACtC+E,EADsC,KAC7BC,EAD6B,KAG7CxH,EAAQ4H,mBACZ,iBAAO,CACLN,SAAU9E,EACV+E,QAASA,EACTC,UAAWA,KAEb,CAAChF,EAAM+E,EAASC,IAGlB,OAAO,cAACC,EAAYI,SAAb,CAAsB7H,MAAOA,EAA7B,SAAqC4C,K,wDEpB/BkF,GALS,SAAoBC,EAAgCC,GACxE,IAAMC,EAAM/B,mBAAS8B,GACrB,cAAOD,QAAP,IAAOA,IAAYE,G,UCNjB5E,GAAYC,YAAW,CAC3B4E,iBAAkB,CAChB1C,MAAO,WAET2C,gBAAiB,CACf3D,QAAS,MACT4D,MAAO,MACPC,UAAW,iBACX1D,OAAQ,GAEV2D,gBAAiB,CACf3D,OAAQ,GAEV4D,iBAAkB,CAChB5D,OAAQ,GAEV6D,iBAAkB,CAChB7D,OAAQ,GACRyD,MAAO,GACP9C,WAAY,GAEdmD,gBAAiB,CACf9D,OAAQ,GACRW,WAAY,GAEdoD,aAAc,CACZtE,OAAQ,KA2BGuE,GAvBgD,SAAC,GAGzD,IAFLC,EAEI,EAFJA,OACGC,EACC,0BACEjF,EAAUP,KAChB,OACE,qBAAKL,MAAO4F,EAAZ,SACE,cAACE,GAAA,EAAD,aACElF,QAAS,CACPmF,aAAcnF,EAAQsE,iBACtBc,KAAMpF,EAAQuE,gBACdc,KAAMrF,EAAQ0E,gBACdY,MAAOtF,EAAQ2E,iBACfY,MAAOvF,EAAQ4E,iBACfY,KAAMxF,EAAQ6E,gBACdY,OAAQzF,EAAQ8E,eAEdG,O,SCiGGS,GA3Ga,SAC1BC,EACAC,EACAC,EACAC,EAKAC,EACAC,EACAC,GAOI,IAAD,cAC+BL,EAD/B,GACIM,EADJ,KACeC,EADf,OAI6B7D,oBAAS,GAJtC,mBAII8D,EAJJ,KAIcC,EAJd,OAO6B/D,oBAAS,GAPtC,mBAOIgE,EAPJ,KAOcC,EAPd,KAUKC,EAAsDb,EAAtDa,SAAUC,EAA4Cd,EAA5Cc,YAAaC,EAA+Bf,EAA/Be,2BAE/BC,qBAAU,WACJP,GAAYP,EAAUe,SACxBd,EAAYD,EAAUe,QAAQC,iBAE/B,CAACf,EAAaD,EAAWO,IAG5B,IAAMU,EAAgC9C,mBACpC,iBAAO,CACL+C,SAAUT,GAAYJ,EACtBc,iBAAkB,IAClBC,WAAY,gBAAGC,EAAH,EAAGA,OAAH,OACVT,EAAYS,IACdC,QAAS,kBAAMd,GAAY,IAC3Be,QAAS,kBAAMjB,GAAa,OAE9B,CAACG,EAAUJ,EAAWC,EAAcM,IAGhCY,EAAsBC,cAC1B,SAACC,GAAD,OAAoBb,EAA2Ba,EAAS,OACxD,IAjCC,EAhD0B,SAC7BlF,EACAmF,GAKI,IAAD,EACuBlF,mBAASD,GADhC,mBACIE,EADJ,KACWC,EADX,KAGGiF,EAAqBtE,uBAAY,SAACuE,GACpClF,EAASkF,GACTF,EAAcE,KACb,CAAClF,EAAUgF,IAEhB,MAAO,CACLpL,MAAOmG,EACPoF,sBAAuBnF,EACvBiF,sBAsEEG,CAAkC,IAAXpB,EAAgBa,GAHlCQ,EArCN,EAqCDzL,MACoB0L,EAtCnB,EAsCDL,mBACuBM,EAvCtB,EAuCDJ,sBAGFhB,qBAAU,WACRoB,EAA6B,IAAXvB,KACjB,CAACA,EAAUuB,IAGd,IAAMC,EAAmBhE,mBACvB,iBAAO,CACL5H,MAAOyL,EACPI,IAAmB,IAAdlC,EAAMxH,MACX2J,IAAiB,IAAZnC,EAAMtH,IACX0J,KAAM,KACNC,SAAU,SAACC,EAAQd,GACjBvB,GAAkBA,IAClBO,GAAY,GACZuB,EAAWP,IAEbe,kBAAmB,SAACD,EAAQd,GAC1BhB,GAAY,OAGhB,CAACsB,EAAkB9B,EAAOC,EAAgB8B,IAkB5C,OAfAnB,qBAAU,WAEJH,EAAWT,EAAMtH,IAAM,KACrBwH,IAASK,EACXI,EAA2BX,EAAMxH,QAEjCmI,EAA2BX,EAAMtH,KACjC0H,GAAa,IAGNK,EAAWT,EAAMxH,MAAQ,MAClCmI,EAA2BX,EAAMxH,MAAQ,MAE1C,CAACiI,EAAUN,EAAWC,EAAcJ,EAAMtH,IAAKsH,EAAMxH,MAAO0H,EAAMS,EAA4BJ,IAE1F,CACLQ,cACAkB,mBACAO,cAAc,EACdrC,YACAsC,gBAAiB,kBAAMrC,GAAa,SAAC1D,GAAD,OAAQA,Q,UCpIjCgG,GARqC,SAAC,GAI9C,IAHLzJ,EAGI,EAHJA,SACA0J,EAEI,EAFJA,KACAtM,EACI,EADJA,MAEA,OAAO,cAACuM,GAAA,EAAD,CAASD,KAAMA,EAAME,gBAAiB,EAAGC,UAAU,MAAM9J,MAAO3C,EAAhE,SAAwE4C,KCgFlES,GArFGC,aAAW,SAACmB,GAAD,MAAY,CACvCiI,uBAAwB,CACtBzI,QAAS,OACT0I,KAAM,MACNlJ,SAAU,WACVqC,OAAQ,MACRuC,UAAW,wBAEbuE,kBAAmB,CAEjBC,aAAc,OAEhBC,oCAAqC,CACnCrJ,SAAU,WACVqC,QAAS,IAKXiH,yCAA0C,CACxClH,MAAO,SAKTmH,wCAAyC,CACvCL,KAAM,SAKRM,YAAa,CACXJ,aAAc,MAEdzE,MAAO,QACPzD,OAAQ,QAERV,QAAS,YAOXe,qBAAsB,CACpBvB,SAAU,WACV2E,MAAO,QAEP8E,IAAK,EACLrH,MAAO,EACP8G,KAAM,GAGRQ,qBAAsB,CACpBR,KAAM,IACN7G,OAAQ,IACRsH,aAAc,QACd/E,UAAW,iCACXD,MAAO,QAETF,iBAAkB,CAChB1C,MAAO,WAET2C,gBAAiB,CACf3D,QAAS,MACT4D,MAAO,MACPC,UAAW,iBACX1D,OAAQ,GAEV2D,gBAAiB,CACf3D,OAAQ,GAEV4D,iBAAkB,CAChB5D,OAAQ,GAEV6D,iBAAkB,CAChB7D,OAAQ,GACRW,WAAY,GAEdmD,gBAAiB,CACf9D,OAAQ,GACRW,WAAY,OCmJD+H,GA3IiC,SAAC,GAS1C,IARLC,EAQI,EARJA,IACA7D,EAOI,EAPJA,UACA8D,EAMI,EANJA,WACAC,EAKI,EALJA,YACAjE,EAII,EAJJA,cACAK,EAGI,EAHJA,eACA6D,EAEI,EAFJA,OACA5D,EACI,EADJA,KAEMjG,EAAUP,KADZ,EAE4ByE,GAAe,OAACyF,QAAD,IAACA,OAAD,EAACA,EAAYG,cAAe,GAFvE,mBAEGC,EAFH,KAEajE,EAFb,KAGIU,EAAyCb,EAAzCa,SAAUE,EAA+Bf,EAA/Be,2BACZsD,EAAY9F,GAAe,OAACyF,QAAD,IAACA,OAAD,EAACA,EAAYM,cAAc,GAJxD,EAKY/F,GAAe,OAACyF,QAAD,IAACA,OAAD,EAACA,EAAYO,WAAY,CACtD3L,MAAO,EACPE,IAAK,IAFAsH,EALH,sBAgBAL,GACFC,EACAqE,EACAnE,EACAC,EACAC,EACAC,EACAC,GAZAa,EAXE,EAWFA,YACAkB,EAZE,EAYFA,iBACAO,EAbE,EAaFA,aACArC,EAdE,EAcFA,UACAsC,EAfE,EAeFA,gBAWI2B,EAAyBhH,uBAC7B,SAACqD,GACC,OAAO5J,GACJ4J,EAAW,IAAMT,EAAMxH,QAAU,EAC9B,EACAiI,EAAW,IAAMT,EAAMxH,OAASwL,KAGxC,CAACA,EAAUhE,EAAMxH,QAGb6L,EAAqBjH,uBAAY,WACrC4G,GACErD,GAA2B,SAACF,GAAD,OAAcA,EAAW,EAAIuD,OACzD,CAACrD,EAA4BqD,IAE1BM,EAAsBlH,uBAAY,WACtC4G,GACErD,GAA2B,SAACF,GAAD,OAAcA,EAAW,EAAIuD,OACzD,CAACrD,EAA4BqD,IAEhC,OACE,eAACO,EAAA,EAAD,CACEC,WAAS,EACTrH,MAAI,EACJ9C,UAAWJ,EAAQoB,qBACnBoJ,GAAI,GACJC,aAAa,SACbC,WAAW,SANb,UAQE,cAAC,KAAD,aACEhB,IAAKA,EACLiB,IAAK9E,EACLrB,MAAM,OACNzD,OAAO,OACPkF,KAAMA,GACFa,IAELyB,GACC,sBAAKnI,UAAWJ,EAAQ8I,uBAAxB,UACE,qBACE1I,UAAS,UAAKJ,EAAQkJ,oCAAb,YAAoDlJ,EAAQmJ,0CADvE,SAGE,cAACyB,EAAA,EAAD,CACEC,eAAa,EACbxL,QAAQ,WACRuC,MAAM,YACNxB,UAAS,WAAMJ,EAAQqJ,aACvByB,QAAST,EALX,SAOE,cAACU,EAAA,EAAD,CAAS3L,MAAO,CAAEQ,SAAU,UAGhC,cAACgL,EAAA,EAAD,CACEC,eAAa,EACbxL,QAAQ,YACRuC,MAAM,UACNxB,UAAWJ,EAAQgJ,kBACnB8B,QAAStC,EALX,SAOItC,GAAa,cAAC8E,EAAA,EAAD,CAAO5L,MAAO,CAAEQ,SAAU,OACvC,cAACqL,EAAA,EAAD,CAAW7L,MAAO,CAAEQ,SAAU,QAGlC,qBACEQ,UAAS,UAAKJ,EAAQkJ,oCAAb,YAAoDlJ,EAAQoJ,yCADvE,SAGE,cAACwB,EAAA,EAAD,CACEE,QAASV,EACT/K,QAAQ,WACRuC,MAAM,YACNiJ,eAAa,EACbzK,UAAS,UAAKJ,EAAQqJ,aALxB,SAOE,cAAC6B,EAAA,EAAD,CAAU9L,MAAO,CAAEQ,SAAU,aAKpCiK,GACC,sBAAKzJ,UAAWJ,EAAQuJ,qBAAxB,UAEE,cAAChK,EAAA,EAAD,CACEF,QAAQ,UACRD,MAAO,CAAEoB,OAAQ,MAAOoB,MAAO,WAFjC,SAIGmI,GAAQ,UACJnN,GACA4J,EAAWT,EAAMxH,OAASwL,GAFtB,cAGAnN,GAAkBmJ,EAAMtH,IAAMsH,EAAMxH,OAASwL,MAExD,cAAC,GAAD,aACEoB,kBAAkB,OAClBC,iBAAkBjB,EAClBkB,oBAAqB5C,GACrB6C,MAAO1B,GAA4B,IAC/B5B,WCjIDuD,GA9EkB,SAACC,GAkChC,IAAM3F,EAAY4F,iBAAoB,MAEhCC,EAAuBvI,uBAAY,SAACoE,GAAoB,IAAD,IACrDoE,EAAa,OAAG9F,QAAH,IAAGA,GAAH,UAAGA,EAAWe,eAAd,aAAG,EAAoBgF,mBAC1CD,GAAiBA,EAAgB,IAAjC,UAAsC9F,EAAUe,eAAhD,OAAsC,EAAmBiF,OAAOtE,EAAQ,eACvE,IANA,EAQ6BjF,mBAAS,GARtC,mBAQIkE,EARJ,KAQcC,EARd,KAUGyD,EAAa5H,mBAAqB,CAAE/D,MAAO,EAAGE,IAAK,IAEnDiI,EAA6BvD,uBAAY,SAC7C2I,GAE8B,kBAAnBA,GACTrF,EAAYqF,GACZJ,EAAqBI,IAErBrF,GAAY,SAACsF,GACX,IAAMxE,EAASuE,EAAeC,GAE9B,OADAL,EAAqBnE,GACdA,OAGV,CAACmE,IAzBD,EA2B6BpJ,mBAAS,GA3BtC,mBA2BIyH,EA3BJ,KA2BcjE,EA3Bd,KA6BGmE,EAAe3H,mBAAQ,OAACkJ,QAAD,IAACA,MAE9B,MAAO,CACL7F,cAAe,CAAEa,WAAUC,cAAaC,8BACxCwD,aACAD,eACAF,WACAJ,WAAY,CACVG,cAAe,CAACC,EAAUjE,GAC1BmE,eACAC,cAEFrE,c,UCxEWmG,GAZK,SAClBC,EACAC,GAFkB,OAIlBD,EACGtO,QACC,SAACC,EAAeuO,EAAKC,EAAKC,GAA1B,OACED,EAAM,EAAIC,EAAMrP,OAASY,EAAI0O,OAAO,CAAC,CAACH,EAAKE,EAAMD,EAAM,MAAQxO,IACjE,IAED2O,KAAI,SAACC,GAAD,OAAUN,EAAKM,EAAK,GAAIA,EAAK,QCDvBC,GALM,SACnBR,EACAS,GAFmB,OAGPT,EAAIU,OAAOD,GAAM1P,OAAS,GC4K3B4P,GAAyB,SACpCC,GA6DA,OAvDuB1J,uBACrB,SAAC2J,EAAiBC,EAA8BrJ,GAC9CmJ,GAAU,SAAC9P,GA+CT,OA9CkBA,EAAOwP,KAAI,SAAC9O,GAAD,eAC3BA,EAAMuP,KAAOF,EAASE,GAAtB,4BAEU,UAAAvP,EAAMwP,cAAN,eAAcC,0BAAd,UjB1LqB,SAACzP,EAAciG,GAAf,OACvCjG,EAAMC,eAAeiP,QACnB,SAACQ,GAAD,OAAmBA,EAAcC,YAAc1J,KAC/C,GiBwLc2J,CAA0B5P,EAAOiG,UAD/B,aACF,EAA4CsJ,KACrB,KAAzBD,EjB9LY,SAACtP,GAAD,mBAAC,eAAuBA,GAAxB,IAA+BwP,YAAQxJ,IiB+L/C6J,CAAa7P,GACbA,GANV,IAWMC,eAAgB+O,GACdhP,EAAMC,gBACN,SAACG,GAAD,OAAOA,EAAEuP,YAAc1J,KAGI,KAAzBqJ,EACEtP,EAAMC,eAAeiP,QACnB,SAAC9O,GAAD,OAAOA,EAAEuP,YAAc1J,KAEzBjG,EAAMC,eAAe6O,KAAI,SAAC1O,GAAD,OACvBA,EAAEuP,YAAc1J,EAAhB,2BAES7F,GAFT,IAGMC,QAASiP,EACTQ,UAAW,IAAIC,OAEjB3P,KAGRJ,EAAMC,eAAe4O,OACM,KAAzBS,EACI,GACA,CACE,CACEK,UAAW1J,EACX5F,QAASiP,EACTC,GAAIS,eACJF,UAAW,IAAIC,UAK/B/P,UAKV,CAACoP,KAmFQa,GAAe,SAC1Bb,GA2EA,OAnEe1J,uBACb,SACE2J,EACAa,EACAC,EACAlK,EACAmK,GAEAhB,GAAU,SAAC9P,GACT,IjBjINU,EACAqQ,EiBgIYC,GjBjIZtQ,EiBiImDqP,GjBhInDgB,EiBgI6D/Q,GjB9HnDY,QACR,SAACC,EAAKoQ,EAAIC,GAAV,OACED,EAAGhB,KAAOvP,EAAMuP,GACZ,CAAEkB,KAAMJ,EAAUG,EAAM,GAAIE,KAAML,EAAUG,EAAM,IAClDrQ,IACN,CAAEsQ,UAAMzK,EAAW0K,UAAM1K,KiB0HrB,OjBtU4B,SAAC1G,GAAD,OAClCA,EAAO4P,QAAO,SAAClP,GAAD,OAAWA,EAAMN,eAAiBM,EAAMF,oBiBqUzC6Q,CACLrR,EACGwP,KAAI,SAAC9O,GAAD,eACHA,EAAMuP,KAAOF,EAASE,GAAtB,2BAEUa,EjB9UG,SAACA,EAAiBpQ,GAAlB,MACb,KAAZoQ,EAAA,2BAAsBpQ,GAAtB,IAA6BmB,KAAMiP,IAAnC,2BAAoDpQ,GAApD,IAA2DmB,UAAM6E,IiB8U3C4K,CAAYR,EAASpQ,GADd,2BAEFA,GAFE,IAEKmB,UAAM6E,KAJ5B,IAKMlG,iBAAkBqQ,EAAS,GAC3BpP,eAAgB/B,EAAYmR,EAAS,GAAKD,GAC1CxQ,eAAgByQ,EAAS,GACzB3Q,aAAcR,EAAYmR,EAAS,GAAKD,GACxCJ,UAAW,IAAIC,OAEjB/P,EAAMuP,MAAN,UAAae,EAAmBI,YAAhC,aAAa,EAAyBnB,IAAtC,2BAEKvP,GAFL,IAGEF,iBAAkBqQ,EAAS,GAC3BpP,eAAgB/B,EAAYmR,EAAS,GAAKD,GAC1CJ,UAAW,IAAIC,OAEjB/P,EAAMuP,MAAN,UAAae,EAAmBG,YAAhC,aAAa,EAAyBlB,IAAtC,2BAEKvP,GAFL,IAGEN,eAAgByQ,EAAS,GACzB3Q,aAAcR,EAAYmR,EAAS,GAAKD,GACxCJ,UAAW,IAAIC,OAEjB/P,KAOL6O,OACEyB,EAAmBG,MAAwB,IAAhBN,EAAS,GAajC,GAZA,CACE,CACEpP,eAAgB/B,EAAY,GAC5Bc,iBAAkB,EAClBN,aAAcR,EAAYmR,EAAS,GAAKD,GACxCxQ,eAAgByQ,EAAS,GACzBR,UAAW1J,EACX6J,UAAW,IAAIC,KACfR,GAAIS,eACJ/P,eAAgB,OAK5B4Q,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEpR,eAAiBqR,EAAErR,uBAG1C,CAAC0P,KC1YC4B,GAAgB3K,wBAEpB,CAAC,GAAI,kBAAM,QA2BE4K,GALN,CAAEC,eAT8C,SAAC,GAGjD,IAFLpM,EAEI,EAFJA,MACAvD,EACI,EADJA,SAEA,OACE,cAACyP,GAAcxK,SAAf,CAAwB7H,MAAOmG,EAA/B,SAAuCvD,KAIlB4P,eADF,kBAAMC,qBAAWJ,MC1BpCK,GAAkBpP,YAAW,CACjCqP,OAAQ,SAACpS,GAAD,MAAY,CAClBqS,gBAAiB,UACjBpN,MAAO,UACPrB,WAAY,OACZS,UAAYrE,EAAO,SAAS,SAC5BsS,WAAW,MACXC,YAAY,MACZ1K,MAAO7H,EAAQ,SAAS,UACxBsM,aAActM,EAAQ,MAAQ,MAC9BiE,QAASjE,EAAQ,MAAQ,kBACzBwS,cAAe,OACf,UAAW,CACTH,gBAAiB,WAEnB,aAAc,CACZA,gBAAiB,eAqBRI,GAZX,SAAC,GAA2C,IAAzCpQ,EAAwC,EAAxCA,SAAUrC,EAA8B,EAA9BA,MAAOqI,EAAuB,EAAvBA,OAAWC,EAAY,6CACvCoK,EALc,SAACrK,GAAD,OAA6BtF,YAAW,CAAE4P,eAAe,eAAMtK,KAK7DuK,CAAcvK,EAAduK,GAEhBvP,EAAU8O,KAAkBnS,GAElC,OACE,cAACiO,EAAA,EAAD,yBAAQC,eAAa,EAACzK,UAAS,UAAKJ,EAAQ+O,OAAb,YAAuBM,EAAcC,eAArC,YAAuDrK,EAAM7F,QAAa6F,GAAzG,aACGjG,M,qECtBQwQ,GARwCC,IAAMC,YAAW,WAAsB/E,GAAS,IAA5B3L,EAA2B,EAA3BA,SAAUI,EAAiB,EAAjBA,MACjF,OACI,cAACuQ,GAAA,EAAD,CAAOhF,IAAKA,EAAKiF,UAAW,EAAGxQ,MAAOA,EAAtC,SACKJ,OCMPS,GAAYC,aAAW,SAAAmB,GAAK,MAAK,CACrCgP,MAAO,CACLC,QAAS,IACTzP,QAAS,OACTqK,WAAY,SACZ/J,eAAgB,UAElBoP,gBAAiB,GAGjBC,WAAW,aACTC,QAAS,QACRpP,EAAMK,YAAYC,GAAG,MAAQ,CAC5BF,SAAU,YAyDDiP,GA/CmC,SAAC,GAK5C,IAJLlR,EAII,EAJJA,SACAmR,EAGI,EAHJA,OACAC,EAEI,EAFJA,KACGnL,EACC,4CACEjF,EAAUP,KAEhB,OACE,cAAC4Q,GAAA,EAAD,yBAAOjQ,UAAWJ,EAAQ6P,OAAW5K,GAArC,aACE,cAACqL,GAAA,EAAD,CAAelR,MAAO,CAAE0Q,QAAS,QAAU1P,UAAWJ,EAAQgQ,WAA9D,SACE,eAAC,GAAD,WACGG,GACC,cAACI,GAAA,EAAD,UACE,sBACEnR,MAAO,CACLiB,QAAS,OACTC,cAAe,MACfK,eAAgB,gBAChB6P,WAAY,OALhB,UAQE,qBACEpR,MAAO,CACLiB,QAAS,OACTC,cAAe,SACfK,eAAgB,SAChB8J,aAAc,SACdjG,MAAO,OANX,SASG2L,IAEH,cAACvF,EAAA,EAAD,CAAQE,QAASsF,EAAMhR,MAAO,CAAC8P,YAAY,SAA3C,SACE,cAACuB,GAAA,EAAD,WAKR,cAACC,GAAA,EAAD,CAAStR,MAAO,CAACsC,UAAU,SAC3B,qBAAKtB,UAAWJ,EAAQ+P,gBAAxB,SAA0C/Q,atB1EpDlD,EAAU+G,OAAO8N,SAASC,KAAK7K,MAAM,WAAW,GAAGA,MAAM,KAAK,GAI9D,IAAI8K,GAGJA,GAAmBC,mBAAmBjO,OAAO8N,SAASC,KAAK7K,MAAM,WAAW,IAW7DjK,IuBlBHiV,GvBkBGjV,KwBNTkV,GAAmC,SAAC/L,GACxC,IAAMgM,EAAmD,IAAhChM,EAAc,cACvC,OACE,gDACMA,GADN,IAEE7F,MAAK,2BACC6F,EAAc7F,OADf,IAEHqF,UAAWwM,EAAkB,IAAM,mBACnCjC,gBAAkBiC,EAA4B,UAAV,UALxC,SAQIA,EASE,KARF,qBACE7R,MAAO,CACL2B,OAAQ,OACRyD,MAAO,MACPC,UAAW,oBACXuK,gBAAiB,eA2GdkC,GA5FmC,SAAC,GAK5C,IAJLC,EAII,EAJJA,SACA1T,EAGI,EAHJA,MACAkQ,EAEI,EAFJA,cACAyD,EACI,EADJA,kBACI,EAMA7F,KAHa8F,EAHb,EAGF1L,cACY2L,EAJV,EAIF3H,WACW4H,EALT,EAKF1L,UALE,EAQgCvD,mBAAS,CAAC,EAAG,IAR7C,mBAQGkP,EARH,KAQeC,EARf,mBASoCL,EATpC,GASGM,EATH,KASiBC,EATjB,KAWIjL,EAA+B2K,EAA/B3K,2BAGRC,qBAAU,WACRD,EAA2BjJ,EAAMF,kBACjC,IAAMgB,EAAQd,EAAMF,iBAAmB,EAAIoQ,EACrClP,EAAMhB,EAAMN,eAAiB,EAAIwQ,EACvC8D,EAAc,CAAClT,EAAQ,EAAI,EAAIA,EAAOE,EAAM,EAAI,EAAIA,IACpDkT,EAAgB,CAAClU,EAAMF,iBAAkBE,EAAMN,mBAC9C,CAACM,EAAMF,iBAAkBE,EAAMN,eAAgBwQ,EAAejH,EAA4BiL,IAE7F,IAAM3R,EAAUP,KAQhB,OANAkH,qBAAU,WACJ0K,EAAwB7K,SAAWkL,EAAa,IAClDhL,EAA2BgL,EAAa,MAEzC,CAACA,EAAcL,EAAyB3K,IAGzC,8BACE,cAAC,GAAD,CACEf,cAAe0L,EACf3H,IAAG,UAAKmH,GAAL,+BAA4CM,GAC/CxH,WAAY2H,EACZzL,UAAW0L,EACX1H,OACE,qBAAKzJ,UAAWJ,EAAQuJ,qBAAxB,SACA,cAAC,GAAD,CACEnN,MAAO,CACa,IAAlBsV,EAAa,GACsB,IAAnCL,EAAwB7K,SACN,IAAlBkL,EAAa,IAEfzJ,IAAqB,IAAhBuJ,EAAW,GAChBtJ,IAAqB,IAAhBsJ,EAAW,GAChBrJ,KAAM,KACNyJ,eAAgBZ,GAChB5I,SACG,SAACC,EAAQX,GAERiK,EAAgB,CACbjK,EAAsB,GAAK,IAC3BA,EAAsB,GAAK,MAO9B,IAAImK,EAAiBnK,EAAsB,GAAK,IAWhD2J,EAAwB3K,2BAA2BmL,aC1DpDC,GAjCV,SAAC,GAA8C,IAA5CX,EAA2C,EAA3CA,SAAU1T,EAAiC,EAAjCA,MAAO2S,EAA0B,EAA1BA,KAAMzC,EAAoB,EAApBA,cAAoB,EACzBrL,mBAAS,IADgB,mBAC1C1D,EAD0C,aAG3B8P,GAAcE,kBAA3B/B,EAHwC,oBAS3CkF,EAAYrE,GAAab,GATkB,EAWTvK,mBAA2B,CAAC,EAAG,IAXtB,mBAW1C0P,EAX0C,KAW5BC,EAX4B,KAazCvO,EAAamL,qBAAWhL,GAAxBH,SAER,OACE,cAAC,GAAD,CACE0M,KAAM,WACJ3S,GAASiG,GAAYqO,EAAUtU,EAAOkQ,EAAeqE,EAActO,EAAU9E,GAC7EwR,KAEF1H,UAAgBjF,IAAVhG,EACN0S,OAAS,qBACP/Q,MAAO,CAAEoB,OAAQ,EAAGE,aAAc,YAD3B,qBAECjD,GAASkB,EAAUlB,MAR/B,SAUE,qBAAK2B,MAAO,CAAC8S,cAAe,QAA5B,SACGzU,GAAS,cAAC,GAAD,CAAc0T,SAAUA,EAAUC,kBAAmB,CAACY,EAAcC,GAAkBtE,cAAeA,EAAelQ,MAAOA,SCb9H0U,GAlCuC,SAAC,GAAmB,IAAjBzI,EAAgB,EAAhBA,IAAKrM,EAAW,EAAXA,KACtDwI,EAAY4F,iBAAoB,MAgBtC,OACE,cAAC,KAAD,CACE2G,YAAY,YACZ1I,IAAKA,EACLlF,MAAM,OACNzD,OAAO,OACPgG,SAAS,EACT4D,IAAK9E,EACLmH,GAAI,yBACJ7F,QAAS,WAAO,IAAD,EACb,UAAAtB,EAAUe,eAAV,SAAmBiF,OAAOxO,EAAM,gB,UC5BlCoC,GAAYC,YAAW,CAC3BiC,WAAY,CAGV9B,SAAS,QACTyJ,IAAI,MACJP,KAAK,SAwBMsJ,GAf+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACzCtS,EAAUP,KAEhB,OAEE,aADA,CACC8S,EAAA,EAAD,CAAKzH,QAASwH,EAAQlS,UAAWJ,EAAQ2B,WAAzC,SACE,cAAC6Q,GAAA,EAAD,CAAa5S,SAAS,a,mBJ9BhBmR,O,gBAAAA,Q,KAgBZ,IA8Ce0B,GA9CgB,SAC7BH,EACAI,GAuBI,IAAD,EACqDpQ,mBAEtDyO,GAAoB4B,MAHnB,mBACIC,EADJ,KAC0BC,EAD1B,KAKGC,EAAgB3P,uBAAY,WAC5ByP,IAAyB7B,GAAoB4B,OAC/CL,EAAM,WAAN,eAAUM,IACVC,EAAwB9B,GAAoB4B,SAE7C,CAACC,EAAsBN,IAE1B,MAAO,CACLM,uBACAG,aAAc,kBAAMF,EAAwB9B,GAAoB4B,OAChEK,cAAe,sCAAIC,EAAJ,yBAAIA,EAAJ,uBACbP,EAAS,WAAT,EAAaO,GAAQJ,EAAwBI,GAAQX,EAAM,WAAN,EAAUW,IACjEH,kB,UK1CWI,GAXuC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvD,OACE,oBAAI/T,MAAO,CAAEoB,OAAQ,GAArB,SACE,sBAAKpB,MAAO,CAAEiB,QAAS,OAAQqK,WAAY,UAA3C,UACE,cAAC0I,GAAA,EAAD,CAAShU,MAAO,CAAE8P,YAAa,OAAStP,SAAS,UAChDuT,QCqCME,GAhCY,SACzBpO,GACI,IACIqO,EAA6CrO,EAA7CqO,eAAgBC,EAA6BtO,EAA7BsO,eAAgBvU,EAAaiG,EAAbjG,SAEhC4T,EAAsDU,EAAtDV,qBAAsBG,EAAgCO,EAAhCP,aAAcD,EAAkBQ,EAAlBR,cAE5C,OACE,cAAC,GAAD,CACEpK,KAAMkK,IAAyB7B,GAAoB4B,KACnDvC,KAAM2C,EACN5C,OAAQ,cAAC,GAAD,CAAgBgD,QAASI,IAHnC,SAKE,sBAAKnU,MAAO,CAACwB,QAAQ,OAArB,UACGgS,IAAyB7B,GAAoB4B,MAC5C3T,EAAQ,WAAR,eAAY4T,IACd,uBACA,cAAClC,GAAA,EAAD,CAASrR,QAAQ,YAAYD,MAAO,CAAC6P,WAAW,OAAOC,YAAY,UACnE,qBAAK9P,MAAO,CAAEiB,QAAS,OAAQM,eAAgB,MAAOH,OAAO,MAAOgJ,aAAa,KAAjF,SACE,cAACoB,EAAA,EAAD,CAAQvL,QAAQ,OAAOyL,QAASgI,EAAhC,SACA,cAACvT,EAAA,EAAD,CAAYF,QAAQ,YAApB,+BCSKmU,GA/BiD,SAAC,GAAD,IAC9D/V,EAD8D,EAC9DA,MACA2S,EAF8D,EAE9DA,KAF8D,OAI9D,cAAC,GAAD,CACE1H,UAAgBjF,IAAVhG,EAEN0S,OACE,oBACE/Q,MAAO,CAAEoB,OAAQ,EAAGE,aAAc,YADpC,uCAEyBjD,GAASkB,EAAUlB,GAF5C,OAIF2S,KAAMA,EARR,SAUE,qBAAKhR,MAAO,CAAEqU,SAAU,UAAxB,gBACGhW,QADH,IACGA,OADH,EACGA,EAAOC,eAAe6O,KAAI,SAACY,GAAD,OACzB,qBAAK/N,MAAO,CAACoB,OAAO,OAApB,SACE,cAAC,EAAD,CAEEzB,MAAO,4BAAIoO,EAAcC,YACzBnO,aAAc,CAAEuK,aAAa,SAH/B,SAKG2D,EAAcrP,SAJVqP,EAAcH,cCjBhB0G,GAdoC,SAAC,GAAyB,IAAvB1U,EAAsB,EAAtBA,SAAUI,EAAY,EAAZA,MACxDuL,EAAMc,iBAAuB,MAUnC,OARA9E,qBAAU,WAAO,IAAD,EACd,UAAAgE,EAAI/D,eAAJ,SAAa+M,eAAe,CAC1BC,SAAU,SACVC,MAAO,MACPC,OAAQ,cAET,IAEI,qBAAKnJ,IAAKA,EAAKvL,MAAK,eAAMA,GAA1B,SAAmCJ,K,iDCM7B+U,GAVItE,IAAMC,YAAuC,WAA8B/E,GAAS,IAApCqJ,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,UAC/E,OACE,cAACC,GAAA,EAAD,CAAMxJ,IAAKA,EAAKyJ,SAAUJ,EAAQtL,KAAMuL,EAAxC,SACGC,EAAU3H,KAAI,SAACrJ,EAAM+K,GAAP,OACb,cAACoG,GAAA,EAAD,CAAoBvJ,QAAS5H,EAAKoR,QAAlC,SAA4CpR,EAAKpF,SAAlCmQ,WCmCRsG,GApCmD,SAAC,GAE5D,IADLL,EACI,EADJA,UACI,EAC0C5R,oBAAS,GADnD,mBACGkS,EADH,KACoBC,EADpB,KAGE9J,EAAMc,iBAA0B,MAEtC,OACE,sBACErM,MAAO,CACLS,SAAU,WACVyJ,IAAK,EACLrH,MAAO,EACP5B,QAAS,OACTC,cAAe,MACfoU,UAAW,cAPf,UAUE,cAACC,GAAA,EAAD,CAAmBC,YAAa,kBAAMH,GAAmB,IAAzD,SACE,cAACI,GAAA,EAAD,CACEzV,MAAO,CAAEwB,QAAS,GAClBkK,QAAS,kBAAM2J,GAAmB,IAClC9J,IAAKA,EAHP,SAKE,cAACmK,GAAA,EAAD,QAGJ,cAAC,GAAD,CACEb,KAAMO,EACNR,OAAQrJ,EAAI/D,QACZsN,UAAWA,Q,UCnCbzU,GAAYC,YAAW,CAC3BqV,aAAc,CACZjF,QAAS,IACTzP,QAAS,OACTqK,WAAY,SACZ/J,eAAgB,YAiBLqU,GAbmC,SAAC,GAAc,IAAZtM,EAAW,EAAXA,KAC7C1I,EAAUP,KAChB,OACE,cAAC4Q,GAAA,EAAD,CAAO3H,KAAMA,EAAMtI,UAAWJ,EAAQ+U,aAAtC,SACE,cAACzE,GAAA,EAAD,CACElR,MAAO,CAAE0Q,QAAS,OAAQzP,QAAS,OAAQM,eAAgB,UAD7D,SAGE,cAACsU,GAAA,EAAD,S,wCCYOC,GAxBM,SAAoBC,GAAe,IAAD,EAChB7S,mBAEnC,CAAC,EAAG,OAH+C,yCAC7C8S,EAD6C,KACvCC,EADuC,KAC3BC,EAD2B,KAa/CC,EAAQpS,uBAAY,WACxBmS,EAAQ,CAAC,EAAG,SACX,CAACA,IAEEE,EAAWxR,mBAAQ,kBACvBoR,IAASD,EAAKnY,OAAS,IACvB,CAACoY,EAAMD,EAAKnY,SAEd,MAAO,CAAEoY,KAAMA,EAAMC,UAAWA,EAAWI,KAhB9B,SAACJ,GACZ,MAAqB,SAAdA,GAAwBD,EAAOD,EAAKnY,OAAS,EAChDsY,GAAQ,kBAAS,CAAT,oBAAc,EAAG,WACX,SAAdD,GAAwBD,EAAO,EAC/BE,GAAQ,kBAAS,CAAT,oBAAc,EAAG,WACzB,MAW2CC,QAAOC,aCS3C/V,GAvCGC,aAAW,SAACmB,GAAD,MAAY,CACvC6U,iBAAkB,CAChBxD,cAAe,OACfnR,OAAQ,OACRV,QAAS,OACTC,cAAe,UAEjBqV,sBAAuB,CACrBC,SAAU,GAEZC,QAAS,CACPrM,aAAc,QAEhBsM,iBAAkB,CAChBjW,SAAU,WACVyJ,IAAK,MACL7E,UAAW,mBACXsR,UAAU,UAEZC,iBAAkB,CAChB3V,QAAS,OACTM,eAAgB,gBAChB6I,aAAa,QAEfyM,SAAU,CACRC,KAAM,WAERC,SAAU,CACRD,KAAM,WAERE,cAAe,CACbF,KAAM,WAERG,UAAW,CACTzW,SAAU,YCuEC0W,GApFyC,SAAC,GAOlD,IANLrC,EAMI,EANJA,KACAsC,EAKI,EALJA,QACAxX,EAII,EAJJA,MACAyX,EAGI,EAHJA,MACAC,EAEI,EAFJA,YACAC,EACI,EADJA,mBACI,EAC0BxB,GAAasB,GAAnCpB,EADJ,EACIA,KAAMK,EADV,EACUA,KAAMF,EADhB,EACgBA,MAEdoB,EAAiBxT,uBAAY,WACjCoS,IACAgB,MACC,CAACA,EAAShB,IAEPqB,EAAkBzT,uBAAY,WAClCiS,IAASoB,EAAMxZ,OAAS,EAAI2Z,IAAmBlB,EAAK,UACnD,CAACL,EAAMK,EAAMkB,EAAgBH,EAAMxZ,SAEhC6Z,EAAkB1T,uBAAY,WAClCsS,EAAK,UACJ,CAACA,IAEEzV,EAAUP,KAEhB,OACE,cAAC,GAAD,CAAc0Q,OAAQpR,EAAO2J,KAAMuL,EAAM7D,KAAMuG,EAA/C,SACE,sBAAKvW,UAAWJ,EAAQ0V,iBAAxB,UACE,cAACoB,GAAA,EAAD,CAASC,WAAY3B,EAAM4B,kBAAgB,EAA3C,SACGR,EAAMjK,KAAI,SAAClE,EAAG4F,GAAJ,OACT,cAACgJ,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CACEC,cAAe,CACbnX,QAAS,CACPoX,OAAQpX,EAAQiW,SAChBoB,KAAMrX,EAAQmW,SACdmB,UAAWtX,EAAQoW,gBALzB,SASGK,EAAYxI,MAVNA,QAef,cAACsC,GAAA,EAAD,CAAWnQ,UAAWJ,EAAQ2V,sBAA9B,SACE,qBAAKvV,UAAWJ,EAAQ8V,iBAAxB,SACE,cAACvW,EAAA,EAAD,CAAYF,QAAQ,KAApB,SAA0BmX,EAAMpB,SAGpC,eAAC7E,GAAA,EAAD,CAAWnQ,UAAWJ,EAAQgW,iBAA9B,UACY,IAATZ,EACC,wBAEA,eAACxK,EAAA,EAAD,CACEE,QAAS+L,EACTxX,QAAQ,WACRkY,KAAK,QACL3V,MAAM,YAJR,UAME,cAAC4Q,GAAA,EAAD,IANF,eASF,cAAC5H,EAAA,EAAD,CACEE,QAAS8L,EACTvX,QAAQ,YACRmY,kBAAgB,EAChBD,KAAK,QACL3V,MAAM,YALR,SAOGwT,IAASoB,EAAMxZ,OAAS,EACvB0Z,EAEA,6CACO,cAACe,GAAA,EAAD,kBC1Cf1b,GAAU,IAAIC,IAAiB,CACnCC,GAAI,CACFyb,gBACE,sFACFC,wBAAyB,sBACzBC,gBACE,gJACFC,wBAAyB,eACzBC,kBACE,8LACFC,0BAA2B,wBAC3BC,iBACE,gKACFC,yBAA0B,oBAC1BC,kBAAmB,wBACnBC,cAAe,iBACfC,0BAA2B,iCAC3BC,yBACE,6GACFC,qBAAsB,0CACtBC,oBACE,iJACFC,OAAQ,SACRC,KAAM,OACNC,mBAAoB,sBACpBC,SAAU,YACVC,SAAU,eAyBRC,GAAU,WACd,IAAMhY,EAAQiY,cACRC,EAAUC,YAAcnY,EAAMK,YAAYC,GAAG,OAEnD,OADA8X,QAAQC,IAAIH,GACLA,EAAU,IAAM,KAkVVI,GA/UiC,SAAC,GAI1C,IAHLC,EAGI,EAHJA,OACAjI,EAEI,EAFJA,SACAkI,EACI,EADJA,WACI,EACwB3K,GAAcE,iBADtC,mBACG7R,EADH,KACW8P,EADX,KAIJlG,qBAAU,WACRkG,GAAU,SAACyM,GAAD,OAAeA,OACxB,CAACzM,IANA,MAcAtB,KALagO,EATb,EASF5T,cACAsE,EAVE,EAUFA,aACAF,EAXE,EAWFA,SACYyP,EAZV,EAYF7P,WACA9D,EAbE,EAaFA,UAGMW,EAAyC+S,EAAzC/S,SAAUE,EAA+B6S,EAA/B7S,2BAET+S,EAlBL,YAkBgBxP,EAlBhB,MAoBEqB,EAAQtH,mBAAQ,kBApCP,SAACjH,GAAD,OACfA,EAAOwP,KAAI,SAAC9O,GAAD,MAAY,CACrBrB,MAA8B,IAAvBqB,EAAMN,mBAkCauc,CAAS3c,KAAS,CAACA,IAEvC2G,EAAamL,qBAAWhL,GAAxBH,SAEFiW,EpB6QuB,SAC7B9M,GAYA,OAViB1J,uBACf,SAACyW,GACC/M,GAAU,SAAC9P,GAET,OADA6c,EAAO7c,GACAA,OAGX,CAAC8P,IoBvRkBgN,CAAgBhN,GAC/BiN,EpBtHsB,SAC5BjN,GAgFA,OAzEiB1J,uBACf,SAAC4W,GAEC,OAAOlN,GAAU,SAAC9P,GAmBhB,OAAOiP,GACLjP,EAAO4P,QAAO,SAACqN,GAAD,OAAOA,EAAEhN,KAAO+M,EAAS/M,OACvC,SAACuB,EAAUC,GACT,OAAID,EAAEpR,iBAAmBqR,EAAEjR,iBAClB,2BACFiR,GADL,IAEEjR,iBAAkBgR,EAAEpR,eACpBqB,eAAgB+P,EAAEtR,aAClB+P,GAAIS,eACJF,UAAW,IAAIC,KACf9P,eAAgB,KAGb8Q,KAGRlC,QACG2N,EAcQld,EAAO4P,QAAO,SAACqN,GAAD,OAAOA,EAAEhN,KAAO+M,EAAS/M,MAAI,GAbnDiN,EAC+B,IAA3BA,EAAM1c,iBACJ,CAAC0c,GACD,CAAC,2BAEMA,GAFP,IAGI1c,iBAAkB,EAClBiB,eAAgB,cAChBwO,GAAIS,eACJF,UAAW,IAAIC,KACf9P,eAAgB,MAGtB,KAEP4Q,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEpR,eAAiBqR,EAAErR,kBAhBlC,IAAC8c,OA+BV,CAACpN,IoBwCiBqN,CAAerN,GAC7B8L,EpBhCmB,SACzB9L,GAiEA,OAvDmB1J,uBACjB,SAACgX,EAAiBxM,EAAuBjK,GACvCmJ,GAAU,SAAC9P,GACT,GjBPoB,SAC1BA,EACAM,EACAsQ,GAEA,OACW,IAATtQ,GACAA,EAAOsQ,GACP5Q,EAAOY,QACL,SAACyc,EAAqB3c,GAAtB,OACE2c,GACA3c,EAAMN,iBAAmBE,GACzBI,EAAMF,mBAAqBF,KAC7B,GiBNMgd,CAAatd,EAAQod,EAASxM,GAChC,OAAO5Q,EAET,IAAMud,EAAiBld,EAAkBL,EAAQod,GACjD,YAAuB1W,IAAnB6W,EACgBvd,EACf4P,QAAO,SAACqN,GAAD,OAAOA,EAAEhN,KAAOsN,EAAetN,MACtCV,OAAO,CACN,CACE9N,eAAgB8b,EAAe9b,eAC/BjB,iBAAkB+c,EAAe/c,iBACjCN,aAAcR,EAAY0d,EAAUxM,GACpCxQ,eAAgBgd,EAChB/M,UAAW1J,EACX6J,UAAW,IAAIC,KACfR,GAAIS,eACJ/P,eAAgB,IAElB,CACEc,eAAgB/B,EAAY0d,EAAUxM,GACtCpQ,iBAAkB4c,EAClBld,aAAcqd,EAAerd,aAC7BE,eAAgBmd,EAAend,eAC/BiQ,UAAW1J,EACX6J,UAAW,IAAIC,KACfR,GAAIS,eACJ/P,eAAgB,MAGnB4Q,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEpR,eAAiBqR,EAAErR,kBAGrBJ,EAAOuP,OAAO,CAC9B,CACE9N,eAAgB1B,EAAoBC,GACpCE,aAAcR,EAAY0d,EAAUxM,GACpCpQ,iBAAkBL,EAAsBH,GACxCI,eAAgBgd,EAChB/M,UAAW1J,EACX6J,UAAW,IAAIC,KACfR,GAAIS,eACJ/P,eAAgB,WAQ1B,CAACmP,IoB/Bc0N,CAAY1N,GAEvB7M,EAAUP,IA5BZ,EA8BoC6C,wBACtCmB,GA/BE,mBA8BG+W,EA9BH,KA8BiBC,EA9BjB,KAkCJ9T,qBAAU,gBACalD,IAAjB+W,GAA8BhU,EAAWgU,EAAard,iBACxDsd,OAAgBhX,GAChBgW,GAAQ,MAET,CAACjT,EAAUgU,EAAczd,EAAQ0c,IAEpC,IAAMiB,EAA6BvX,uBACjC,SAAC1F,EAAc+c,EAAiCG,IAC9B,OAAZH,QAAY,IAAZA,OAAA,EAAAA,EAAcxN,MAAOvP,EAAMuP,IAAM2N,EACnClB,GAAQ,IAERA,GAAQ,GACRgB,EAAgBhd,GAChBiJ,EAA2BjJ,EAAMF,qBAGrC,CAACmJ,EAA4B+S,IAnD3B,EAsDsCnX,wBACxCmB,GAvDE,mBAsDGmX,EAtDH,KAsDkBC,GAtDlB,QAyEFpI,IARqB,SACrBpK,EACA8R,EACAxM,EACAjK,GAJqB,OAKlBiV,EAASwB,EAASxM,EAAejK,MAGG,SAAC3G,EAAQM,GAC9C,IAAMid,EAAiBld,EAAkBL,EAAQM,GACjD,YAA0BoG,IAAnB6W,GAAgC9c,EAAiB8c,MAHrCQ,GAxEnB,GAwEI9H,cAxEJ,sCAuFAP,GAAuBqH,GAAa,SAACrc,GAAD,OAAWD,EAAiBC,OAFnDsd,GArFb,GAqFF/H,cACGgI,GAtFD,qCAyFsD1Y,wBAExDmB,GA3FE,qBAyFGwX,GAzFH,MAyF0BC,GAzF1B,MAqGEC,GAAkBnX,mBACtB,iBAAO,CAELnE,SAAU,WACVkJ,KAAM,MACNO,IAAK,MACL7E,UAAW,2BAEb,IAGI2W,GAAwB3P,iBAAO,CACnCuD,gBAAiB,QACjBjO,OAAQ,OACRH,QAAS,MACTP,QAAS,OACTC,cAAe,MACfK,eAAgB,SAChB+J,WAAY,SACZ9I,MAAO,UAGHyZ,GAAiB5P,iBAAO,CAC5BjL,OAAQ,MACRiE,UAAW,kBACX1D,OAAQ,sBAGFua,GAAgDjC,EAAhDiC,oBAAqBC,GAA2BlC,EAA3BkC,uBAEvBC,GAAoBrY,uBACxB,kBAAMsX,OAAgBhX,KACtB,CAACgX,IAGH,OACE,eAACnQ,EAAA,EAAD,CACEpH,MAAI,EACJqH,WAAS,EACT8K,UAAU,MACVoG,QAAQ,SACR/Q,WAAW,SACXtL,MAAO,CAAE2B,OAAQ,OANnB,UAQE,cAACuJ,EAAA,EAAD,CACEpH,MAAI,EACJqH,WAAS,EACTE,aAAa,SACbC,WAAW,SACXtK,UAAWJ,EAAQc,eALrB,SAOE,cAAC,GAAD,CACE6I,WAAY6P,EACZ7T,cAAe4T,EACf1T,UAAWA,EACX6D,IAAG,UAAKmH,GAAL,+BAA4CM,GAC/CvH,YAAa0B,EACbtF,eAAgBwV,OAGpB,cAAClR,EAAA,EAAD,CAAMpH,MAAI,EAACqH,WAAS,EAACC,GAAI,GAAIpL,MAAO,CAAE2B,OAAQ,MAAOP,OAAQ,OAA7D,SACE,cAACkb,EAAA,EAAD,CACEtb,UAAWJ,EAAQuB,WACnBoa,WAAW,OACXC,KAAM/C,KAHR,SAKG9b,EACEwP,KAAI,SAACyN,GAAD,OACH,cAAC6B,EAAA,EAAD,CAAyBzc,MAAO,CAAEoB,OAAQ,mBAA1C,SACE,cAAC,GAAD,UACE,cAAC,EAAD,CACE/C,MAAOuc,EACPja,kBACE,cAAC,GAAD,CACEmU,UAAW,CACT,CACEpW,QAAS/B,GAAQyc,OACjBlE,QAAS,kBArFF,SAAC0F,GAChCL,GAAa,SAAC5c,GACZA,EAAO+e,SACL,SAACre,GAAD,OAAWA,EAAMuP,KAAOgN,EAAEhN,IAAM+N,GAAqBtd,SAkFlBse,CAAyB/B,KAE1C,CACElc,QAAS/B,GAAQ0c,KACjBnE,QAAS,kBAAMuG,GAAiBb,MAElC1N,OAC4B,IAA5B0N,EAAEtc,eAAeV,OACb,CACE,CACEc,QAAS/B,GAAQ2c,mBACjBpE,QAAS,kBAAM4G,GAAyBlB,MAG5C,MArBZ,SA0BE,sBAAK5Z,UAAWJ,EAAQ+B,cAAxB,UACE,cAAC,GAAD,CACE2H,IAAG,UAAKmH,GAAL,+BAA4CM,GAC/C9T,KACE2c,EAAEzc,kBACDyc,EAAE7c,eAAiB6c,EAAEzc,kBAAoB,IAG9C,cAAC,GAAD,CACEZ,OAAK,EACLiF,MAAM,UACNxC,MAAO+b,GACPrQ,QAAS,kBACP4P,EACEV,EACAQ,EACAvQ,EAAa,KARnB,UAYe,OAAZuQ,QAAY,IAAZA,OAAA,EAAAA,EAAcxN,MAAOgN,EAAEhN,IAAM/C,EAAa,GACzC,cAAC+R,EAAA,EAAD,CAAM5c,MAAO,CAAEQ,SAAU,MAEzB,cAACqL,EAAA,EAAD,CAAW7L,MAAO,CAAEQ,SAAU,gBAnDvBoa,EAAEhN,OA2DtBV,OACCpP,EAAsBH,GAAU,IAC5B,CACE,cAAC8e,EAAA,EAAD,CAEE/Q,QA/KW,WACK,IAAlC5N,EAAsBH,IACpB2G,GACAiV,EAAS,EAAG5O,EAAUrG,GACxB0V,KAyKgB,SAIE,cAAC,GAAD,CAAiBha,MAAO,CAAE2B,OAAQ,OAAQW,UAAU,SAApD,SACE,cAAC,EAAD,CAEEzC,aAAcmc,GAAsBxU,QACpC1H,UAAWmc,GAAezU,QAH5B,SAKE,cAACqV,EAAA,EAAD,CACE7c,MAAO,CAAEQ,SAAS,aAVnB7D,GAAQ6c,WAgBjB,QAIZ,8BACE,qBAAKxY,UAAWJ,EAAQgC,wBAAxB,SACE,cAACuQ,EAAA,EAAD,CAAKzH,QAhLU,WACjBpH,GACFoX,GAAgB/d,EAAQyJ,EAAUuD,EAAUrG,IA8KV9B,MAAM,UAAUxC,MAAO,CAACoB,OAAO,OAAO0B,OAAO,QAA3E,SACE,cAACga,EAAA,EAAD,UAYN,cAAC,GAAD,CAAcxT,KAAmB,IAAbqB,IACpB,cAAC,GAAD,CACEkK,KAAMqH,GACN/E,QAASgF,GACTxc,MACE,oBAAIqB,UAAWJ,EAAQ8B,gBAAvB,SACG/F,GAAQmc,oBAGb1B,MAAO,CACLza,GAAQ2b,gBACR3b,GAAQ6b,gBACR7b,GAAQ+b,kBACR/b,GAAQic,kBAEVvB,YAAa,CACX1a,GAAQ4b,wBACR5b,GAAQ8b,wBACR9b,GAAQgc,0BACRhc,GAAQkc,0BAEVvB,mBAAoB,8BAAM3a,GAAQoc,kBAEpC,cAAC,GAAD,CACEhH,SAAUA,EACV1T,MAAOmd,EACPxK,KAAM,kBAAMyK,QAAiBpX,IAC7BkK,cAAe5D,IAEjB,cAAC,GAAD,CACEuJ,eAAgB0H,GAChBzH,eAAgB,8BAAMxX,GAAQqc,4BAFhC,SAIG,kBACC,qBAAKhZ,MAAO,CAAEsB,aAAc,YAA5B,SACG3E,GAAQ8C,aACP9C,GAAQsc,0BACR,sDAAgB1Z,EAAU,UAAD,+BAAzB,WAkBR,cAAC,GAAD,CACElB,MAAOwd,GACP7K,KAAM,kBAAM8K,QAAyBzX,MAEvC,cAAC,GAAD,CAAY6O,OAAQ8G,Q,kDCvYX+C,GAhCV1M,IAAMC,YACT,WAAgD/E,GAAS,IAAtDvK,EAAqD,EAArDA,UAAWgc,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,QAASjd,EAAwB,EAAxBA,MAAOL,EAAiB,EAAjBA,MACrC,OACE,eAACI,EAAA,EAAD,CAAMwL,IAAKA,EAAKiF,UAAW,EAAGxQ,MAAOA,EAAOgB,UAAWA,EAAUkc,KAAjE,UAEI,cAACC,GAAA,EAAD,CACEnc,UAAWA,EAAUoc,WACrBC,MAAK,UAAK5L,GAAL,0BAFP,SAIE,qBAAKzR,MAAO,CAACwC,MAAM,QAASmU,UAAU,SAAUxV,WAAW,QAAQX,SAAS,OAA5E,SAAqFb,MASvF,eAACO,EAAA,EAAD,CAAac,UAAWA,EAAUtC,QAAlC,UAA4Cse,EAA5C,OAEF,cAAC1L,GAAA,EAAD,IACA,cAACgM,GAAA,EAAD,CACEtd,MAAO,CAAEuB,eAAgB,UACzBP,UAAWA,EAAUic,QAFvB,SAIGA,U,UCzBIM,ICnBVC,GDmBUD,GAff,SAAiC1X,GAC/B,OACE,eAAC4X,GAAA,EAAD,CAAKxc,QAAQ,OAAOqK,WAAW,SAA/B,UACE,cAACmS,GAAA,EAAD,CAAKrY,MAAM,OAAOsY,GAAI,EAAtB,SACE,cAACC,GAAA,EAAD,aAAgB1d,QAAQ,eAAkB4F,MAE5C,cAAC4X,GAAA,EAAD,CAAKG,SAAU,GAAf,SACE,cAACzd,EAAA,EAAD,CAAYF,QAAQ,QAAQuC,MAAM,gBAAlC,mBAAsDtF,KAAKK,MACzDsI,EAAM7I,OADR,aEVF6gB,GAAc,UA+CLxd,GA7CGC,YAAW,CAC3Bwd,KAAM,CACJC,WAAY,6CAEdC,MAAO,CACLC,OAAO,aAAD,OAAeJ,IACrBK,UAAW,IACXC,qBAAsB,IACtBC,oBAAqB,IACrB5c,QAAS,QAEX6c,WAAY,CACV7c,QAAS,MACToO,gBAAiB,UACjBqO,OAAO,aAAD,OAAeJ,IACrBS,wBAAyB,IACzBC,uBAAwB,KAE1BrB,KAAM,CACJe,OAAO,aAAD,OAAeJ,IACrBhU,aAAc,MACdzI,OAAQ,MACRgJ,aAAc,OACdxI,UAAW,SAEbmP,OAAQ,CACNvP,QAAS,MACT8c,wBAAyB,IACzBC,uBAAwB,IACxBR,WAAY,6CAEdX,WAAY,CACVzb,OAAQ,KAEVjD,QAAS,CACPuC,QAAS,OACTC,cAAe,SACfsV,SAAU,GAEZ7G,OAAQ,CACNrN,UAAW,OACX9B,SAAU,YClCR7D,GAAU,IAAIC,IAAiB,CACnCC,GAAI,CACF2hB,QAAS,iBAyDEC,GA7C2B,SAAC,GAMpC,IALL9e,EAKI,EALJA,MACA+e,EAII,EAJJA,YACAtX,EAGI,EAHJA,SACAuX,EAEI,EAFJA,SACAC,EACI,EADJA,QAEMhe,EAAUP,KAChB,OACE,cAAC,GAAD,CACEL,MAAO,CACLiB,QAAS,OACTM,eAAgB,gBAChBL,cAAe,SACfsV,SAAU,GAEZxV,UAAWJ,EACXjB,MAAOA,EACPqd,QACE,eAACS,GAAA,EAAD,CAAKzd,MAAO,CAAEsC,UAAW,OAAzB,UAOE,cAAC,GAAD,CAAyBtF,MAAOoK,EAAU5E,MAAM,cAChD,cAACrC,EAAA,EAAD,CAAYH,MAAO,CAAEwB,QAAS,MAAOhB,SAAU,UAA/C,SACGke,OAIPzB,QACE,cAACQ,GAAA,EAAD,CAAKzd,MAAO,CAAEsC,UAAW,OAAzB,SACE,cAACkJ,EAAA,EAAD,CAAQqT,UAAWD,EAASlT,QAASiT,EAArC,SACE,cAACxe,EAAA,EAAD,CAAYH,MAAO,CAAEwB,QAAS,MAAOhB,SAAU,UAA/C,SACG7D,GAAQ8C,aAAa9C,GAAQ6hB,QAAS7e,YCjDtCU,GAVGC,YAAW,CAC3Bwe,eAAgB,CACdnI,UAAW,UAEboI,iBAAkB,CAChB9d,QAAS,OACTC,cAAe,Y,UCmCJ8d,GA5ByC3O,IAAMC,YAAiD,WAK5G/E,GAAS,IAJV0T,EAIS,EAJTA,YACAC,EAGS,EAHTA,WACAte,EAES,EAFTA,QACAue,EACS,EADTA,SACS,EACiBjc,mBAAwB,MADzC,mBACF+J,EADE,KACKmS,EADL,KAET,OACE,sBAAK7T,IAAKA,EAAV,UACE,cAAC8T,GAAA,EAAD,CACArf,MAAO,CAACoB,OAAO,OACbJ,UAAWJ,EAAQqM,MACnBjE,SAAU,SAACsW,GAAD,OAAOF,EAASE,EAAEC,OAAOviB,QACnCiiB,YAAaA,IAEf,cAAC3N,GAAA,EAAD,CAASrR,QAAQ,cACjB,8BACA,cAACuL,EAAA,EAAD,CACEE,QAAS,kBAAMuB,GAASkS,EAASlS,IACjCjN,MAAO,GAFT,SAIGkf,YCdM7e,GApBGC,YAAW,CAC3BmQ,MAAO,CACLC,QAAS,IACTzP,QAAS,OACTqK,WAAY,SACZ/J,eAAgB,UAElBoP,gBAAiB,CACfnP,QAAS,QAEXyL,MAAO,CACLuS,KAAM,EACNpa,MAAO,QACPzD,OAAQ,SACRsc,OAAQ,oBACRwB,YAAa,MACb5V,aAAc,qBCiBH6V,GAvB6B,SAAC,GAAuB,IAArB7K,EAAoB,EAApBA,KAAMtQ,EAAc,EAAdA,QAC7C3D,EAAUP,KAEhB,OACE,cAAC,GAAD,CAAciJ,KAAMuL,EAApB,SACE,gCACE,cAAC1U,EAAA,EAAD,CAAYF,QAAQ,KAAKD,MAAO,CAACwB,QAAQ,MAAMie,YAAY,OAA3D,oCAGA,cAACnO,GAAA,EAAD,CAASrR,QAAQ,YAAYD,MAAO,KACpC,qBAAKA,MAAO,GAAZ,SACE,cAAC,GAAD,CACEif,YAAY,UACZC,WAAW,qBACXte,QAASA,EACTue,SAAU5a,YCZhB5H,GAAU,IAAIC,IAAiB,CACnCC,GAAI,CACF8iB,KAAM,OACNC,SAAU,YACVC,iBAAkB,8BAClBC,MAAO,kBACP1I,MACE,+EAwBA2I,GAAyC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAC7C,cAAC7f,EAAA,EAAD,CAAYF,QAAQ,KAAKD,MAAO,CAAEwC,MAAO,OAAQnB,WAAY,UAAWiB,UAAU,SAAlF,SACG3F,GAAQ8C,aACP9C,GAAQkjB,iBACR,cAACpC,GAAA,EAAD,CAAKrd,UAAU,OAAOJ,MAAO,CAAEwC,MAAO,SAAtC,SACGwd,QAkFMC,GA5E6B,SAAC,GAItC,IAHLD,EAGI,EAHJA,UACA5I,EAEI,EAFJA,MACA8I,EACI,EADJA,aACI,EAIqCzQ,qBAAWhL,GAA5CH,EAJJ,EAIIA,SAAUC,EAJd,EAIcA,QAASC,EAJvB,EAIuBA,UAErB5D,EAAUP,KAEhB,OACE,eAAC6K,EAAA,EAAD,CAAMpH,MAAI,EAACsH,GAAI,EAAG+U,GAAI,GAAtB,UACE,cAAC,GAAD,CAAW5b,QAASA,EAASsQ,MAAOvQ,IACpC,eAAC4G,EAAA,EAAD,CAAMpH,MAAI,EAACsH,GAAI,GAAIpK,UAAWJ,EAAQke,eAAtC,UAKE,cAAC,GAAD,CAAOkB,UAAWA,IAYjB1b,GACD,cAAC8b,GAAA,EAAD,CACAC,SAAU,WACR7b,IACA0b,KAENI,OAAQ,cAACC,GAAA,EAAD,UAASjc,EAAS7G,UAAU,EAAE,KACtCwC,QAAQ,WACRugB,MAAOlc,EACPtE,MAAO,CACLsC,UAAU,aAIV,qBACEtC,MAAO,CAAEoK,aAAc,OAAQ9H,UAAW,OAAQqU,UAAW,SAASnU,MAAM,QAD9E,SAGG7F,GAAQya,QAEX,cAAClM,EAAA,EAAD,CACEC,WAAS,EACTsV,QAAS,EACTxK,UAAU,MACVoG,QAAQ,SACRhR,aAAa,aACbC,WAAW,UANb,SAQG8L,EAAMjK,KAAI,SAACpE,GAAD,OACT,cAACmC,EAAA,EAAD,CACEpH,MAAI,EAEJsH,GAAI,GACJ+U,GAAI,EACJO,GAAI,EACJ1gB,MAAO,CAAEiB,QAAS,QANpB,SAQE,cAAC,GAAD,eAAc8H,KANTA,EAAKpJ,gB,UChDPghB,GA/CuB,SAAC,GAMhC,IALL/gB,EAKI,EALJA,SAGAghB,EAEI,EAFJA,iBAWA,OACE,eAAC1V,EAAA,EAAD,CAAMC,WAAS,EAAC8K,UAAU,SAASoG,QAAQ,SAAS/Q,WAAW,SAA/D,UACGsV,EAAiBhjB,OAAS,GAAK,cAACuV,EAAA,EAAD,CAAKzH,QAASkV,EAAiB,GAAG1L,QAASlV,MAAO,CAACoB,OAAO,OAAOX,SAAU,QAAQmP,gBAAgB,OAAQ/M,MAAO,MAAOC,OAAQ,OAAjI,SAC9B,cAAC+d,GAAA,EAAD,MAGF,cAAC3V,EAAA,EAAD,CAAMC,WAAS,EAACrH,MAAI,EAACsH,GAAI,GAAIiR,QAAQ,SAAS/Q,WAAW,SAAzD,SACG1L,S,SR7CJ4d,O,yBAAAA,I,uBAAAA,I,+BAAAA,I,0BAAAA,Q,KAOUA,USAT7gB,GAAU,IAAIC,IAAiB,CACnCC,GAAI,CACFikB,aACE,wFACFC,cAAe,WACfC,kBACE,gEACFC,mBAAoB,gBACpBC,WACE,mFACFC,YAAa,YAqCFC,GA/BE,SACfC,EACAle,GAFe,OAIfyB,mBACE,iBAAM,CACJ,CACEjF,MAAOhD,GAAQokB,cACfrC,YAAa/hB,GAAQmkB,aACrB1Z,SAAUjE,EAAM,GAAGiE,SACnBuX,SAAU,kBAAM0C,EAAQ7D,GAAK8D,WAC7B1C,QAASzb,EAAM,GAAGyb,SAEpB,CACEjf,MAAOhD,GAAQskB,mBACfvC,YAAa/hB,GAAQqkB,kBACrB5Z,SAAUjE,EAAM,GAAGiE,SACnBuX,SAAU,kBAAM0C,EAAQ7D,GAAK+D,eAC7B3C,QAASzb,EAAM,GAAGyb,SAEpB,CACEjf,MAAOhD,GAAQwkB,YACfzC,YAAa/hB,GAAQukB,WACrB9Z,SAAUjE,EAAM,GAAGiE,SACnBuX,SAAU,kBAAM0C,EAAQ7D,GAAKgE,YAC7B5C,QAASzb,EAAM,GAAGyb,YAGtB,CAACyC,EAASle,K,8BClDRse,GAAsB,MA0DbphB,GAxDGC,aAAW,SAAAmB,GAAK,MAAK,CACrCO,qBAAsB,CACpBvB,SAAU,WACV4T,SAAU,UAEZ5R,oBAAqB,CACnBH,UAAW,MACXd,QAAS,OAEXkgB,iBAAkB,CAChB/f,OAAQ,QACRP,OAAQ,kBACRgE,MAAO,QAET1D,eAAe,aACbC,OAAQ,MACRC,UAAW,QACXC,SAAU,OACTJ,EAAMK,YAAYC,GAAG,MAAQ,CAC5BF,SAAU,QAGd8f,WAAY,CACVvc,MAAO,QAETwc,kBAAmB,CACjBjgB,OAAQ8f,GACRjf,MAAO,WAETqf,mBAAoB,CAClBlgB,OAAQ8f,GACRjf,MAAO,WAETsf,kBAAmB,CACjBngB,OAAQ8f,GACRrc,MAAO,MACPwK,gBAAiB,UACjBmS,QAAS,IAEXC,YAAa,CACXpS,gBAAiB,WAEnBqS,qBAAsB,CACpB7f,SAAU,OAEVF,WAAW,QAEbggB,WAAW,CACT9gB,OAAQ,OAEV+gB,YAAY,CACVjgB,WAAW,OACXI,UAAU,a,8BCzCCjC,GAbGC,YAAW,CAC3B8hB,mBAAoB,CAClBnhB,QAAS,OACTM,eAAgB,SAChBL,cAAe,MACfoK,WAAY,aACZlG,MAAO,QAETid,0BAA2B,CACzB7L,SAAU,KCgEC8L,GA1D6B,SAAC,GAUtC,IATLC,EASI,EATJA,WACAC,EAQI,EARJA,WACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,cACA9iB,EAKI,EALJA,SACAI,EAII,EAJJA,MACA2iB,EAGI,EAHJA,sBACAC,EAEI,EAFJA,WACAC,EACI,EADJA,YAEMjiB,EAAUP,KAEhB,OACE,sBAAKW,UAAWJ,EAAQwhB,mBAAoBpiB,MAAOA,EAAnD,iBACG4iB,QADH,IACGA,IAAc,cAAC,GAAD,CACbrlB,OAAK,EACLulB,aAAW,WACX9iB,MAAO,CAAEwC,MAAO,UAAW8S,UAAW,aAAchT,UAAW,QAC/Duc,SAA0B,IAAhB4D,EACV/W,QAAS,kBAAM6W,EAAW,SALb,SAOb,cAACQ,GAAA,EAAD,MAEF,cAACtF,GAAA,EAAD,CAAKzd,MAAK,eAAM2iB,GAAwB3hB,UAAWJ,EAAQyhB,0BAA3D,SAAuFziB,IAVzF,OAWGijB,QAXH,IAWGA,IAAgBL,GAAcC,IAAgBC,EAAgB,EAC7D,cAAC,GAAD,CACEnlB,OAAK,EACLulB,aAAW,WACX9iB,MAAO,CACLwC,MAAO,UACPoN,gBAAiB,UACjB0F,UAAW,aACXhT,UAAW,QAEboJ,QAAS8W,EATX,SAWE,cAACQ,GAAA,EAAD,MAGF,cAAC,GAAD,CACEzlB,OAAK,EACLulB,aAAW,OACX9iB,MAAO,CACLwC,MAAO,UACP8S,UAAW,aACXhT,UAAW,QAEbuc,SAAU4D,IAAgBC,EAAgB,EAC1ChX,QAAS,kBAAM6W,EAAW,SAT5B,SAWE,cAACU,GAAA,EAAD,UC5DJtmB,GAAU,IAAIC,IAAiB,CACnCC,GAAI,CACFkR,cAAe,mBAyCJmV,GA9BqD,SAAC,GAK9D,IAJLC,EAII,EAJJA,SACAC,EAGI,EAHJA,mBAEApa,GACI,EAFJrI,kBAEI,EADJqI,UAGA,OAKI,aAJA,CAICqa,GAAA,EAAD,CACEC,WAAS,EACTC,WAAS,EACTC,KAAM,EACNL,SAAUA,EACVnjB,MAAO,CAAEoF,MAAO,QAChBnF,QAAQ,WACRugB,MAAO7jB,GAAQoR,cACf/Q,MAAOomB,EACP5gB,MAAM,YACNwG,SAAU,SAACsW,GACTtW,EAASsW,EAAEC,OAAOviB,WCvCfymB,GAAwB,SACnCplB,EACAiG,GAFmC,OAInC+I,GAAahP,EAAMC,gBAAgB,SAACG,GAAD,OAAOA,EAAEuP,YAAc1J,KACtDjG,EAAMC,eAAeiP,QAAO,SAAC9O,GAAD,OAAOA,EAAEuP,YAAc1J,KAAU,QAC7DD,GAEOqf,GAAgB,SAACrlB,EAAcsM,GAK1C,IAJA,IAAIgZ,EAAuB,GAEvBC,EAAcvlB,EAAMF,iBAAmB,EAAIwM,EAExCiZ,EAAcvlB,EAAMN,gBACzB4lB,EAAWE,KAAKD,GAChBA,GAAe,EAAIjZ,EAMrB,OAJIiZ,IAAgBvlB,EAAMN,gBACxB4lB,EAAWE,KAAKxlB,EAAMN,gBAGjB4lB,GAsBHG,GAAkB,SAACC,EAAmBpZ,GAC1C,IAAM3N,EAAQ+mB,EAAY,EAAIpZ,EAC9B,OAAO3N,EAAQ2N,EAAWA,EAAW3N,GAuKxBgnB,GAvJe,SAC5BrmB,EACAgN,EACAsZ,EAKA3f,EACA4f,EACA7c,EACAmb,GAEA,IAAM2B,EAAapgB,uBACjB,SACEqgB,EACAC,EACAC,EACAC,GAEA,IAhCJC,EACAC,EA+BUC,GAhCVF,EAiCMH,EAAcC,EAAsB,GAhC1CG,EAiCM9mB,EAAOymB,GA/Bb,OAAOI,QAAP,IAAOA,IAAiBC,EAAatmB,kBAyCjC,OAPA0b,QAAQC,IAAIyK,GAEZld,EAAYqd,GACZR,EAAS,CACP/kB,MAAOulB,EACPrlB,IAAKykB,GAAgBO,EAAcC,GAAsB3Z,KAEpD,CACLgZ,WAAYU,EACZI,aAAcL,EACdO,iBAAkBL,EAClBvW,cAAewW,KAGnB,CAACld,EAAa6c,EAAUvmB,EAAQgN,IA6GlC,OA1GyB5G,uBACvB,SAACZ,EAAyB+P,GAAiD,IAAD,IAgBxE,OAdE5O,GACA,CACE,kBACA,sBACA,+BACAsgB,SAAS1R,EAAO2R,aAElBZ,EACEtmB,EAAOwF,EAAMshB,cACbthB,EAAM4K,cACNzJ,GAII4O,EAAO2R,YACb,IAAK,kBACH,GACE1hB,EAAMwhB,mBAAqBxhB,EAAMwgB,WAAW/lB,OAAS,GACrDuF,EAAMshB,aAAe9mB,EAAOC,OAAS,EACrC,CAAC,IAAD,IACMwmB,EAAkBjhB,EAAMshB,aAAe,EAC7C,OAAON,EACLC,EACAV,GAAc/lB,EAAOymB,GAAkBzZ,GACvC,EAHe,oBAIf8Y,GAAsB9lB,EAAOymB,GAAR,OAA0B9f,QAA1B,IAA0BA,IAAY,WAJ5C,aAIf,EACI5F,eALW,QAKA,IAEZ,GAAIyE,EAAMwhB,iBAAmBxhB,EAAMwgB,WAAW/lB,OAAS,EAC5D,OAAOumB,EACLhhB,EAAMshB,aACNthB,EAAMwgB,WACNxgB,EAAMwhB,iBAAmB,EACzBxhB,EAAM4K,eAGRyU,IAEF,MACF,IAAK,sBACH,GAA+B,IAA3Brf,EAAMwhB,kBAA0BxhB,EAAMshB,aAAe,EAAG,CAAC,IAAD,IACpDL,EAAkBjhB,EAAMshB,aAAe,EACvCJ,EAAgBX,GACpB/lB,EAAOymB,GACPzZ,GAEF,OAAOwZ,EACLC,EACAC,EACAA,EAAczmB,OAAS,EAHR,oBAIf6lB,GAAsB9lB,EAAOymB,GAAR,OAA0B9f,QAA1B,IAA0BA,IAAY,WAJ5C,aAIf,EACI5F,eALW,QAKA,IAEZ,GAAIyE,EAAMwhB,iBAAmB,EAClC,OAAOR,EACLhhB,EAAMshB,aACNthB,EAAMwgB,WACNxgB,EAAMwhB,iBAAmB,EACzBxhB,EAAM4K,eAGV,MACF,IAAK,wBACH,YAAmC1J,IAA5B6O,EAAOqR,iBAAP,2BACEphB,GADF,IACS4K,cAAemF,EAAOqR,mBAD/B,eAEEphB,GACX,IAAK,yBAQH,OANAghB,EACEhhB,EAAMshB,aACNthB,EAAMwgB,WAHe,EAKrBxgB,EAAM4K,eAED,2BAAK5K,GAAZ,IAAmBwhB,iBAPI,IAQzB,IAAK,wBACH,IAAMG,EAAgB3hB,EAAMwgB,WAAW/lB,OAAS,EAOhD,OANAumB,EACEhhB,EAAMshB,aACNthB,EAAMwgB,WACNmB,EACA3hB,EAAM4K,eAED,2BAAK5K,GAAZ,IAAmBwhB,iBAAkBG,IACvC,IAAK,sBACH,IAAMT,EAAgBX,GACpB/lB,EAAOwF,EAAMshB,cACb9Z,GAGF,OADAwZ,EAAWhhB,EAAMshB,aAAcJ,EAAe,EAAGlhB,EAAM4K,eAChD,2BACF5K,GADL,IAEEwhB,iBAAkB,EAClBhB,WAAYU,EACZtW,cAAa,oBACX0V,GAAsB9lB,EAAOwF,EAAMshB,cAAd,OAA6BngB,QAA7B,IAA6BA,IAAY,WADnD,aACX,EACI5F,eAFO,QAEI,KAGvB,OAAOyE,IAET,CAACxF,EAAQgN,EAAUsZ,EAAqB3f,EAAUke,EAAY2B,K,SC9KnDY,GAnCY,SACzBpd,EACAqd,GACG,MAO4B9hB,oBAAS,GAA/B+hB,EAPN,sBAWC/hB,oBAAS,GAXV,mBASDgiB,EATC,KAUDC,EAVC,KAaGC,EAAgBC,cAAoB,WACxCL,EAAWE,GACXD,GAAmB,KAClB,KAaH,OAXelhB,uBAAY,WACzBkhB,GAAmB,SAACK,GAIlB,OAHKA,GACHH,EAAiCxd,IAE5B,KAETyd,IACAJ,GAAW,KACV,CAACrd,EAASqd,EAAYI,KCCrBzoB,GAAU,IAAIC,IAAiB,CACnCC,GAAI,CACFyb,gBAAiB,0CACjBC,wBAAyB,UACzBC,gBACE,kFACFC,wBAAyB,cACzBC,kBACE,4DACFC,0BAA2B,kBAC3BC,iBACE,6DACFC,yBAA0B,aAC1B0M,KAAM,OACN1K,MAAO,WAIL2K,GAA+B,WACnC,OAAO,yBA4WMC,GAhWiC,SAAC,GAI1C,IAHL1T,EAGI,EAHJA,SACAiI,EAEI,EAFJA,OACAC,EACI,EADJA,WACI,EACwB3K,GAAcE,iBADtC,mBACG7R,EADH,KACW8P,EADX,KAGIyO,EAAgDjC,EAAhDiC,oBAAqBC,EAA2BlC,EAA3BkC,uBAHzB,EAYAhQ,KANF5F,EANE,EAMFA,cACAE,EAPE,EAOFA,UAPE,gBAQFqE,WARE,GAQWnE,EARX,KAQkBud,EARlB,KASFvZ,EATE,EASFA,SACAJ,EAVE,EAUFA,WAVE,gBAWFM,aAXE,GAWalD,EAXb,KAWsBqd,EAXtB,KAcEf,EAAsBzW,GAAuBC,GAE3CnJ,EAAamL,qBAAWhL,GAAxBH,SAEAgD,EAA+Bf,EAA/Be,2BAEFoe,EAAqB1B,GACzBrmB,EACAgN,EACAsZ,EACA3f,EACA4f,EACA5c,EACA0S,GA3BE,EA8B4C2L,qBAC9CD,EACA,CACEjB,aAAc,EACdE,iBAAkB,EAClBhB,WAAY,GACZ5V,cAAe,KApCf,mBA8BG6X,EA9BH,KA8BqBC,EA9BrB,KAuCJte,qBAAU,WACS,IAAboD,GACFkb,EAAoB,CAAEhB,WAAY,0BAEnC,CAACla,IAEJ,IAAMyL,EAAWxR,mBACf,kBACEghB,EAAiBnB,eAAiB9mB,EAAOC,OAAS,GAClDgoB,EAAiBjB,mBACfiB,EAAiBjC,WAAW/lB,OAAS,IACzC,CACEgoB,EAAiBnB,aACjBmB,EAAiBjB,iBACjBiB,EAAiBjC,WACjBhmB,IAIEiD,EAAUP,KAEV8iB,EAAW9W,iBAAO,MASxB9E,qBAAU,YANP4b,EAAS3b,QACL2b,EAAS3b,QACV,CAAEse,MAAO,kBAAM,QACjBA,UAKD,CACDne,EACAie,EAAiBnB,aACjBmB,EAAiBjB,mBAGnB,IAAMoB,EAAc,WAClBF,EAAoB,CAAEhB,WAAY,gCAClC7K,KAGIgM,EAASjB,GAAmBpd,EAASqd,GAE3C,OACE,eAAC9Z,EAAA,EAAD,CACEpH,MAAI,EACJqH,WAAS,EACT8K,UAAU,MACVoG,QAAQ,SACR/Q,WAAW,SACXtL,MAAO,CAAE2B,OAAQ,OANnB,UAQE,cAAC,GAAD,CAAc2H,KAAmB,IAAbqB,IAUpB,cAAC,GAAD,CAAYuI,OAAQ6S,IACpB,cAAC,GAAD,CACElR,KAAMqH,EACN/E,QAASgF,EACTxc,MAAO,oBAAIK,MAAO,CAAEoB,OAAQ,GAArB,uCACPgW,MAAO,CACLza,GAAQ2b,gBACR3b,GAAQ6b,gBACR7b,GAAQ+b,kBACR/b,GAAQic,kBAEVvB,YAAa,CACX1a,GAAQ4b,wBACR5b,GAAQ8b,wBACR9b,GAAQgc,0BACRhc,GAAQkc,0BAEVvB,mBAAoB,uDAErB3Z,EAAOC,QACN,qCACE,cAACsN,EAAA,EAAD,CACEpH,MAAI,EACJqH,WAAS,EACTE,aAAa,SACbC,WAAW,SACXtK,UAAWJ,EAAQc,eALrB,SAOE,cAAC,GAAD,CACE6E,cAAeA,EACfE,UAAWA,EACX6D,IAAG,UAAKmH,GAAL,+BAA4CM,GAC/CxH,WAAYA,EACZ1D,MAAI,MAGR,eAACqE,EAAA,EAAD,CACEpH,MAAI,EACJqH,WAAS,EACTC,GAAI,GACJpL,MAAO,CAAEoF,MAAO,MAAOgF,aAAc,QACrCiS,QAAQ,SACR/Q,WAAW,SANb,UAQE,cAACJ,EAAA,EAAD,CAAMpH,MAAI,EAACsH,GAAI,GAAf,SACE,sBAAKpL,MAAO,CAAC2W,UAAU,SAASrV,aAAc,YAA9C,UACK/B,EAAU5B,EAAOioB,EAAiBnB,eADvC,KACyDmB,EAAiBnB,aAAa,EADvF,OAC8F9mB,EAAOC,OADrG,SAKF,cAACsN,EAAA,EAAD,CAAMpH,MAAI,EAACsH,GAAI,GACPpL,MAAO,CACLiB,QAAS,OACTC,cAAe,SACfoB,UAAU,OACV8H,aAAa,OACbhJ,OAAQ,iBANlB,SAUQ,cAAC0E,GAAA,EAAD,CACE0M,eAAgBgT,GAChBxoB,MAAO,CAEH,IADFW,EAAOioB,EAAiBnB,cAActmB,iBAGpC,IADFR,EAAOioB,EAAiBnB,cAAc1mB,gBAGxC6C,QAAS,CACPqF,KAAMrF,EAAQghB,kBACd1b,MAAOtF,EAAQihB,mBACfzb,KAAMxF,EAAQkhB,kBACdmE,WAAYrlB,EAAQkhB,mBAEtB5V,MAAO,CACL,CACElP,MAAqB,IAAd2J,EAAMxH,MACbqhB,MAAOhjB,EACLooB,EAAiBjC,WACfiC,EAAiBjB,kBACfha,SAMd,cAACO,EAAA,EAAD,CAAMpH,MAAI,EAAV,SAEJ,cAACoiB,GAAA,EAAD,CAEAjmB,QAAQ,OACRmX,MAAOwO,EAAiBjC,WAAW/lB,OACnC+Z,WAAYiO,EAAiBjB,iBAC7BlkB,SAAS,SACTG,QAAS,CACPoF,KAAKpF,EAAQuhB,YACbgE,UAAWvlB,EAAQohB,YACnBoE,KAAMxlB,EAAQqhB,qBACdoE,IAAKzlB,EAAQshB,YAEfoE,WACE,cAAC9a,EAAA,EAAD,CACEE,QAAS,kBACPma,EAAoB,CAAEhB,WAAY,2BAFtC,SAKGloB,GAAQ4oB,OAGbhjB,WACE,cAACiJ,EAAA,EAAD,CACEE,QAAS,kBACPma,EAAoB,CAClBhB,WAAY,4BAHlB,SAOGloB,GAAQke,YAKf,cAAC,GAAD,CACE4H,YAAamD,EAAiBnB,aAC9BlC,WAAY,kBAAM,MAClBG,cAAe/kB,EAAOC,OACtB4kB,WAAYuD,EACZnD,WACE,8BACE,cAAC,GAAD,CACElX,QAAS,kBACPma,EAAoB,CAAEhB,WAAY,yBAEpC7kB,MAAO,CACL2B,OAAQ,QACRP,OAAQ,kBACRgE,MAAO,QAPX,SAUE,cAACmhB,GAAA,EAAD,CAAWvmB,MAAO,CAACQ,SAAS,YAIlCqiB,YACE,8BACE,cAAC,GAAD,CACE7iB,MAAO,CACL4P,gBAAiBwG,EAAW,QAAU,UACtCzU,OAAQ,QACRP,OAAQ,kBACRgE,MAAO,QAETsG,QAAS,kBACPma,EAAoB,CAAEhB,WAAY,qBARtC,SAWGzO,EAAW,cAACyG,EAAA,EAAD,IAAY,cAAC2J,GAAA,EAAD,CAAYxmB,MAAO,CAACQ,SAAS,YAlC7D,SAuCE,cAAC,GAAD,CAuCE2iB,SAAUA,EACVC,mBAAoBwC,EAAiB7X,cACrC/E,SAAU,SAACV,GACT0d,IACAH,EAAoB,CAClBhB,WAAY,wBACZN,iBAAkBjc,eAQhC,qBACEtI,MAAO,CACLS,SAAU,WACVkJ,KAAM,EACN7G,OAAQ,EACRsC,MAAO,QALX,UAQG,Q,iDClYHqhB,GAAmB,SAACC,EAAkB3U,GAE1C,IAAMzH,EAAG,UAAMmH,GAAN,8BAA4CM,EAA5C,mBAA+DrV,IACxEiqB,KAAMC,QAAe,CACnBtc,IAAKA,EACLuc,OAAQ,OACRC,iBAAiB,EACjBC,KAAML,KA0FKM,GA7EQ,SACrBjV,GAII,IAAD,IACuB7O,wBAA4BmB,GADnD,mBACI4iB,EADJ,KACWC,EADX,KAGGvpB,EAASiH,mBACb,yCAAMqiB,QAAN,IAAMA,OAAN,EAAMA,EAAOlZ,cAAcpQ,cAA3B,QAAqC,KACrC,QAACspB,QAAD,IAACA,GAAD,UAACA,EAAOlZ,qBAAR,aAAC,EAAsBpQ,SAWnBwpB,EAAsBpjB,sBAAW,yCACrC,WAAOC,GAAP,gBAAAmL,EAAA,kEAKqBnL,EALrB,SAOY2iB,KAAMC,QAAiB,CAC3BE,iBAAiB,EACjBxc,IAAI,GAAD,OAAKmH,GAAL,2BAAwCM,GAC3CqV,kBAAmB,SAACC,GAAD,qCAChBC,KAAKC,MAAMF,UADK,iBACjB,EAA0BtZ,qBADT,aACjB,EAAyCpQ,cADxB,QACkC,MAX7D,mBAaMopB,KARES,GALR,cAiBEN,GAAS,SAACO,GACR,IAAMf,OACUriB,IAAdojB,OACIpjB,EADJ,2BAESojB,GAFT,IAEoB1Z,cAAe,CAAEpQ,OAAQ6pB,KAE/C,OADAd,GAAaD,GAAiBC,EAAW3U,GAClC2U,KAvBX,2CADqC,sDA2BrC,CAAC3U,IAGHxK,qBAAU,WAEJwK,GACF4U,KACGC,QAAe,CACdtc,IAAI,GAAD,OAAKmH,GAAL,2BAAwCM,GAC3C+U,iBAAiB,EACjBM,kBAAmB,SAACC,GAAD,OAAeC,KAAKC,MAAMF,MAE9CK,MAAK,SAACC,GAAc,IAAD,MA/CPH,EAgDXN,EAASS,EAASZ,MAhDPS,EAiDF,oBAACG,EAASZ,YAAV,iBAAC,EAAehZ,qBAAhB,aAAC,EAA8BpQ,cAA/B,QAAyC,GAhDxDupB,GAAS,SAACD,GAAD,YACG5iB,IAAV4iB,OACI5iB,EADJ,2BAES4iB,GAFT,IAEgBlZ,cAAe,CAAEpQ,OAAQ6pB,aAgD1C,CAACzV,IAEJ,IAAM6V,EAAahjB,mBAEjB,iBAAM,CAACjH,EAAQwpB,KAAsB,CAACxpB,EAAQwpB,IAEhD,MAAO,CACLU,WAAYZ,GAASA,EAAMtnB,MAC3BmoB,YAAaF,I,8BCnDXjrB,GAAU,IAAIC,IAAiB,CACnCC,GAAI,CACFyb,gBACE,gEACFC,wBAAyB,OACzBC,gBACE,oJACFC,wBAAyB,QACzBC,kBACE,wFACFC,0BAA2B,MAC3BoP,mCAAoC,sCACpCC,kBAAmB,WACnBlP,kBAAmB,4BAajBzY,GAAYC,aAAW,SAACmB,GAAD,MAAY,CACvCwmB,WAAY,CACVrY,gBAAiB,QACjBpN,MAAO,SAET0lB,cAAe,CACb5lB,UAAW,MACX8H,aAAc,MACd5I,QAAS,cACT4D,MAAO,QAET3C,oBAAqB,CACnBH,UAAW,MACXd,QAAS,OAEXE,eAAe,aACbC,OAAQ,MACRC,UAAW,QACXC,SAAU,OACTJ,EAAMK,YAAYC,GAAG,MAAQ,CAC5BF,SAAU,QAGdsmB,WAAW,aACT3mB,QAAS,MACTF,aAAc,WACd8mB,WAAY,WACZC,UAAW,QACXC,UAAW,SACXrK,OAAQ,gCACRpU,aAAc,MACdiG,YAAa,OACb0G,SAAU,GACT/U,EAAMK,YAAYC,GAAG,MAAQ,CAC5BsmB,UAAW,cAKJE,GAAoC,SAAC,GAI3C,IAHLvO,EAGI,EAHJA,OACAjI,EAEI,EAFJA,SACAkI,EACI,EADJA,WAEQiC,EAAgDjC,EAAhDiC,oBAAqBC,EAA2BlC,EAA3BkC,uBADzB,EASAhQ,KALF5F,EAJE,EAIFA,cACe2d,EALb,cAKFpZ,WALE,MAMU0d,EANV,EAMFje,WACA9D,EAPE,EAOFA,UACAkE,EARE,EAQFA,SAGMrD,EAA+Bf,EAA/Be,2BAXJ,EAawBgI,GAAcE,iBAbtC,mBAaG7R,EAbH,KAaW8P,EAbX,KAeE7M,EAAUP,KAEVooB,EAAiB9qB,EAAO4P,OAAOnP,GAjBjC,EAmB6B0X,GAAa2S,GAAtCzS,EAnBJ,EAmBIA,KAAMK,EAnBV,EAmBUA,KAAMD,EAnBhB,EAmBgBA,SAEdqO,EAAe7f,mBAKnB,kBAAM6jB,EAAezS,KACrB,CAACA,EAAMyS,IAQTlhB,qBAAU,WACR2c,EAAS,CACP/kB,MAAOslB,EAAatmB,iBACpBkB,IAAKolB,EAAa1mB,iBAEpBuJ,EAA2Bmd,EAAatmB,oBACvC,CAAC6X,EAAMrY,EAAQ8mB,EAAcnd,EAA4B4c,IAE5D,IAAMwE,EzC0FuB,SAC7Bjb,GAwCA,OAlCiB1J,uBACf,SACE2J,EACAib,EACArkB,GAEAmJ,GAAU,SAAC9P,GAAD,OACRA,EAAOwP,KAAI,SAAC9O,GAAD,OACTA,EAAMuP,KAAOF,EAASE,IAMlBP,GACEhP,EAAMC,gBACN,SAAC6Q,GAAD,OAAOA,EAAEvB,KAAO+a,EAAsB/a,MAFxC,2BAKOvP,GALP,IAMIwP,OAAQ,CACN+a,WAAY,IAAIxa,KAChBN,sBAAuB6a,EAAsB/a,GAC7Cib,WAAYvkB,KAIlBjG,UAIV,CAACoP,IyChIkBqb,CAAgBrb,GAC/Bsb,EzCwIuB,SAC7Btb,GAaA,OAXiB1J,uBACf,SAAC4W,GACClN,GAAU,SAAC9P,GAAD,OACRA,EAAOwP,KAAI,SAAC9O,GAAD,OACTA,EAAMuP,KAAO+M,EAAS/M,GAAtB,2BAAgCvP,GAAhC,IAAuCwP,YAAQxJ,IAAchG,UAInE,CAACoP,IyCnJkBub,CAAgBvb,GAE7BnJ,EAAamL,qBAAWhL,GAAxBH,SA9CJ,EAoD8CpB,mBAAS,IApDvD,mBAoDG+lB,EApDH,KAoDsBC,EApDtB,OA0DoDhmB,wBAEtDmB,GA5DE,mBA0DG8kB,EA1DH,KA0DyBC,EA1DzB,KA8DJ7hB,qBAAU,WACR2hB,EACEC,EAAuBA,EAAqBzqB,QAAU,MAEvD,CAACyqB,IAEJ,IAAMlF,EAAsBzW,GAAuBC,GAEnD,OACE,eAACvC,EAAA,EAAD,CACEC,WAAS,EACTE,aAAa,SACbC,WAAW,SACXmV,QAAS,EACTxK,UAAU,SALZ,UAOE,cAAC,GAAD,CAAc3M,KAAmB,IAAbqB,IAUpB,cAAC,GAAD,CAAYuI,OAAQ8G,IACpB,cAAC9O,EAAA,EAAD,CACEpH,MAAI,EACJqH,WAAS,EACTE,aAAa,SACbC,WAAW,SACXtK,UAAWJ,EAAQc,eALrB,SAOE,cAAC,GAAD,CACE+E,UAAWA,EACXF,cAAeA,EACf+D,IAAG,UAAKmH,GAAL,+BAA4CM,GAC/CxH,WAAYie,MAIhB,eAACtd,EAAA,EAAD,CAAMpH,MAAI,EAACuH,aAAa,SAASrL,MAAO,CAACsC,UAAU,SAAnD,UACK/C,EAAUklB,GADf,mBAGSjnB,EAAiB8B,EAAUJ,EAAqBulB,GAActlB,QAHvE,cAGoF3B,EAC9E8B,EAAUJ,EAAqBulB,GAAcplB,OAJnD,OAOA,cAAC6L,EAAA,EAAD,CACEpH,MAAI,EACJqH,WAAS,EACTC,GAAI,GACJpL,MAAO,CAAE2B,OAAQ,MAAOyI,aAAc,QACtCiS,QAAQ,SACR/Q,WAAW,SANb,SAQE,cAAC,GAAD,CACEmX,YAAazM,EACbuM,WAAYlM,EACZqM,cAAe+F,EAAe7qB,OAC9B4kB,WAAYxI,EACZha,MAAO,CAAEoF,MAAO,OAAOyK,WAAW,SAClC8S,sBAAuB,CAAEvhB,OAAQ,UAAWyO,WAAW,OAAOC,YAAY,SAC1E8S,WACE,qBACE5iB,MAAO,CACL2B,OAAQ,QACRP,OAAQ,kBACRgE,MAAO,OACPrC,OAAQ,GALZ,SAQE,cAAC,GAAD,CACE2I,QAAS,kBAAM2K,EAAK,SACpBrW,MAAO,CAAE2B,OAAQ,SAFnB,SAIE,cAAC4kB,GAAA,EAAD,CAAWvmB,MAAO,CAAEQ,SAAU,UAIpCqiB,YACE,qBACE7iB,MAAO,CACLoB,OAAQ,kBACRgE,MAAO,OACPrC,OAAQ,GAJZ,SAOE,cAAC,GAAD,CACE2I,QAAS,kBAAO0K,EAAW4D,IAAW3D,EAAK,SAC3CrW,MAAO,CACL4P,gBAAiBwG,EAAW,QAAU,UACtCzU,OAAQ,SAJZ,SAOGyU,EAAW,cAACyG,EAAA,EAAD,CAAO7c,MAAO,CAAEQ,SAAU,MAAW,cAACgmB,GAAA,EAAD,CAAYxmB,MAAO,CAAEQ,SAAU,UAvCxF,SA4CE,8BAEEikB,EAAanmB,eAAe6O,KAC1B,SAACY,GAAD,aACEA,EAAcrP,SACZ,eAACqB,EAAA,EAAD,CAAME,QAAQ,WAAWD,MAAO,CAACoK,aAAa,OAA9C,UAEA,eAACqT,GAAA,EAAD,CAA4Bzc,UAAWJ,EAAQsnB,cAA/C,UACE,qBACEloB,MAAO,CACLiB,QAAS,OACTM,eAAgB,MAChB6I,aAAc,OAJlB,SAOE,qBACEpK,MAAO,CACLQ,SAAU,SACV8B,UAAU,OACVrB,QAAS,QAJb,SAgBK8M,EAAcC,cAKrB,qBACEtC,QAAS,wBACPpH,KACC,UAAAmgB,EAAa5W,cAAb,eAAqBC,yBACtBC,EAAcH,GACV8a,EAAajE,EAAc1W,EAAezJ,GAC1CykB,EAAatE,KAEnBzkB,MAAO,CAAEiB,QAAS,OAAQC,cAAe,OAR3C,SAWE,cAACf,EAAA,EAAD,CAAYH,MAAO,CAACQ,SAAS,QAAQgB,QAAQ,OAA7C,SACGuM,EAAcrP,cAzCXqP,EAAcH,IA6CxB,cAAC0D,GAAA,EAAD,IACA,eAACgM,GAAA,EAAD,CAAatd,MAAO,CAACuB,eAAe,iBAApC,UAEA,cAACiK,EAAA,EAAD,CACME,QAAS,kBAAM0d,EAAwBrb,IAD7C,qBAMI,mDAEJ,cAACsb,GAAA,EAAD,CACMC,SACE,UAAA7E,EAAa5W,cAAb,eAAqBC,yBACrBC,EAAcH,GAEhB5E,SAAU,SAACC,EAAGqgB,GAAJ,OACRhlB,IACCglB,EACGZ,EACEjE,EACA1W,EACAzJ,GAEFykB,EAAatE,KAEnBzkB,MAAO,CAAE4P,gBAAiB,+BAU5C,cAAC,GAAD,CACEiF,KAAMqH,EACN/E,QAASgF,EACT/E,MAAO,CACLza,GAAQ2b,gBACR3b,GAAQ6b,gBACR7b,GAAQ+b,mBAEVrB,YAAa,CACX1a,GAAQ4b,wBACR5b,GAAQ8b,wBACR9b,GAAQgc,2BAEVhZ,MAAO,oBAAIK,MAAO,CAAEoB,OAAQ,GAArB,SAA2BzE,GAAQmc,oBAC1CxB,mBAAoB,oDAEtB,cAAC,GAAD,CACEhO,UAA+BjF,IAAzB8kB,EACNpY,OACE,cAAC,GAAD,CACEgD,QACE,qBAAK/T,MAAO,CAAEooB,WAAY,OAA1B,SACGzrB,GAAQ8C,aACP9C,GAAQorB,mCACR,sBACE/nB,MAAO,CAAEupB,eAAgB,aAD3B,0BAEKJ,QAFL,IAEKA,OAFL,EAEKA,EAAsBnb,kBAMrCgD,KAAM,WACJoY,OAAwB/kB,IAjB5B,SAoBE,sBAAKrE,MAAO,CAAES,SAAU,YAAxB,UACE,cAAC+oB,GAAA,EAAD,CAAMxpB,MAAO,CAAEqoB,UAAW,QAAShU,SAAU,UAA7C,SACGoQ,EAAanmB,eACXiP,QAAO,SAAC9O,GAAD,OAAOA,EAAEmP,MAAF,OAASub,QAAT,IAASA,OAAT,EAASA,EAAsBvb,OAC7CT,KAAI,SAAC1O,GAAD,OACH,cAACgrB,GAAA,EAAD,CAAUzpB,MAAO,CAAEiB,QAAS,OAAQmnB,WAAY,OAAhD,SACGzrB,GAAQ8C,aACP9C,GAAQqrB,kBACR,qBACEhoB,MAAO,CACLsV,UAAW,aACXjU,WAAY,KAHhB,SAMG5C,EAAEuP,YAEL,qBACEhO,MAAO,CAAEooB,WAAY,MAAO9mB,aAAc,YAD5C,SAGG7C,EAAEC,kBAMf,qBAAKsB,MAAO,CAACoB,OAAO,QAApB,SACA,cAAC,GAAD,CACEgiB,mBAAoB6F,EACpBjgB,SAAUkgB,MAIZ,cAAC5X,GAAA,EAAD,CAASrR,QAAQ,cACjB,qBAAKD,MAAO,CAAEiB,QAAS,OAAQM,eAAgB,YAA/C,SACE,cAACiK,EAAA,EAAD,CACEE,QAAS,WACPyd,GACElF,EACEQ,EACAwE,EACAE,EAAqBnb,WAEzBob,OAAwB/kB,IAE1BrE,MAAO,CACLoB,OAAQ,MAERX,SAAU,WACVqC,OAAQ,EACRD,MAAO,GAETgc,SAAgC,KAAtBoK,EAjBZ,iC,SC7ZNtsB,GAAU,IAAIC,IAAiB,CACnCC,GAAI,CACF6sB,GAAI,OACJC,GAAI,QACJC,GAAI,MACJC,GAAI,OACJhhB,IAAK,SACLihB,IAAK,SACLC,IAAK,QACLC,IAAK,SACLC,IAAK,OACLC,IAAK,QACLC,KAAM,UACNC,KAAM,UACNC,UAAW,cACXC,cAAe,gBAEfC,QAAS,UACTC,YAAa,cACbC,SAAU,WACVC,wBAAyB,mCAQvBC,GAAS,CACb,CAAC,KAAM,SACP,CAAC,KAAM,QACP,CAAC,KAAM,OACP,CAAC,KAAM,MACP,CAAC,MAAO,IACR,CAAC,MAAO,IAkBJC,GAAU,SAACC,GACf,IAD8B,EAfZ,SAClBC,GACyC,IAAD,iBACZH,IADY,IACxC,2BAAoC,CAAC,IAAD,yBAA1BnrB,EAA0B,KAApBlC,EAAoB,KAC5BytB,EAAW7tB,KAAKC,MAAM2tB,GAAoBxtB,GAChD,GAAIytB,GAAY,EACd,MAAO,CACLA,SAAUA,EACVC,MAAOxrB,IAN2B,8BAUxC,MAAO,CAAEurB,SAAU,EAAGC,MAAOruB,GAAQmtB,KAKTriB,CADHvK,KAAKC,QAAQ,IAAIiR,MAAU,IAAIA,KAAKyc,IAAS,MAC9DE,EAFsB,EAEtBA,SAAUC,EAFY,EAEZA,MAClB,OAAOA,IAAUruB,GAAQmtB,IACrBntB,GAAQ8C,aAAa9C,GAAQ0tB,UAAW,cAAe,UACvD1tB,GAAQ8C,aACN9C,GAAQ0tB,UACRU,EAAS3tB,WAFX,UAGkB,IAAb2tB,EAAiBpuB,GAAQsuB,UAAUD,GApC5B,SAACA,GACjB,OAAOruB,GAAQsuB,UAAR,UAAqBD,EAArB,MAmC8CE,CAAUF,MAI3DG,GAED,SAAC,GAAsB,IAAD,QAAnBC,EAAmB,EAAnBA,aACEC,EAAsBD,EAAtBC,KAAM7rB,EAAgB4rB,EAAhB5rB,KAAMnB,EAAU+sB,EAAV/sB,MAWpB,OACE,sBAAM2B,MAAO,CAAEooB,WAAY,MAAOnnB,QAAS,OAAQmB,SAAU,QAA7D,SACGzF,GAAQ8C,aACP9C,GAAQ+tB,wBACR,sBAAM1qB,MAAO,CAAEqB,WAAY,QAA3B,SAdkB,SAACgqB,GACvB,OAAQA,GACN,IAAK,QACH,OAAO1uB,GAAQ4tB,QACjB,IAAK,gBACH,OAAO5tB,GAAQ6tB,YACjB,IAAK,SACH,OAAO7tB,GAAQ8tB,UAOuBa,CAAgBD,KACtD,qBAAKrrB,MAAO,CAAEsB,aAAc,YAA5B,SAA2C/B,EAAUlB,KACrD,6CACMb,EACF8B,EAAUX,EAAeN,EAAMe,kBAFnC,cAGS5B,EACL8B,EAAUX,EAAeN,EAAMR,mBAGnC,cAACsC,EAAA,EAAD,CACEF,QAAQ,YACRD,MAAO,CAAE6P,WAAY,MAAOxO,WAAY,KAF1C,SAIGupB,GACU,UAATS,EACIhtB,EAAM8P,UACG,kBAATkd,EAAA,oBACA5H,GAAsBplB,EAAOmB,UAD7B,aACA,EAAoC2O,iBADpC,QACiD,IAAIC,KADrD,oBAEA/P,EAAMwP,cAFN,aAEA,EAAc+a,kBAFd,QAE4B,IAAIxa,YA0EjCmd,GA9DV,SAAC,GAA4B,IAA1B1W,EAAyB,EAAzBA,KAAM7D,EAAmB,EAAnBA,KAAMrT,EAAa,EAAbA,OACZ6tB,EAAe5mB,mBACnB,kBACE6mB,MAAMC,K3DgCqB,SAAC/tB,GAAD,OAK/BA,EACGwP,KAAkB,SAAC9O,GAAD,MAAY,CAC7BmB,KAAMnB,EAAM2P,UACZqd,KAAM,QACNhtB,YAED6O,OACCvP,EAAOY,QACL,SAACC,EAAKH,GAAN,OACEG,EAAI0O,OACF7O,EAAMC,eAAe6O,KAAI,SAACY,GAAD,MAAoB,CAC3CvO,KAAMuO,EAAcC,UACpBqd,KAAM,gBACNhtB,eAGN,KAGH6O,OACCvP,EAAOY,QACL,SAACC,EAAKH,GAAN,OACEA,EAAMwP,OACFrP,EAAI0O,OAAO,CACT,CACE1N,KAAMnB,EAAMwP,OAAOgb,WACnBwC,KAAM,SACNhtB,WAGJG,IACN,K2DnEAmtB,CAAkBhuB,GAAQY,QACxB,SAACC,EAAK4sB,GAAN,OACE5sB,EAAIotB,IAAIR,EAAa5rB,MACjBhB,EAAIqtB,IACFT,EAAa5rB,KACbhB,EAAIotB,IAAIR,EAAa5rB,MAAO0N,OAAO,CAACke,KAEtC5sB,EAAIqtB,IAAIT,EAAa5rB,KAAM,CAAC4rB,MAClC,IAAIU,QAGV,CAACnuB,IAGH,OACE,cAAC,GAAD,CACEoT,OACE,cAAC5Q,EAAA,EAAD,CAAYF,QAAQ,KAAKD,MAAO,CAAEqB,WAAY,WAA9C,SACG1E,GAAQ2tB,gBAGbhhB,KAAMuL,EACN7D,KAAMA,EAPR,SASE,cAAC,GAAD,UACE,cAACG,GAAA,EAAD,CACEnR,MAAO,CAAE2B,OAAQ,OAAQyD,MAAO,OAAQiP,SAAU,UADpD,SAGE,cAACiI,EAAA,EAAD,CAAUE,KAAM,EAAGD,WAAW,OAA9B,SACGiP,EAAare,KAAI,SAAC4e,GAAD,OAChB,cAACtP,EAAA,EAAD,UACE,cAAC,EAAD,CACE9c,MACE,qBAAKK,MAAO,CAAEsB,aAAc,YAA5B,SACGyqB,EAAY,KAHnB,SAOE,cAACvC,GAAA,EAAD,UACGuC,EAAY,GAAG5e,KAAI,SAACie,GAAD,OAClB,cAAC3B,GAAA,EAAD,UAGE,cAAC,GAAD,CAAyB2B,aAAcA,KAHzC,UACUA,EAAa/sB,MAAMuP,IAD7B,OACkCwd,EAAaC,eAXpCU,EAAY,gBCpJvCpvB,GAAU,IAAIC,IAAiB,CACnCC,GAAI,CACFmvB,QAAS,UACTC,iBAAkB,oBAClBC,SAAU,WACVC,UAAW,YACXC,UAAW,YACXC,aAAc,eACdC,kBAAmB,wBAIjBC,GAAW,SAACC,GAChB,OAAQA,GACN,KAAKhP,GAAK8D,SACR,OAAO3kB,GAAQuvB,SACjB,KAAK1O,GAAKyC,UACR,OAAOtjB,GAAQwvB,UACjB,KAAK3O,GAAKgE,UACR,OAAO7kB,GAAQyvB,UACjB,KAAK5O,GAAK+D,aACR,OAAO5kB,GAAQ0vB,eAoKNI,GAhKW,WAAO,IAAD,EACNvpB,mBAAesa,GAAKyC,WADd,mBACvBuM,EADuB,KACjBnL,EADiB,KAEtB9R,EAAmBD,GAAnBC,eAEFwC,ECpDkB,WAAO,IAAD,EACA7O,mBAAS,IADT,mBACvBwpB,EADuB,KACdC,EADc,KAa9B,OAVAplB,qBAAU,WAER,IAAIqlB,EAASnpB,OAAO8N,SAASC,KAAK7K,MAAM,WAAW,GAAGA,MAAM,KAAK,GAGjEgmB,EAAWC,KAGV,IAEIF,EDuCUG,GAJa,EAS1B7F,GAAejV,GAFjB8V,EAP4B,EAO5BA,WAP4B,gBAQ5BC,YAR4B,GAQdnqB,EARc,KAQN8P,EARM,KAWxBqf,EAAmBloB,mBAAQ,kBAAM9G,EAAsBH,KAAS,CACpEA,IAEIovB,EAAwBnoB,mBAC5B,kBACEjH,EAAOC,O5DwF+B,SAACD,GAAD,OAC1CA,EAAOY,QACL,SAACC,EAAKH,GAAN,OAAgBG,GAAOJ,EAAiBC,GAAS,EAAI,KACrD,G4D3FkB2uB,CAA6BrvB,GAAUA,EAAOC,OAAS,IACzE,CAACD,IAEGsvB,EAAiBroB,mBACrB,kBAAOjH,EAAOC,O5DgGiB,SAACD,GAAD,OACjCA,EAAOY,QAAO,SAACC,EAAKH,GAAN,OAAgBG,GAAOH,EAAMwP,OAAS,EAAI,KAAI,G4DjGnCqf,CAAoBvvB,GAAUA,EAAOC,OAAS,IACrE,CAACD,IAGGyZ,EAAQgK,GAASC,EAAS,CAC9B,CAAEja,SAA6B,IAAnB0lB,EAAwBlO,SAAS,GAC7C,CACExX,SAAkC,IAAxB2lB,EACVnO,QAASkO,EAAmB,GAE9B,CACE1lB,SAA2B,IAAjB6lB,EACVrO,QAASmO,EAAwB,KAhCP,EAoCqB/pB,GAAU,GApC/B,mBAoCvBmqB,EApCuB,KAoCLC,EApCK,OAyC1B9pB,EAAgB,iCAAkC,QAzCxB,mBAuC5B+pB,EAvC4B,KAwC5BC,EAxC4B,OA8C1BhqB,EAAgB,iCAAkC,QA9CxB,mBA4C5BiqB,EA5C4B,KA6C5BC,EA7C4B,OAgD+BlqB,EAC3D,8BACA,QAlD4B,mBAgDvBmqB,EAhDuB,KAgDEC,EAhDF,KA2DxB1c,EAAOjN,uBAAY,kBAAMsd,EAAQ7D,GAAKyC,aAAY,IAUlDW,EAAmBhc,mBACvB,kBACI4nB,IAAShP,GAAK8D,SACV,CAAC,CACC5iB,QAAS,8BAAM/B,GAAQsvB,mBACvB/W,QAAS,WACPoY,EAA6B,WAGjCd,IAAShP,GAAKgE,UACd,CAAC,CACC9iB,QAAS,8BAAM/B,GAAQsvB,mBACvB/W,QAAS,WACPwY,EAA0B,WAG9BlB,IAAShP,GAAK+D,aACd,CAAC,CACC7iB,QAAS,8BAAM/B,GAAQsvB,mBACvB/W,QAAS,WACPsY,EAA6B,WAGjC,KACR,CACEhB,IAOJ,OACE,cAACjd,EAAD,CAAgBpM,MAAO,CAACxF,EAAQ8P,GAAhC,SACE,cAAC,EAAD,UACE,iCACE,cAAC,GAAD,CACE9P,OAAQA,EACRkX,KAAMsY,EACNnc,KAAMoc,IAER,cAAC,GAAD,CACEztB,MAAO4sB,GAASC,GAChBmB,OAAQnB,IAAShP,GAAK+D,aACtBX,iBAAkBA,EAHpB,SAMG4L,IAAShP,GAAKyC,UACb,cAAC,GAAD,CACE7I,MAAOA,EACP4I,UAAW6H,GAA0BlrB,GAAQqvB,QAC7C9L,aAnEO,WACnBoN,EAA6B,QAC7BE,EAA6B,QAC7BE,EAA0B,WAkEdlB,IAAShP,GAAK8D,SAChB,cAAC,GAAD,CACEvP,SAAUA,EACViI,OAAQhJ,EACRiJ,WAAY,CACViC,oBAAmD,SAA9BmR,EACrBlR,uBAAwB,kBACtBmR,EAA6B,aAGjCd,IAAShP,GAAK+D,aAChB,cAAC,GAAD,CACExP,SAAUA,EACViI,OAAQhJ,EACRiJ,WAAY,CACViC,oBAAmD,SAA9BqR,EACrBpR,uBAAwB,kBACtBqR,EAA6B,aAGjChB,IAAShP,GAAKgE,UAChB,cAAC,GAAD,CACExH,OAAQhJ,EACRe,SAAUA,EACVkI,WAAY,CACViC,oBAAiD,SAA5BuR,EACrBtR,uBAAwB,kBACtBuR,EAA0B,aAG9B,eE5LDE,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpG,MAAK,YAAkD,IAA/CqG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,mBCCRpsB,GAAQ2sB,aAAe,CAC3BC,WAAY,CACVtQ,WAAY,CACV,cACA,oBACAuQ,KAAK,MACTC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,cAyBZE,IAASC,OAEP,cAACC,GAAA,EAAD,CAAeptB,MAAOA,GAAtB,SACA,cAAC,GAAD,MAGAqtB,SAASC,eAAe,SAM1BnB,O","file":"static/js/main.72196251.chunk.js","sourcesContent":["let api_key = \"\";\n// if (process.env.NODE_ENV === 'production')\napi_key = window.location.href.split('apikey=')[1].split('&')[0];\n// else\n  // api_key = '71932364-1925-4130-8e0c-389fa455f37e';\n\nlet api_base_address = \"\";\n// if (process.env.NODE_ENV === 'production')\n// api_base_address = `${window.location.protocol}//${window.location.hostname}${(window.location.port)?':'+window.location.port:''}`;\napi_base_address = decodeURIComponent(window.location.href.split('apiurl=')[1]);\n\n// console.log(window.location.href);\n// else\n  // api_base_address = `http://localhost:8845`;\n\n\n// console.log(api_key);\n// console.log(api_base_address);\n\nexport {api_base_address};\nexport default api_key;","import { Chunk, Contribution } from \"../types\";\nimport LocalizedStrings from \"react-localization\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    defaultChunkName: \"{0} second chunk\",\n  },\n});\n\nexport const removeReview = (chunk: Chunk) => ({ ...chunk, review: undefined });\n\nexport const getTranscriptionByCreator = (chunk: Chunk, userName: string) =>\n  chunk.transcriptions.filter(\n    (transcription) => transcription.creatorid === userName\n  )[0];\n\nexport const renameChunk = (newName: string, chunk: Chunk): Chunk =>\n  newName !== \"\" ? { ...chunk, name: newName } : { ...chunk, name: undefined };\n\nexport const deleteNegativeChunks = (chunks: Chunk[]): Chunk[] =>\n  chunks.filter((chunk) => chunk.endtimeseconds > chunk.starttimeseconds);\n\n/**\n * Given an integer return a string representation of that integer\n * padded with zeros up until the tens column\n *\n * Examples:\n * zeroPad(8) -> '08'\n * zeroPad(12) -> '12'\n *\n * @param value the value to zero pad\n */\nexport const zeroPad = (value: number) =>\n  ((rounded) =>\n    rounded < 10 ? `0${rounded < 0 ? 0 : rounded}` : rounded.toString())(\n    Math.floor(value)\n  );\n\n/**\n * Helper function to convert a number of seconds to a string with format\n * HH:MM:SS:mm\n * (Hours, Minutes, Seconds, Milliseconds)\n *\n * @param seconds the number of seconds\n */\nexport const toTimeStamp = (seconds: number) =>\n  `${zeroPad(seconds / (60 * 60))}:${zeroPad(seconds / 60)}:${zeroPad(\n    seconds % 60\n  )}:${zeroPad(Math.round((seconds - Math.floor(seconds)) * 100))}`;\n\n/**\n * Helper function to convert a number of seconds to a string with format\n * HH:MM:SS:mm\n * (Hours, Minutes, Seconds, Milliseconds)\n * If the the number of seconds is less than an hour, use the format:\n * MM:SS:mm\n *\n * @param seconds\n */\nexport const toShortTimeStamp = (seconds: number) =>\n  seconds > 60 * 60\n    ? toTimeStamp(seconds).substring(0, 8)\n    : toTimeStamp(seconds).substring(3, 8);\n\n/**\n * Given a list of chunks, get the end of the last time stamp.\n * If the list is empty return the start of the video\n *\n * @param chunks the chunks to extract the last time stamp from\n */\nexport const getLastEndTimeStamp = (chunks: Chunk[]): string =>\n  chunks.length > 0 ? chunks[chunks.length - 1].endtimestamp : \"00:00:00:00\";\n\n/**\n * Given a list of chunks, get the endtimeseconds of the last chunk.\n * If the list is empty, return the start of the video (zero seconds)\n *\n * @param chunks the chunks to extract the last time from\n */\nexport const getLastEndTimeSeconds = (chunks: Chunk[]): number =>\n  chunks.length > 0 ? chunks[chunks.length - 1].endtimeseconds : 0;\n\n/**\n * Given a list of chunks and a time (as a fraction),\n * if there exists a chunk that that time is within,\n * return the chunk, else, return null\n *\n * For example, if this is called with time = 0.5,\n * and in the list of chunks there exists chunk 'A' that\n * has start and end times 0.3 and 0.51 respectively, then\n * chunk 'A' will be returned\n *\n * @param chunks - the list of chunks to find the enclosing chunk in\n * @param time - the time to find enclosed\n */\nexport const getEnclosingChunk = (\n  chunks: Chunk[],\n  time: number\n): Chunk | undefined => {\n  for (var i = 0; i < chunks.length; i++) {\n    if (time > chunks[i].starttimeseconds && time < chunks[i].endtimeseconds)\n      return chunks[i];\n  }\n  return undefined;\n};\n\n/**\n * Given a time (as a fraction), and a list of chunks,\n * returns whether that time is valid as a new split\n *\n * A new split is invalid if it is the start/finish time\n * of a chunk in the list, if it's 0, or if it is greater\n * than the duration of the video\n *\n * @param chunks - the chunks that are being added to\n * @param time - the time stamp of the new chunk\n * @param storyDuration - the duration of the video being chunked\n */\nexport const invalidSplit = (\n  chunks: Chunk[],\n  time: number,\n  storyDuration: number\n) => {\n  return (\n    time === 0 ||\n    time > storyDuration ||\n    chunks.reduce(\n      (onBoundary: boolean, chunk) =>\n        onBoundary ||\n        chunk.endtimeseconds === time ||\n        chunk.starttimeseconds === time,\n      false\n    )\n  );\n};\n\n/**\n * Given a chunk, returns whether that chunk has no transcription\n * (All of it's transcription objects have content equal to \"\")\n *\n * @param chunk the chunk to check\n */\nexport const hasTranscription = (chunk: Chunk): boolean =>\n  chunk.transcriptions.reduce<boolean>(\n    (acc, t) => acc || t.content !== \"\",\n    false\n  );\n\n/**\n * Given a list of chunks, return the number of chunks that have a\n * transcription.\n *\n * @param chunks the chunks to count\n */\nexport const countChunksWithTranscription = (chunks: Chunk[]): number =>\n  chunks.reduce<number>(\n    (acc, chunk) => acc + (hasTranscription(chunk) ? 1 : 0),\n    0\n  );\n\n/**\n * Given a list of chunks, return the number of chunks that have\n * been reviewed\n *\n * @param chunks the chunks to count\n */\nexport const countReviewedChunks = (chunks: Chunk[]): number =>\n  chunks.reduce((acc, chunk) => acc + (chunk.review ? 1 : 0), 0);\n\n/**\n * Given a list of chunks, fetches the list of all contributions\n *\n * @param chunks the chunks to extract contributers from\n */\nexport const listContributions = (chunks: Chunk[]): Contribution[] =>\n  /**\n   * We get the list of all contributers and then create a Set from it\n   * to remove duplicates. We then create a array from that set.\n   */\n  chunks\n    .map<Contribution>((chunk) => ({\n      name: chunk.creatorid,\n      type: \"chunk\" as const,\n      chunk,\n    }))\n    .concat(\n      chunks.reduce(\n        (acc, chunk) =>\n          acc.concat(\n            chunk.transcriptions.map((transcription) => ({\n              name: transcription.creatorid,\n              type: \"transcription\" as const,\n              chunk,\n            }))\n          ),\n        [] as Contribution[]\n      )\n    )\n    .concat(\n      chunks.reduce(\n        (acc, chunk) =>\n          chunk.review\n            ? acc.concat([\n                {\n                  name: chunk.review.reviewedby,\n                  type: \"review\" as const,\n                  chunk,\n                },\n              ])\n            : acc,\n        [] as Contribution[]\n      )\n    );\n\nexport const getAdjacentChunks = (\n  chunk: Chunk,\n  allChunks: Chunk[]\n): { prev: Chunk | undefined; next: Chunk | undefined } =>\n  allChunks.reduce<{ prev: Chunk | undefined; next: Chunk | undefined }>(\n    (acc, el, idx) =>\n      el.id === chunk.id\n        ? { prev: allChunks[idx - 1], next: allChunks[idx + 1] }\n        : acc,\n    { prev: undefined, next: undefined }\n  );\n\nexport type Time = {\n  hours: number;\n  minutes: number;\n  seconds: number;\n  milliseconds: number;\n};\n\nexport const parseTimeStamp = (stamp: string) => ({\n  hours: Number(stamp.slice(0, 2)),\n  minutes: Number(stamp.slice(3, 5)),\n  seconds: Number(stamp.slice(6, 8)),\n  milliseconds: Number(stamp.slice(9, 11)),\n});\n\n/**\n * Given a chunk return a start and end Time object\n *\n * @param chunk the chunk to parse the timestamps of\n */\nexport const parseChunkTimeStamps = (\n  chunk: Chunk\n): { start: Time; end: Time } => ({\n  start: parseTimeStamp(chunk.starttimestamp),\n  end: parseTimeStamp(chunk.endtimestamp),\n});\n\n/**\n * Given a time object, return the number of seconds, in that time\n * object, excluding the milliseconds\n *\n * @param time the time to get the seconds for\n */\nexport const secondsOf = (time: Time) =>\n  time.hours * 60 * 60 + time.minutes * 60 + time.seconds;\n\nexport const getNameOf = (chunk: Chunk) =>\n  chunk.name\n    ? chunk.name\n    : (strings.formatString(\n        strings.defaultChunkName,\n        `${\n          secondsOf(parseTimeStamp(chunk.endtimestamp)) -\n          secondsOf(parseTimeStamp(chunk.starttimestamp))\n        }`\n      ) as string);\n","import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport React, { ReactNode } from \"react\";\n\ntype SimpleCardProps = {\n  title?: ReactNode;\n  contentStyle?: any;\n  cardStyle?: any;\n};\n\nconst SimpleCard: React.FC<SimpleCardProps> = ({\n  title,\n  children,\n  contentStyle,\n  cardStyle,\n}) => {\n  return (\n    <Card  style={{ ...cardStyle }} variant=\"outlined\">\n      <CardContent style={{ ...contentStyle }}>\n        {children}\n        <Typography variant=\"subtitle1\" component=\"div\" >\n          {title}\n        </Typography>\n      </CardContent>\n    </Card>\n    // <div className={classes.cardContainer} style={style}>\n    //     <span>\n    //        {title}\n    //     </span>\n    //     <Divider style={{ margin: \"4px 0 4px 0\" }}/>\n    //     {children}\n    // </div>\n  );\n};\n\nexport default SimpleCard;\n","import { makeStyles } from \"@material-ui/core\";\nimport {\n  getNameOf,\n  secondsOf,\n  toShortTimeStamp,\n} from \"../../utils/chunkManipulation/chunkManipulation\";\nimport { Chunk } from \"../../utils/types\";\nimport SimpleCard from \"./SimpleCard\";\nimport { parseChunkTimeStamps } from \"../../utils/chunkManipulation/chunkManipulation\";\nimport React, { ReactNode } from \"react\";\n\nconst useStyles = makeStyles({\n  titleContainer: {\n    fontSize: \"1.2rem\",\n    position: \"relative\",\n  },\n});\n\nconst ChunkCard: React.FC<{\n  chunk: Chunk;\n  style?: any;\n  transcriptionIcon?: ReactNode;\n}> = ({ chunk, children, style, transcriptionIcon }) => {\n  const classes = useStyles();\n  const startEnd = parseChunkTimeStamps(chunk);\n\n  const endSeconds = secondsOf(startEnd.end);\n  const startSeconds = secondsOf(startEnd.start);\n\n  return (\n    <SimpleCard\n      title={\n        <div>\n          <span\n            className={classes.titleContainer}\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              lineHeight: \"normal\",\n              margin: \"0px 15px\",\n            }}\n          >\n            <span\n              style={{\n                fontWeight: 300,\n                overflowWrap: \"anywhere\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                lineHeight: \"2rem\",\n                fontSize: \"24px\"\n              }}\n            >\n              {getNameOf(chunk)}\n              {transcriptionIcon}\n            </span>\n            {`${toShortTimeStamp(startSeconds)} - ${toShortTimeStamp(\n              endSeconds\n            )}`}\n          </span>\n        </div>\n      }\n      cardStyle={{ ...style, position: \"relative\" }}\n      contentStyle={{ ...style, padding: \"0px 0px 16px 0px\" }}\n    >\n      {children}\n    </SimpleCard>\n  );\n};\n\nexport default ChunkCard;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  videoContainer: {\n    height: \"50%\",\n    minHeight: \"300px\",\n    maxWidth: \"85%\",\n    [theme.breakpoints.up(\"md\")]: {\n      maxWidth: \"50%\",\n    },\n  },\n  videoPlayerContainer: {\n    margin: \"auto\",\n  },\n  actionButton: {\n    \"&:hover\": {\n      background: \"#d9534f\",\n    },\n  },\n  chunksList: {\n    flexWrap: \"nowrap\",\n    overflowX: \"scroll\",\n    height: \"100%\",\n    marginTop: \"5px\",\n  },\n  backButton: {\n    background: \"transparent\",\n    color: \"black\",\n    fontSize: \"16px\",\n  },\n  backButtonContainer: {\n    marginTop: \"4px\",\n    padding: \"0px\",\n  },\n  onboardingTitle: {\n    margin: 0,\n  },\n  chunkCardBody: {\n    position: \"relative\",\n  },\n  newChunkButtonContainer: {\n    position: \"fixed\",\n    right: 0,\n    bottom: 0,\n    zIndex:-2\n    // margin: \"16px 16px 32px 16px\",\n    // display: \"flex\",\n  },\n}));\n\nexport default useStyles;\n","import { useState } from 'react';\n\nexport type ToggleState = [boolean, () => void, (state: boolean) => void]\n\nconst useToggle = (initialValue: boolean): ToggleState => {\n\n    const [state, setState] = useState(initialValue);\n\n    const toggleState = () => setState(s => !s);\n\n    return [state, toggleState, setState];\n}\n\nexport default useToggle;","import { useCallback, useState } from \"react\";\nimport { StateSetter } from \"../utils/types\";\nimport useToggle from \"./useToggle\";\n\nconst useLocalStorage = (key: string, defaultValue?: string): [string | undefined, StateSetter<string | undefined>, () => void] => {\n  // This is the state for the value in the local storage\n  const [state, setState] = useState<string | undefined>(window.localStorage.getItem(key) ?? defaultValue);\n  // State for whether the initial fetch from local storage has been attempted\n  const [fetched, toggleFetched] = useToggle(false);\n\n  if (!fetched) {\n    const item = window.localStorage.getItem(key);\n    toggleFetched();\n    item && setState(item);\n  }\n\n  const setToStorage = useCallback((setter: (string | undefined) | ((oldVal: undefined | string) => string | undefined)) => {\n    if (typeof setter == \"string\" || setter === null) {\n      setState(setter);\n      window.localStorage.setItem(key, setter ?? \"\");\n    } else if (setter) {\n      setState((old_val) => {\n        const new_val = setter(old_val);\n        window.localStorage.setItem(key, new_val ?? \"\");\n        return new_val;\n      })\n    }\n  }, [key]);\n\n  const clearStorage = useCallback(() => {\n      window.localStorage.removeItem(key);\n      setState(undefined);\n  }, [setState, key]);\n\n  return [state, setToStorage, clearStorage];\n};\n\nexport default useLocalStorage;","import { createContext, useMemo } from \"react\";\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\nimport { name_key } from \"../../utils/localStorageKeys\";\nimport { StateSetter } from \"../../utils/types\";\n\ntype UserContextType = {\n  userName: string | undefined;\n  setName: StateSetter<string | undefined>;\n  clearName: () => void;\n};\n\nconst initialValue: UserContextType = {\n  userName: undefined,\n  setName: () => null,\n  clearName: () => null,\n};\n\nexport const UserContext = createContext<UserContextType>(initialValue);\n\nconst UserProvider: React.FC<{}> = ({ children }) => {\n  const [name, setName, clearName] = useLocalStorage(name_key);\n\n  const value = useMemo(\n    () => ({\n      userName: name,\n      setName: setName,\n      clearName: clearName,\n    }),\n    [name, setName, clearName]\n  );\n\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n};\n\nexport default UserProvider;\n","\nexport const name_key = 'name';\n","import { useState } from \"react\";\nimport { State } from \"../utils/types\";\n\n/**\n * Hook for using React state if some external state isn't provided\n */\nconst useDefaultState = <T extends unknown>(optional: State<T> | undefined, defaultState: T) => {\n    const def = useState(defaultState);\n    return optional ?? def;\n}\n\nexport default useDefaultState;","import { makeStyles, Slider, SliderProps } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  progressBarColor: {\n    color: \"#f54414\",\n  },\n  progressBarRoot: {\n    padding: \"0px\",\n    width: \"96%\",\n    transform: \"translateX(2%)\",\n    height: 6,\n  },\n  progressBarRail: {\n    height: 6,\n  },\n  progressBarTrack: {\n    height: 6,\n  },\n  progressBarThumb: {\n    height: 18,\n    width: 18,\n    marginTop: -6,\n  },\n  progressBarMark: {\n    height: 14,\n    marginTop: -3,\n  },\n  markedSlider: {\n    margin: 0,\n  }\n});\n\nconst IndabaSlider: React.FC<SliderProps & { styles?: any }> = ({\n  styles,\n  ...props\n}) => {\n  const classes = useStyles();\n  return (\n    <div style={styles}>\n      <Slider\n        classes={{\n          colorPrimary: classes.progressBarColor,\n          root: classes.progressBarRoot,\n          rail: classes.progressBarRail,\n          track: classes.progressBarTrack,\n          thumb: classes.progressBarThumb,\n          mark: classes.progressBarMark,\n          marked: classes.markedSlider,\n        }}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default IndabaSlider;\n","// External Dependencies\nimport { useState, useEffect, RefObject, useMemo, useCallback } from \"react\";\nimport ReactPlayer, { ReactPlayerProps } from \"react-player\";\nimport { useThrottleCallback } from \"@react-hook/throttle\";\n\n// Internal Dependencies\nimport { StateSetter } from \"../../../utils/types\";\nimport { ProgressState } from \"../VideoPlayer\";\n\nconst useProgressBarControls = (\n  initialValue: number,\n  playerUpdater: (newValue: number) => void\n): {\n  value: number;\n  setWithoutVideoUpdate: (newValue: number) => void;\n  setWithVideoUpdate: (newValue: number) => void;\n} => {\n  const [state, setState] = useState(initialValue);\n\n  const setWithVideoUpdate = useCallback((newValue: number) => {\n      setState(newValue);\n      playerUpdater(newValue);\n    }, [setState, playerUpdater]);\n\n  return {\n    value: state,\n    setWithoutVideoUpdate: setState,\n    setWithVideoUpdate\n  };\n};\n\n/**\n * This hook maintains the logic for the VideoPlayer component.\n *\n * It handles the logic for use intractions with the controls of the video,\n * and the automatic fading for when the video isn't interacted with\n *\n * @param playerRef - a reference to the player that this hook controls\n */\nconst useVideoPlayerProps = (\n  progressState: ProgressState,\n  playStateIn: [play: boolean, setPlay: StateSetter<boolean>],\n  playerRef: RefObject<ReactPlayer>,\n  setDuration: (state: number) => void,\n  /** The beginning and end of the clip of the video to play, as a fraction\n   *  If, for example, start is 0 and end is 0.5, only play the first half of\n   *  the video\n   */\n  split: { start: number; end: number },\n  onProgressDrag?: () => void,\n  loop?: boolean\n): {\n  playerProps: ReactPlayerProps;\n  progressBarProps: any;\n  showControls: boolean;\n  isPlaying: boolean;\n  toggleIsPlaying: () => void;\n} => {\n  const [isPlaying, setIsPlaying] = playStateIn;\n\n  /* State for whether the video source has been loaded */\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  /* State for whether the user is scrolling through the video */\n  const [dragging, setDragging] = useState(false);\n\n  /* State for the progress through the video, as a fraction */\n  const { progress, setProgress, setProgressWithVideoUpdate } = progressState;\n\n  useEffect(() => {\n    if (isLoaded && playerRef.current) {\n      setDuration(playerRef.current.getDuration());\n    }\n  }, [setDuration, playerRef, isLoaded]);\n\n  /* These are the props that will be passed onto the ReactPlayer component */\n  const playerProps: ReactPlayerProps = useMemo(\n    () => ({\n      playing: !dragging && isPlaying,\n      progressInterval: 100,\n      onProgress: ({ played /*playedSeconds, loaded, loadedSeconds*/ }) =>\n        setProgress(played),\n      onReady: () => setIsLoaded(true),\n      onEnded: () => setIsPlaying(false),\n    }),\n    [dragging, isPlaying, setIsPlaying, setProgress]\n  );\n\n  const throttleUpdateVideo = useThrottleCallback(\n    (newVal: number) => setProgressWithVideoUpdate(newVal / 100),\n    10\n  );\n\n  const {\n    value: progressBarValue,\n    setWithVideoUpdate: onScrobble,\n    setWithoutVideoUpdate: updateProgressBar,\n  } = useProgressBarControls(progress * 100, throttleUpdateVideo);\n\n  useEffect(() => {\n    updateProgressBar(progress * 100);\n  }, [progress, updateProgressBar]);\n\n  /* These are the props that will be passed onto the Slider component (the slider component is the video progress bar) */\n  const progressBarProps = useMemo(\n    () => ({\n      value: progressBarValue,\n      min: split.start * 100,\n      max: split.end * 100,\n      step: 0.0001,\n      onChange: (_: any, newVal: number | number[]) => {\n        onProgressDrag && onProgressDrag();\n        setDragging(true);\n        onScrobble(newVal as number);\n      },\n      onChangeCommitted: (_: any, newVal: number | number[]) => {\n        setDragging(false);\n      },\n    }),\n    [progressBarValue, split, onProgressDrag, onScrobble]\n  );\n\n  useEffect(() => {\n    /** If the video is playing and it has reached the end, stop it from continuing */\n    if (progress > split.end + 0.0001) {\n      if (loop && !dragging) {\n        setProgressWithVideoUpdate(split.start);\n      } else {\n        setProgressWithVideoUpdate(split.end);\n        setIsPlaying(false);\n      }\n      /** If the video's progress is before the start of the split, set it to the start */\n    } else if (progress < split.start - 0.0001) {\n      setProgressWithVideoUpdate(split.start + 0.1);\n    }\n  }, [progress, isPlaying, setIsPlaying, split.end, split.start, loop, setProgressWithVideoUpdate, dragging]);\n\n  return {\n    playerProps,\n    progressBarProps,\n    showControls: true,\n    isPlaying,\n    toggleIsPlaying: () => setIsPlaying((s) => !s),\n  };\n};\n\nexport default useVideoPlayerProps;\n","import { Tooltip, ValueLabelProps } from \"@material-ui/core\";\n\nconst ProgressBarLabel: React.FC<ValueLabelProps> = ({\n  children,\n  open,\n  value,\n}) => {\n  return <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>{children}</Tooltip>;\n};\n\nexport default ProgressBarLabel;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  videoControlsContainer: {\n    display: \"flex\",\n    left: \"50%\",\n    position: \"absolute\",\n    bottom: \"50%\",\n    transform: \"translate(-50%, 50%)\",\n  },\n  videoPlayerButton: {\n    // background: \"linear-gradient(45deg, #d9534f 40%, #d9534f 90%)\",\n    borderRadius: \"8px\",\n  },\n  videoControlsRewindButtonsContainer: {\n    position: \"absolute\",\n    bottom: -25,\n    // [theme.breakpoints.up(\"lg\")]: {\n    //   bottom: -10,\n    // },\n  },\n  videoControlsRewindButtonsContainerRight: {\n    right: \"180px\",\n    // [theme.breakpoints.up(\"lg\")]: {\n    //   right: \"130px\",\n    // },\n  },\n  videoControlsRewindButtonsContainerLeft: {\n    left: \"180px\",\n    // [theme.breakpoints.up(\"lg\")]: {\n    //   left: \"130px\",\n    // },\n  },\n  roundButton: {\n    borderRadius: \"50%\",\n    // borderWidth: \"4px\",\n    width: \"128px\",\n    height: \"128px\",\n    // color: \"white\",\n    display: \"relative\",\n    // [theme.breakpoints.up(\"lg\")]: {\n    //   borderRadius: \"10px\",\n    //   width: \"64px\",\n    //   height: \"64px\",\n    // },\n  },\n  videoPlayerContainer: {\n    position: \"relative\",\n    width: \"100vw\",\n    // bottom: 0,\n    top: 0,\n    right: 0,\n    left: 0,\n    // padding: \"20px\",\n  },\n  progressBarContainer: {\n    left: \"0\",\n    bottom: \"0\",\n    marginBottom: \"-39px\",\n    transform: \"translateY(calc(-100% - 16px))\",\n    width: \"100%\",\n  },\n  progressBarColor: {\n    color: \"#f54414\",\n  },\n  progressBarRoot: {\n    padding: \"0px\",\n    width: \"96%\",\n    transform: \"translateX(2%)\",\n    height: 4,\n  },\n  progressBarRail: {\n    height: 4,\n  },\n  progressBarTrack: {\n    height: 4,\n  },\n  progressBarThumb: {\n    height: 12,\n    marginTop: -4,\n  },\n  progressBarMark: {\n    height: 10,\n    marginTop: -3,\n  },\n}));\n\nexport default useStyles;\n","import { Button, Grid, Mark, SliderProps, Typography } from \"@material-ui/core\";\nimport { Forward5, Pause, PlayArrow, Replay5 } from \"@material-ui/icons\";\nimport React, { RefObject, useCallback } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport useDefaultState from \"../../hooks/useDefaultState\";\nimport { toShortTimeStamp } from \"../../utils/chunkManipulation/chunkManipulation\";\nimport { State, StateSetter } from \"../../utils/types\";\nimport IndabaSlider from \"../IndabaSlider/IndabaSlider\";\nimport useVideoPlayerProps from \"./Hooks/useVideoPlayerProps\";\nimport { SplitState } from \"./Hooks/useVideoPlayerState\";\nimport ProgressBarLabel from \"./ProgressBarLabel\";\nimport useStyles from \"./VideoPlayerStyles\";\n\nexport type VideoPlayerControllerType = {\n  /**\n   * State for the duration of the video, in seconds.\n   *\n   * This starts as zero and is updated when the video initially loads\n   */\n  durationState: State<number>;\n  /** State for whether the video is currently playing */\n  playingState: State<boolean>;\n  /**\n   * The caller of this function can choose to present only part of\n   * the source video to the end user, as if it was the whole video.\n   *\n   * To do so, they set this state to be the start and end of the\n   * partial video they want to show as fractions of the video.\n   *\n   * For example: {start: 0, end: 0.5} would present the first\n   * half of the source video to the user as if it were the entire\n   * video\n   */\n  splitState: State<SplitState>;\n};\n\nexport type ProgressState = {\n  /** Progress through the video as a fraction */\n  progress: number;\n  /**\n   * Update the progress without affecting the video player\n   *\n   * This is what the player itself calls each time it progresses,\n   * to inform the outside world of where it is in the video\n   */\n  setProgress: StateSetter<number>;\n  /**\n   * Update the progress in the video, including the player itself\n   *\n   * This is what is called when the user scrobbles through the video-\n   * it updates the internal state of the video player\n   */\n  setProgressWithVideoUpdate: StateSetter<number>;\n};\n\nexport type VideoPlayerProps = {\n  /**\n   * The user of the VideoPlayer component has the option to control the\n   * player, to do so, they need to provide a controller object which has\n   * the state the component requires\n   */\n  controller?: VideoPlayerControllerType;\n  /**\n   * The url of the video\n   */\n  url: string;\n  /**\n   * A reference to the underlying player component. This is used to\n   * subscribe to events such as onProgress\n   */\n  playerRef: RefObject<ReactPlayer>;\n  /**\n   * The external progress state (see type 'ProgressState' for details)\n   */\n  progressState: ProgressState;\n  /**\n   * Marks to put on the video scrobbler slider. This is used to\n   * mark points of significance in the video, for example, the end\n   * of a chunk\n   */\n  sliderMarks?: Mark[];\n  /**\n   * Optional callback for when the user scrolls through the video\n   */\n  onProgressDrag?: () => void;\n  /** Optional override for slider component */\n  slider?: React.ReactElement<SliderProps>;\n  /** If set to true, the video will play again instantlye when it finishes */\n  loop?: boolean;\n};\n\nconst VideoPlayer: React.FC<VideoPlayerProps> = ({\n  url,\n  playerRef,\n  controller,\n  sliderMarks,\n  progressState,\n  onProgressDrag,\n  slider,\n  loop,\n}) => {\n  const classes = useStyles();\n  const [duration, setDuration] = useDefaultState(controller?.durationState, 0);\n  const { progress, setProgressWithVideoUpdate } = progressState;\n  const playState = useDefaultState(controller?.playingState, false);\n  const [split] = useDefaultState(controller?.splitState, {\n    start: 0,\n    end: 1,\n  });\n\n  const {\n    playerProps,\n    progressBarProps,\n    showControls,\n    isPlaying,\n    toggleIsPlaying,\n  } = useVideoPlayerProps(\n    progressState,\n    playState,\n    playerRef,\n    setDuration,\n    split,\n    onProgressDrag,\n    loop\n  );\n\n  const sliderValueLabelFormat = useCallback(\n    (progress: number) => {\n      return toShortTimeStamp(\n        (progress / 100 - split.start === 0\n          ? 0\n          : progress / 100 - split.start) * duration\n      );\n    },\n    [duration, split.start]\n  );\n\n  const skipForwardHandler = useCallback(() => {\n    duration &&\n      setProgressWithVideoUpdate((progress) => progress + 5 / duration);\n  }, [setProgressWithVideoUpdate, duration]);\n\n  const skipBackwardHandler = useCallback(() => {\n    duration &&\n      setProgressWithVideoUpdate((progress) => progress - 5 / duration);\n  }, [setProgressWithVideoUpdate, duration]);\n\n  return (\n    <Grid\n      container\n      item\n      className={classes.videoPlayerContainer}\n      xs={12}\n      alignContent=\"center\"\n      alignItems=\"center\"\n    >\n      <ReactPlayer\n        url={url}\n        ref={playerRef}\n        width=\"100%\"\n        height=\"100%\"\n        loop={loop}\n        {...playerProps}\n      />\n      {showControls && (\n        <div className={classes.videoControlsContainer}>\n          <div\n            className={`${classes.videoControlsRewindButtonsContainer} ${classes.videoControlsRewindButtonsContainerRight}`}\n          >\n            <Button\n              disableRipple\n              variant=\"outlined\"\n              color=\"secondary\"\n              className={` ${classes.roundButton}`}\n              onClick={skipBackwardHandler}\n            >\n              <Replay5 style={{ fontSize: 60 }} />\n            </Button>\n          </div>\n          <Button\n            disableRipple\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.videoPlayerButton}\n            onClick={toggleIsPlaying}\n          >\n            {(isPlaying && <Pause style={{ fontSize: 60 }} />) || (\n              <PlayArrow style={{ fontSize: 60 }} />\n            )}\n          </Button>\n          <div\n            className={`${classes.videoControlsRewindButtonsContainer} ${classes.videoControlsRewindButtonsContainerLeft}`}\n          >\n            <Button\n              onClick={skipForwardHandler}\n              variant=\"outlined\"\n              color=\"secondary\"\n              disableRipple\n              className={`${classes.roundButton}`}\n            >\n              <Forward5 style={{ fontSize: 60 }} />\n            </Button>\n          </div>\n        </div>\n      )}\n      {slider || (\n        <div className={classes.progressBarContainer}>\n          {/* Progress Bar */}\n          <Typography\n            variant=\"caption\"\n            style={{ margin: \"8px\", color: \"#FFFFFF\" }}\n          >\n            {duration &&\n              `${toShortTimeStamp(\n                (progress - split.start) * duration\n              )} / ${toShortTimeStamp((split.end - split.start) * duration)}`}\n          </Typography>\n          <IndabaSlider\n            valueLabelDisplay=\"auto\"\n            valueLabelFormat={sliderValueLabelFormat}\n            ValueLabelComponent={ProgressBarLabel}\n            marks={sliderMarks ? sliderMarks : []}\n            {...progressBarProps}\n          />\n        </div>\n      )}\n    </Grid>\n  );\n};\n\nexport default VideoPlayer;\n","import { RefObject, useCallback, useRef, useState } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport { State } from \"../../../utils/types\";\nimport { ProgressState, VideoPlayerControllerType } from \"../VideoPlayer\";\nimport { SplitState } from \"./useVideoPlayerState\";\n\n/**\n * This hook is used for when the user of the VideoPlayer component wants to\n * be able to externally control the state of the player. It provides the means\n * to read and write progress and playing states, read the duration state and\n * the controller object to be passed to the VideoPlayer component.\n * \n * So basically, this hook gives a VideoPlayer's parent component the option\n * to get access and control to it's state\n */\nconst useVideoPlayerController = (autoPlay?: boolean): {\n  /** The progress through the video */\n  progressState: ProgressState;\n  /** The state for whether the video is currently playin */\n  playingState: State<boolean>;\n  /**\n   * State for for where the video is 'split'\n   *\n   * Callers of this hook can control the video such that only\n   * a portion of it is presented to the user, as if that portion\n   * was the entire video.\n   * \n   * For example, if the split state is {start: 0, end: 0.5},\n   * only the first half of the video will be presented to the user,\n   * however, it will seem to the user that that is the entire video\n   */\n  splitState: State<SplitState>;\n  /**\n   * The duration of the video, fetched asynchronously from the ReactPlayer component,\n   * so it's initially 0, and is set by this hook to the correct duration (in seconds)\n   * when the video component initially loads\n   */\n  duration: number;\n  /**\n   * The controller itself, this should be passed to\n   * the VideoPlayer component 'controller' prop\n   */\n  controller: VideoPlayerControllerType;\n  /** \n   * A ReactPlayer ref, to be passed to\n   * the VideoPlayer component 'playerRef' prop\n   */\n  playerRef: RefObject<ReactPlayer>;\n} => {\n  const playerRef = useRef<ReactPlayer>(null);\n\n  const updatePlayerProgress = useCallback((newVal: number) => {\n    const secondsLoaded = playerRef?.current?.getSecondsLoaded()\n    secondsLoaded && secondsLoaded > 0 && playerRef.current?.seekTo(newVal, \"fraction\");\n  }, []);\n\n  const [progress, setProgress] = useState(0);\n\n  const splitState = useState<SplitState>({ start: 0, end: 1 });\n\n  const setProgressWithVideoUpdate = useCallback((\n    progressSetter: number | ((prevProgress: number) => number)\n  ) => {\n    if (typeof progressSetter === \"number\") {\n      setProgress(progressSetter);\n      updatePlayerProgress(progressSetter);\n    } else {\n      setProgress((prevVal) => {\n        const newVal = progressSetter(prevVal)\n        updatePlayerProgress(newVal);\n        return newVal;\n      });\n    }\n  }, [updatePlayerProgress]);\n\n  const [duration, setDuration] = useState(0);\n\n  const playingState = useState(autoPlay ?? false);\n\n  return {\n    progressState: { progress, setProgress, setProgressWithVideoUpdate },\n    splitState,\n    playingState,\n    duration,\n    controller: {\n      durationState: [duration, setDuration],\n      playingState,\n      splitState,\n    },\n    playerRef,\n  };\n};\n\nexport default useVideoPlayerController;\n","/**\n * Given an array and a binary function,\n * Return a new array that is the result of calling the function\n * on adjacent items in the array\n */\nconst adjacentMap = <T extends unknown>(\n  arr: T[],\n  func: (a: T, b: T) => T\n): T[] =>\n  arr\n    .reduce(\n      (acc: [T, T][], val, ind, input) =>\n        ind + 1 < input.length ? acc.concat([[val, input[ind + 1]]]) : acc,\n      []\n    )\n    .map((pair) => func(pair[0], pair[1]));\n\nexport default adjacentMap;\n","\n/**\n * Given an array and a predicate,\n * returns true if any of the array's elements satisfies the predicate,\n * otherwise, returns false\n * \n * @param arr the array to search\n * @param pred the predicate to test for\n */\nconst oneSatisfies = <T extends unknown>(\n  arr: T[],\n  pred: (val: T) => boolean\n): boolean => arr.filter(pred).length > 0;\n\nexport default oneSatisfies;\n","// External Dependencies\nimport { useCallback } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Internal Dependencies\nimport adjacentMap from \"../adjacentMap\";\nimport {\n  getAdjacentChunks,\n  getEnclosingChunk,\n  getLastEndTimeSeconds,\n  getLastEndTimeStamp,\n  invalidSplit,\n  toTimeStamp,\n  removeReview,\n  getTranscriptionByCreator,\n  renameChunk,\n  deleteNegativeChunks,\n} from \"../chunkManipulation/chunkManipulation\";\nimport oneSatisfies from \"../oneSatisfies\";\nimport { Chunk, Transcription } from \"../types\";\n\n/**\n * Get a function for deleting chunks\n */\nexport const useDeleteChunk = (\n  setChunks: (setter: (newState: Chunk[]) => Chunk[]) => void\n): ((toDelete: Chunk) => void) => {\n  /**\n   * Delete a chunk from the chunks in the ChunksContext\n   *\n   * @param toDelete - the chunk to delete\n   */\n  const deleteFn = useCallback(\n    (toDelete: Chunk) => {\n      // console.log(setChunks);\n      return setChunks((chunks) => {\n        /*\n                This call to adjacentMap is checking if, after deleting the chunk, there\n                is a gap in the chunks. If so, we need to create a new chunk that closes\n                the gap\n          \n                At a high level:\n                If we have chunks A B C D, and we delete chunk B we now have a gap\n                between chunks A and C. To fix this, we need to create a new chunk\n                that has the same start time as A and the same end time as C,\n                so we end up with: E D, where E is a new chunk that we create in this\n                call to adjacentMap\n                */\n        // console.log(\"deleting chunk: \", toDelete);\n        // console.log(\"Before filter: \", chunks.length);\n        // console.log(\n        //   \"After filter: \",\n        //   chunks.filter((c) => c.id !== toDelete.id).length\n        // );\n        return adjacentMap(\n          chunks.filter((c) => c.id !== toDelete.id),\n          (a: Chunk, b: Chunk) => {\n            if (a.endtimeseconds !== b.starttimeseconds) {\n              return {\n                ...b,\n                starttimeseconds: a.endtimeseconds,\n                starttimestamp: a.endtimestamp,\n                id: uuidv4(),\n                updatedat: new Date(),\n                transcriptions: [],\n              };\n            }\n            return b;\n          }\n        )\n          .concat(\n            ((first) =>\n              first\n                ? first.starttimeseconds === 0\n                  ? [first]\n                  : [\n                      {\n                        ...first,\n                        starttimeseconds: 0,\n                        starttimestamp: \"00:00:00:00\",\n                        id: uuidv4(),\n                        updatedat: new Date(),\n                        transcriptions: [],\n                      },\n                    ]\n                : [])(chunks.filter((c) => c.id !== toDelete.id)[0])\n          )\n          .sort((a, b) => a.endtimeseconds - b.endtimeseconds);\n        /*\n          This call to adjacentMap is checking if, after deleting the chunk, there\n          is a gap in the chunks. If so, we need to create a new chunk that closes\n          the gap\n        \n          At a high level:\n          If we have chunks A B C D, and we delete chunk B we now have a gap\n          between chunks A and C. To fix this, we need to create a new chunk\n          that has the same start time as A and the same end time as C,\n          so we end up with: E D, where E is a new chunk that we create in this\n          call to adjacentMap\n          */\n      });\n    },\n    [setChunks]\n  );\n\n  return deleteFn;\n};\n\n/**\n * Get a function for creating new chunks\n */\nexport const useNewChunk = (\n  setChunks: (setter: (newState: Chunk[]) => Chunk[]) => void\n): ((splitAt: number, storyDuration: number, userName: string) => void) => {\n  /**\n   * This function creates a new chunk in the video.\n   * Invalid chunks are defined by the invalidSplit function and will not be created\n   *\n   * @param splitAt - the point in the video (as a fraction) where the new chunk should end\n   * @param storyDuration - the length of the video being chunked\n   * @param userName - the name of the user doing the chunking\n   */\n  const newChunkFn = useCallback(\n    (splitAt: number, storyDuration: number, userName: string) => {\n      setChunks((chunks) => {\n        if (invalidSplit(chunks, splitAt, storyDuration)) {\n          return chunks;\n        }\n        const enclosingChunk = getEnclosingChunk(chunks, splitAt);\n        if (enclosingChunk !== undefined) {\n          const newChunks = chunks\n            .filter((c) => c.id !== enclosingChunk.id)\n            .concat([\n              {\n                starttimestamp: enclosingChunk.starttimestamp,\n                starttimeseconds: enclosingChunk.starttimeseconds,\n                endtimestamp: toTimeStamp(splitAt * storyDuration),\n                endtimeseconds: splitAt,\n                creatorid: userName,\n                updatedat: new Date(),\n                id: uuidv4(),\n                transcriptions: [],\n              },\n              {\n                starttimestamp: toTimeStamp(splitAt * storyDuration),\n                starttimeseconds: splitAt,\n                endtimestamp: enclosingChunk.endtimestamp,\n                endtimeseconds: enclosingChunk.endtimeseconds,\n                creatorid: userName,\n                updatedat: new Date(),\n                id: uuidv4(),\n                transcriptions: [],\n              },\n            ])\n            .sort((a, b) => a.endtimeseconds - b.endtimeseconds);\n          return newChunks;\n        } else {\n          const newChunks = chunks.concat([\n            {\n              starttimestamp: getLastEndTimeStamp(chunks),\n              endtimestamp: toTimeStamp(splitAt * storyDuration),\n              starttimeseconds: getLastEndTimeSeconds(chunks),\n              endtimeseconds: splitAt,\n              creatorid: userName,\n              updatedat: new Date(),\n              id: uuidv4(),\n              transcriptions: [],\n            },\n          ]);\n\n          return newChunks;\n        }\n      });\n    },\n    [setChunks]\n  );\n\n  return newChunkFn;\n};\n\n/**\n * Get a function for updating a chunks transcription\n * list. Passing an empty string as 'updatedTranscription' deletes the transcription\n */\nexport const useUpdateTranscription = (\n  setChunks: (setter: (newState: Chunk[]) => Chunk[]) => void\n): ((\n  toUpdate: Chunk,\n  updatedTranscription: string,\n  userName: string\n) => void) => {\n  const updateFunction = useCallback(\n    (toUpdate: Chunk, updatedTranscription: string, userName: string) => {\n      setChunks((chunks) => {\n        const newChunks = chunks.map((chunk) =>\n          chunk.id === toUpdate.id\n            ? {\n                ...(chunk.review?.selectedtranscription ===\n                  getTranscriptionByCreator(chunk, userName)?.id &&\n                updatedTranscription === \"\"\n                  ? removeReview(chunk)\n                  : chunk),\n                /* This call to oneSatisfies checks if the current user has\n                 * already made a transcription for this chunk (in that case,\n                 * update that chunk instead of creating a new one)\n                 */\n                transcriptions: oneSatisfies(\n                  chunk.transcriptions,\n                  (t) => t.creatorid === userName\n                )\n                  ? /* The ternary here is to delete a transcription if a user has a transcription but is now transcribing an empty string */\n                    updatedTranscription === \"\"\n                    ? chunk.transcriptions.filter(\n                        (t) => t.creatorid !== userName\n                      )\n                    : chunk.transcriptions.map((t) =>\n                        t.creatorid === userName\n                          ? {\n                              ...t,\n                              content: updatedTranscription,\n                              updatedat: new Date(),\n                            }\n                          : t\n                      )\n                  : /* The ternary here is to avoid adding empty transcriptions */\n                    chunk.transcriptions.concat(\n                      updatedTranscription === \"\"\n                        ? []\n                        : [\n                            {\n                              creatorid: userName,\n                              content: updatedTranscription,\n                              id: uuidv4(),\n                              updatedat: new Date(),\n                            },\n                          ]\n                    ),\n              }\n            : chunk\n        );\n        return newChunks;\n      });\n    },\n    [setChunks]\n  );\n\n  return updateFunction;\n};\n\n/**\n * Get a function for updating the Review of a Chunk\n */\nexport const useUpdateReview = (\n  setChunks: (setter: (newState: Chunk[]) => Chunk[]) => void\n): ((\n  toUpdate: Chunk,\n  selectedTranscription: Transcription,\n  userName: string\n) => void) => {\n  const updateFn = useCallback(\n    (\n      toUpdate: Chunk,\n      selectedTranscription: Transcription,\n      userName: string\n    ) => {\n      setChunks((chunks) =>\n        chunks.map((chunk) =>\n          chunk.id === toUpdate.id\n            ? /*\n               * This call to oneSatisfies simply checks if the\n               * selectedTranscription exists on the Chunk\n               * (if it doesn't, don't update the chunk)\n               */\n              oneSatisfies(\n                chunk.transcriptions,\n                (a) => a.id === selectedTranscription.id\n              )\n              ? {\n                  ...chunk,\n                  review: {\n                    reviewedat: new Date(),\n                    selectedtranscription: selectedTranscription.id,\n                    reviewedby: userName,\n                  },\n                }\n              : chunk\n            : chunk\n        )\n      );\n    },\n    [setChunks]\n  );\n\n  return updateFn;\n};\n\n/**\n * Get a function for deleting the Review of a Chunk\n */\nexport const useDeleteReview = (\n  setChunks: (setter: (newState: Chunk[]) => Chunk[]) => void\n): ((toDelete: Chunk) => void) => {\n  const deleteFn = useCallback(\n    (toDelete: Chunk) => {\n      setChunks((chunks) =>\n        chunks.map((chunk) =>\n          chunk.id === toDelete.id ? { ...chunk, review: undefined } : chunk\n        )\n      );\n    },\n    [setChunks]\n  );\n\n  return deleteFn;\n};\n\n/**\n * Hook for getting a function for cropping a chunk\n *\n * This involves modifying the start and end times\n * of the cropped chunk as well as the chunks on either\n * side of the chunk.\n *\n * The user may also, optionally, rename the chunk using\n * this action\n */\nexport const useCropChunk = (\n  setChunks: (setter: (newState: Chunk[]) => Chunk[]) => void\n): ((\n  toUpdate: Chunk,\n  storyDuration: number,\n  newSplit: [number, number],\n  userName: string,\n  newName?: string | undefined\n) => void) => {\n  const cropFn = useCallback(\n    (\n      toUpdate: Chunk,\n      storyDuration: number,\n      newSplit: [number, number],\n      userName: string,\n      newName?: string\n    ) => {\n      setChunks((chunks) => {\n        const neighbouringChunks = getAdjacentChunks(toUpdate, chunks);\n        return deleteNegativeChunks(\n          chunks\n            .map((chunk) =>\n              chunk.id === toUpdate.id\n                ? {\n                    ...(newName\n                      ? renameChunk(newName, chunk)\n                      : { ...chunk, name: undefined }),\n                    starttimeseconds: newSplit[0],\n                    starttimestamp: toTimeStamp(newSplit[0] * storyDuration),\n                    endtimeseconds: newSplit[1],\n                    endtimestamp: toTimeStamp(newSplit[1] * storyDuration),\n                    updatedat: new Date(),\n                  }\n                : chunk.id === neighbouringChunks.next?.id\n                ? {\n                    ...chunk,\n                    starttimeseconds: newSplit[1],\n                    starttimestamp: toTimeStamp(newSplit[1] * storyDuration),\n                    updatedat: new Date(),\n                  }\n                : chunk.id === neighbouringChunks.prev?.id\n                ? {\n                    ...chunk,\n                    endtimeseconds: newSplit[0],\n                    endtimestamp: toTimeStamp(newSplit[0] * storyDuration),\n                    updatedat: new Date(),\n                  }\n                : chunk\n            )\n            /*\n             * This is the case where the chunk the user is editing is the first\n             * chunk, and they are editing it so that it doesn't start at the very\n             * start. In this case, we need a new chunk to cover this gap\n             */\n            .concat(\n              !neighbouringChunks.prev && newSplit[0] !== 0\n                ? [\n                    {\n                      starttimestamp: toTimeStamp(0),\n                      starttimeseconds: 0,\n                      endtimestamp: toTimeStamp(newSplit[0] * storyDuration),\n                      endtimeseconds: newSplit[0],\n                      creatorid: userName,\n                      updatedat: new Date(),\n                      id: uuidv4(),\n                      transcriptions: [],\n                    },\n                  ]\n                : []\n            )\n        ).sort((a, b) => a.endtimeseconds - b.endtimeseconds);\n      });\n    },\n    [setChunks]\n  );\n\n  return cropFn;\n};\n\n/**\n * Hook to get a function that accepts a function\n * and calls that function with the latest chunks\n * according to the server\n */\nexport const useDoWithChunks = (\n  setChunks: (setter: (newState: Chunk[]) => Chunk[]) => void\n): ((doWith: (chunks: Chunk[]) => void) => void) => {\n  const doWithFn = useCallback(\n    (doWith: (chunks: Chunk[]) => void) => {\n      setChunks((chunks) => {\n        doWith(chunks);\n        return chunks;\n      });\n    },\n    [setChunks]\n  );\n\n  return doWithFn;\n};\n","import { createContext, useContext } from \"react\";\nimport { Chunk } from \"../types\";\n\ntype StateType = [Chunk[], (setter: (newState: Chunk[]) => Chunk[]) => void]\n\nconst ChunksContext = createContext<\n  StateType\n>([[], () => null]);\n\ntype ChunksContextType = React.FC<{\n  state: StateType;\n}>;\n\nconst makeChunksContext = (): {\n  ChunksProvider: ChunksContextType;\n  useChunksState: () => [\n    Chunk[],\n    (setter: (newState: Chunk[]) => Chunk[]) => void\n  ];\n} => {\n  const ChunksProvider: React.FC<{ state: StateType }> = ({\n    state,\n    children,\n  }) => {\n    return (\n      <ChunksContext.Provider value={state}>{children}</ChunksContext.Provider>\n    );\n  };\n  const useChunksState = () => useContext(ChunksContext);\n  return { ChunksProvider, useChunksState };\n};\n\nconst chunksContext = makeChunksContext();\n\nexport default chunksContext;\n","import { Button, ButtonProps, makeStyles } from \"@material-ui/core\";\n\nconst useButtonStyles = makeStyles({\n  button: (round) => ({\n    backgroundColor: \"#d9534f\",\n    color: \"#FFFFFF\",\n    lineHeight: \"34px\",\n    minHeight: (round)?\"4.5rem\":\"3.5rem\",\n    marginLeft:'1em',\n    marginRight:'1em',\n    width: round ? '4.5rem':'inherit',\n    borderRadius: round ? \"50%\" : \"8px\",\n    padding: round ? \"4px\" : \"3px 8px 3px 8px\",\n    textTransform: \"none\",\n    '&:hover': {\n      backgroundColor: \"#ff7570\",\n    },\n    '&:disabled': {\n      backgroundColor: \"#fabbb9\",\n    }\n  }),\n});\n\nconst useStyleClass = (styles: any | undefined) => makeStyles({ overrideStyles: { ...styles }});\n\nconst IndabaButton: React.FC<\n  ButtonProps & { round?: boolean; styles?: any }\n> = ({ children, round, styles, ...props }) => {\n  const overrideClass = useStyleClass(styles)()\n\n  const classes = useButtonStyles(!!round);\n\n  return (\n    <Button disableRipple className={`${classes.button} ${overrideClass.overrideStyles} ${props.style}`} {...props}>\n      {children}\n    </Button>\n  );\n};\n\nexport default IndabaButton;\n","import { Paper } from '@material-ui/core';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\nimport React from 'react';\n\nconst FlatPaper: React.FC<{ style?: CSSProperties }> = React.forwardRef(({ children, style }, ref) => {\n    return (\n        <Paper ref={ref} elevation={0} style={style}>\n            {children}\n        </Paper>\n    );\n});\n\nexport default FlatPaper;","import {\n  Button,\n  Container,\n  DialogContent,\n  makeStyles,\n  Modal,\n  Divider,\n  ModalProps,\n} from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport React, { ReactElement } from \"react\";\nimport FlatPaper from \"../FlatPaper/FlatPaper\";\n\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  modalContentBox: {\n   \n  },\n  modalPaper: {\n    maxWith: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      maxWidth: \"70%\",\n    },\n  }\n}));\n\ntype CentralModalProps = ModalProps & {\n  exit?: () => void;\n  header?: ReactElement;\n};\n\nconst CentralModal: React.FC<CentralModalProps> = ({\n  children,\n  header,\n  exit,\n  ...props\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Modal className={classes.modal} {...props}>\n      <DialogContent style={{ outline: \"none\" }} className={classes.modalPaper}>\n        <FlatPaper >\n          {header && (\n            <Container>\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"space-between\",\n                  paddingTop: \"8px\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    alignContent: \"center\",\n                    width: \"80%\",\n                  }}\n                >\n                  {header}\n                </div>\n                <Button onClick={exit} style={{marginRight:\"-20px\"}}>\n                  <Close />\n                </Button>\n              </div>\n            </Container>\n          )}\n          <Divider style={{marginTop:'8px'}} />\n          <div className={classes.modalContentBox}>{children}</div>\n        </FlatPaper>\n      </DialogContent>\n    </Modal>\n  );\n};\n\nexport default CentralModal;\n","import { useState, useCallback } from \"react\";\n\nexport enum NotAttemptingAction { True }\n\n/**\n * This hook allows the caller to insert some functionality before an\n * action is performed. It's main use case is to allow a confirmation\n * modal to warn users about some action before they perform that action.\n * \n * For example - deleting sensitive data.\n * \n * The condition is called everytime the user attempts the action, and,\n * if the condition is met, the action is delayed, until confirmAction()\n * is called (or cancelAction())\n * \n * @param action the action to perform\n * @param condition the condition to check before completing the action\n */\nconst useConfirmBeforeAction = <T extends any[]>(\n  action: (...args: T) => void,\n  condition: (...args: T) => boolean\n): {\n  /**\n   * A list of the parameters that the action has been called with.\n   * This is also a way for the caller to check if the action has been\n   * attempted - any time the action has been attempted, this won't be\n   * undefined (unless the action was attempted with undefined)\n   */\n  attemptingActionWith: NotAttemptingAction | T;\n  /**\n   * Cancel the action - effectively making the original call to\n   * attemptAction() a no-op\n   */\n  cancelAction: () => void;\n  /**\n   * Attempt the action\n   */\n  attemptAction: (...args: T) => void;\n  /**\n   * Confirm the action - this is a no-op if attemptingActionWith\n   * is undefined\n   */\n  confirmAction: () => void;\n} => {\n  const [attemptingActionWith, setAttemptingActionWith] = useState<\n    NotAttemptingAction | T\n  >(NotAttemptingAction.True);\n\n  const confirmAction = useCallback(() => {\n    if (attemptingActionWith !== NotAttemptingAction.True) {\n      action(...attemptingActionWith);\n      setAttemptingActionWith(NotAttemptingAction.True);\n    }\n  }, [attemptingActionWith, action]);\n\n  return {\n    attemptingActionWith,\n    cancelAction: () => setAttemptingActionWith(NotAttemptingAction.True),\n    attemptAction: (...args: T) =>\n      condition(...args) ? setAttemptingActionWith(args) : action(...args),\n    confirmAction,\n  };\n};\n\nexport default useConfirmBeforeAction;","import React, {\n  useState,\n  useEffect,\n  ChangeEvent,\n  FormEvent,\n} from \"react\";\nimport { api_base_address } from \"../../utils/getApiKey\";\nimport { Chunk, State } from \"../../utils/types\";\nimport IndabaSlider from \"../IndabaSlider/IndabaSlider\";\nimport useVideoPlayerController from \"../VideoPlayer/Hooks/useVideoPlayerController\";\nimport VideoPlayer from \"../VideoPlayer/VideoPlayer\";\n\nimport useStyles from \"../VideoPlayer/VideoPlayerStyles\";\n\nconst CropThumbComponent: React.FC<{}> = (props) => {\n  const isProgressThumb = (props as any)[\"data-index\"] === 1;\n  return (\n    <span\n      {...props}\n      style={{\n        ...(props as any).style,\n        transform: isProgressThumb ? \"0\" : \"translateY(35px)\",\n        backgroundColor: !isProgressThumb ? \"green\" : \"#d9534f\",\n      }}\n    >\n      {!isProgressThumb ? (\n        <div\n          style={{\n            height: \"46px\",\n            width: \"4px\",\n            transform: \"translateY(-15px)\",\n            backgroundColor: \"green\",\n          }}\n        />\n      ) : null}\n    </span>\n  );\n};\n\ntype ChunkCropperProps = {\n  story_id: string,\n  chunk: Chunk;\n  storyDuration: number;\n  croppedSplitState: State<[number, number]>;\n};\n\nconst ChunkCropper: React.FC<ChunkCropperProps> = ({\n  story_id,\n  chunk,\n  storyDuration,\n  croppedSplitState,\n}) => {\n  \n  const {\n    progressState: cropPlayerProgressState,\n    controller: cropPlayerController,\n    playerRef: cropperPlayerRef\n  } = useVideoPlayerController();\n\n  const [videoSplit, setVideoSplit] = useState([0, 0] as [number, number]);\n  const [croppedSplit, setCroppedSplit] = croppedSplitState;\n\n  const { setProgressWithVideoUpdate } = cropPlayerProgressState;\n\n  /* Set initial state based on props  */\n  useEffect(() => {\n    setProgressWithVideoUpdate(chunk.starttimeseconds);\n    const start = chunk.starttimeseconds - 2 / storyDuration;\n    const end = chunk.endtimeseconds + 2 / storyDuration;\n    setVideoSplit([start < 0 ? 0 : start, end > 1 ? 1 : end]);\n    setCroppedSplit([chunk.starttimeseconds, chunk.endtimeseconds]);\n  }, [chunk.starttimeseconds, chunk.endtimeseconds, storyDuration, setProgressWithVideoUpdate, setCroppedSplit]);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (cropPlayerProgressState.progress > croppedSplit[1]) {\n      setProgressWithVideoUpdate(croppedSplit[0])\n    }\n  }, [croppedSplit, cropPlayerProgressState, setProgressWithVideoUpdate]);\n\n  return (\n    <div>\n      <VideoPlayer\n        progressState={cropPlayerProgressState}\n        url={`${api_base_address}/api/watch/getvideo/${story_id}`}\n        controller={cropPlayerController}\n        playerRef={cropperPlayerRef}\n        slider={\n          <div className={classes.progressBarContainer}>\n          <IndabaSlider\n            value={[\n              croppedSplit[0] * 100,\n              cropPlayerProgressState.progress * 100,\n              croppedSplit[1] * 100,\n            ]}\n            min={videoSplit[0] * 100}\n            max={videoSplit[1] * 100}\n            step={0.0001}\n            ThumbComponent={CropThumbComponent}\n            onChange={\n              ((_: any, newValue: number | number[]) => {\n                // console.log(_);\n                setCroppedSplit([\n                  (newValue as number[])[0] / 100,\n                  (newValue as number[])[2] / 100,\n                ]);\n\n                // let handle = _.target.dataset.index;\n                // console.log(_);\n                // console.log(handle);\n                \n                let moveTo:number = (newValue as number[])[1] / 100;\n                \n                // if (handle >= 0 && handle < 3) \n                //   moveTo = (newValue as number[])[handle] / 100;\n                // if (handle == 0)\n\n                // console.log(moveTo)\n\n                // if ((newValue as number[])[0] < (newValue as number[])[1])\n                  // moveTo = (newValue as number[])[0] / 100;\n                // if (handle === 1 || handle === undefined)\n                cropPlayerProgressState.setProgressWithVideoUpdate(moveTo);\n              }) as ((\n                event: ChangeEvent<{}>,\n                value: number | number[]\n              ) => void) &\n                ((event: FormEvent<HTMLSpanElement>) => void)\n            }\n          />\n          </div>\n        }\n      />\n    </div>\n  );\n};\n\nexport default ChunkCropper;\n","// External Dependencies\nimport { TextField } from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useCropChunk } from \"../../utils/ChunksContext/chunksActions\";\nimport chunksContext from \"../../utils/ChunksContext/chunksContext\";\nimport { getNameOf } from \"../../utils/chunkManipulation/chunkManipulation\";\n\n// Internal Dependencies\nimport { Chunk, State } from \"../../utils/types\";\nimport CentralModal from \"../CentralModal/CentralModal\";\nimport ChunkCropper from \"../ChunkEditor/ChunkCropper\";\nimport { UserContext } from \"../UserProvider/UserProvider\";\n\nconst ChunkNameEditor: React.FC<{ nameState: State<string> }> = ({\n  nameState: [name, setName],\n}) => {\n  return (\n    <TextField\n      variant=\"outlined\"\n      label=\"Edit Name\"\n      style={{ marginTop: \"8px\", width: \"100%\" }}\n      value={name}\n      onChange={(e) => setName(e.target.value)}\n    />\n  );\n};\n\nconst EditChunkModal: React.FC<{\n  story_id: string,\n  chunk: Chunk | undefined;\n  exit: () => void;\n  storyDuration: number;\n}> = ({ story_id, chunk, exit, storyDuration }) => {\n  const [name, setName] = useState(\"\");\n\n  const [, setChunks] = chunksContext.useChunksState();\n\n  // useEffect(() => {\n  //   chunk && setName(chunk.name ? chunk.name : \"\");\n  // }, [chunk]);\n\n  const cropChunk = useCropChunk(setChunks);\n\n  const [newCropSplit, setNewCropSplit] = useState<[number, number]>([0, 0]);\n\n  const { userName } = useContext(UserContext);\n\n  return (\n    <CentralModal\n      exit={() => {\n        chunk && userName && cropChunk(chunk, storyDuration, newCropSplit, userName, name);\n        exit();\n      }}\n      open={chunk !== undefined}\n      header={ <h2\n        style={{ margin: 0, overflowWrap: \"anywhere\" }}\n      >Editing {chunk && getNameOf(chunk)}</h2>}\n    >\n      <div style={{paddingBottom: \"50px\"}}>\n        {chunk && <ChunkCropper story_id={story_id} croppedSplitState={[newCropSplit, setNewCropSplit]} storyDuration={storyDuration} chunk={chunk} />}\n      </div>\n    </CentralModal>\n  );\n};\n\nexport default EditChunkModal;\n","import { useRef } from \"react\";\nimport ReactPlayer from \"react-player\";\n\ntype VideoThumbnailProps = {\n  url: string;\n  time: number;\n};\n\n/*\n * TODO - Find a better solution for this, this solution is resource intensive as it\n * loads a whole video component just to use a single frame...\n */\nconst VideoThumbnail: React.FC<VideoThumbnailProps> = ({ url, time }) => {\n  const playerRef = useRef<ReactPlayer>(null);\n  // const [screenshot, setScreenshot] = useState<null | HTMLVideoElement >(null);\n\n  // useEffect(() => {\n  //   const video = document.createElement(\"video\");\n  //   video.crossOrigin = \"anonymous\";\n  //   video.src = url;\n  //   video.addEventListener(\"loadeddata\", () => {\n  //     video.currentTime = time;\n  //     setScreenshot(video);\n  //   });\n  // }, []);\n\n  // return screenshot ? (\n  //   <div>{screenshot}</div>\n  // ) : <div>Loading</div>\n  return (\n    <ReactPlayer\n      crossOrigin=\"anonymous\"\n      url={url}\n      width=\"100%\"\n      height=\"100%\"\n      playing={false}\n      ref={playerRef}\n      id={\"video-thumbnail-player\"}\n      onReady={() => {\n        playerRef.current?.seekTo(time, \"fraction\");\n      }}\n      \n    />\n  );\n};\n\nexport default VideoThumbnail;\n","import { Fab, makeStyles } from \"@material-ui/core\";\n// import LocalizedStrings from \"react-localization\";\nimport { ChevronLeft } from \"@material-ui/icons\";\nimport React from \"react\";\n\n// const strings = new LocalizedStrings({\n//   en: {\n//     back: \"Back\",\n//   },\n// });\n\nconst useStyles = makeStyles({\n  backButton: {\n    // marginTop:'-1em',\n    // marginLeft:'28px',\n    position:'fixed',\n    top:'8px',\n    left:'8px',\n    // marginBottom:'1.5em'\n  },\n});\n\ntype BackButtonProps = {\n  action: () => void;\n};\n\nconst BackButton: React.FC<BackButtonProps> = ({ action }) => {\n  const classes = useStyles();\n\n  return (\n    // <ButtonBase className={classes.backButton} onClick={action}>\n    <Fab onClick={action} className={classes.backButton}>\n      <ChevronLeft fontSize=\"large\" />\n      {/* <Typography variant=\"h5\" style={{ position: \"relative\", left: -5 }}>\n        {strings.back}\n      </Typography> */}\n    {/* </ButtonBase> */}\n    </Fab>\n  );\n};\n\nexport default BackButton;\n","import { Warning } from \"@material-ui/icons\";\nimport React, { ReactNode } from \"react\";\n\ntype WarningMessageProps = {\n  message: string | ReactNode;\n};\n\nconst WarningMessage: React.FC<WarningMessageProps> = ({ message }) => {\n  return (\n    <h2 style={{ margin: 0 }}>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Warning style={{ marginRight: \"8px\" }} fontSize=\"large\" />\n        {message}\n      </div>\n    </h2>\n  );\n};\n\nexport default WarningMessage;\n","import { Typography,Divider,Button } from \"@material-ui/core\";\n// import { Delete } from \"@material-ui/icons\";\nimport React, { PropsWithChildren, ReactElement } from \"react\";\nimport { NotAttemptingAction } from \"../../hooks/useConfirmBeforeAction\";\nimport CentralModal from \"../CentralModal/CentralModal\";\n// import IndabaButton from \"../IndabaButton/IndabaButton\";\nimport WarningMessage from \"../WarningMessage/WarningMessage\";\n\ntype ConfirmIntentModalProps<T extends any[]> = {\n  actionControls: {\n    attemptingActionWith: T | NotAttemptingAction;\n    cancelAction: () => void;\n    confirmAction: () => void;\n  };\n  warningMessage: ReactElement;\n  children: (...args: T) => ReactElement;\n};\nconst ConfirmIntentModal = <T extends any[]>(\n  props: PropsWithChildren<ConfirmIntentModalProps<T>>\n) => {\n  const { actionControls, warningMessage, children } = props;\n\n  const { attemptingActionWith, cancelAction, confirmAction } = actionControls;\n\n  return (\n    <CentralModal\n      open={attemptingActionWith !== NotAttemptingAction.True}\n      exit={cancelAction}\n      header={<WarningMessage message={warningMessage} />}\n    >\n      <div style={{padding:'8px'}}>\n        {attemptingActionWith !== NotAttemptingAction.True &&\n          children(...attemptingActionWith)}\n        <br />\n        <Divider variant=\"fullWidth\" style={{marginLeft:'-8px',marginRight:'-8px'}} />\n        <div style={{ display: \"flex\", justifyContent: \"end\", margin:'4px', marginBottom:'0'}}>\n          <Button variant=\"text\" onClick={confirmAction}>\n          <Typography variant=\"subtitle1\">Confirm</Typography>\n            </Button>\n          {/* <IndabaButton style={{ marginTop: \"8px\" }} onClick={confirmAction}> */}\n            {/* <Delete fontSize=\"large\" style={{ marginRight: \"8px\" }} /> */}\n            {/* <Typography variant=\"subtitle1\">Confirm</Typography> */}\n          {/* </IndabaButton> */}\n        </div>\n      </div>\n    </CentralModal>\n  );\n};\n\nexport default ConfirmIntentModal;\n","import React from \"react\";\nimport { getNameOf } from \"../../utils/chunkManipulation/chunkManipulation\";\nimport { Chunk } from \"../../utils/types\";\nimport CentralModal from \"../CentralModal/CentralModal\";\nimport SimpleCard from \"../SimpleCard/SimpleCard\";\n// import { Card, Divider } from \"@material-ui/core\";\n\ntype TranscriptionsModalProps = {\n  /* The chunk to show the transcriptions for.\n   * When this is undefined, don't show the modal\n   */\n  chunk: Chunk | undefined;\n  exit: () => void;\n};\n\nconst TranscriptionsModal: React.FC<TranscriptionsModalProps> = ({\n  chunk,\n  exit,\n}) => (\n  <CentralModal\n    open={chunk !== undefined}\n    // TODO- this breaks if the name is too long\n    header={\n      <h2\n        style={{ margin: 0, overflowWrap: \"anywhere\" }}\n      >{`Transcriptions for \"${chunk && getNameOf(chunk)}\"`}</h2>\n    }\n    exit={exit}\n  >\n    <div style={{ overflow: \"scroll\" }}>\n      {chunk?.transcriptions.map((transcription) => (\n        <div style={{margin:'8px'}}>\n          <SimpleCard\n            key={transcription.id}\n            title={<b>{transcription.creatorid}</b>}\n            contentStyle={{ marginBottom:'-10px' }}\n          >\n            {transcription.content}\n          </SimpleCard>\n          {/* <Divider /> */}\n        </div>\n      ))}\n    </div>\n  </CentralModal>\n);\n\nexport default TranscriptionsModal;\n","import { useEffect, useRef } from \"react\";\n\nconst ScrollToOnMount: React.FC<{ style?: any }> = ({ children, style }) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    ref.current?.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"end\",\n      inline: \"nearest\",\n    });\n  }, []);\n\n  return <div ref={ref} style={{...style}}>{children}</div>;\n};\n\nexport default ScrollToOnMount;\n","import { Menu, MenuItem } from \"@material-ui/core\";\nimport React, { ReactNode } from \"react\";\n\ntype IndabaMenuProps = {\n  anchor: null | Element;\n  show: boolean;\n  menuItems: { content: ReactNode; handler: () => void }[];\n};\n\nconst IndabaMenu = React.forwardRef<ReactNode, IndabaMenuProps>(({ anchor, show, menuItems }, ref) => {\n  return (\n    <Menu ref={ref} anchorEl={anchor} open={show}>\n      {menuItems.map((item, idx) => (\n        <MenuItem key={idx} onClick={item.handler}>{item.content}</MenuItem>\n      ))}\n    </Menu>\n  );\n});\n\nexport default IndabaMenu;\n","// External Dependencies\nimport { ClickAwayListener, IconButton } from \"@material-ui/core\";\nimport { MoreVert } from \"@material-ui/icons\";\nimport React, { ReactNode, useRef, useState } from \"react\";\n\n// Internal Dependencies\nimport IndabaMenu from \"../IndabaMenu/IndabaMenu\";\n\ntype ChunkCardContextMenuProps = {\n  menuItems: { content: ReactNode; handler: () => void }[];\n};\n\nconst ChunkCardContextMenu: React.FC<ChunkCardContextMenuProps> = ({\n  menuItems,\n}) => {\n  const [showContextMenu, setShowContextMenu] = useState(false);\n\n  const ref = useRef<HTMLButtonElement>(null);\n\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        top: 0,\n        right: 0,\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignSelf: \"flex-start\",\n      }}\n    >\n      <ClickAwayListener onClickAway={() => setShowContextMenu(false)}>\n        <IconButton\n          style={{ padding: 4 }}\n          onClick={() => setShowContextMenu(true)}\n          ref={ref}\n        >\n          <MoreVert />\n        </IconButton>\n      </ClickAwayListener>\n      <IndabaMenu\n        show={showContextMenu}\n        anchor={ref.current}\n        menuItems={menuItems}\n      />\n    </div>\n  );\n};\n\nexport default ChunkCardContextMenu;\n","import { CircularProgress, DialogContent, makeStyles, Modal } from \"@material-ui/core\";\nimport React from \"react\";\n\ntype LoadingModalProps = {\n  open: boolean;\n};\n\nconst useStyles = makeStyles({\n  loadingModal: {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nconst LoadingModal: React.FC<LoadingModalProps> = ({ open }) => {\n  const classes = useStyles();\n  return (\n    <Modal open={open} className={classes.loadingModal}>\n      <DialogContent\n        style={{ outline: \"none\", display: \"flex\", justifyContent: \"center\" }}\n      >\n        <CircularProgress />\n      </DialogContent>\n    </Modal>\n  );\n};\n\nexport default LoadingModal;","import { useCallback, useMemo, useState } from \"react\";\n\n/**\n * A convenience hook for indexing into a list and only allowing going\n * to the next and previous index.\n *\n * The API tells the user the current page, as well as the direction of the\n * last page change.\n *\n * @param list the list to index into\n */\nconst useSlideshow = <T extends unknown>(list: T[]) => {\n  const [[page, direction], setPage] = useState<\n    [number, \"next\" | \"prev\" | null]\n  >([0, null]);\n\n  const goTo = (direction: \"next\" | \"prev\") => {\n    return direction === \"next\" && page < list.length - 1\n      ? setPage(([p]) => [p + 1, \"next\"])\n      : direction === \"prev\" && page > 0\n      ? setPage(([p]) => [p - 1, \"prev\"])\n      : null;\n  };\n\n  const reset = useCallback(() => {\n    setPage([0, null]);\n  }, [setPage]);\n\n  const lastPage = useMemo(() => \n    page === list.length - 1\n  , [page, list.length]);\n\n  return { page: page, direction: direction, goTo, reset, lastPage };\n};\n\nexport default useSlideshow;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    paddingBottom: \"32px\",\n    height: \"40vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  instructionsContainer: {\n    flexGrow: 4,\n  },\n  divider: {\n    marginBottom: \"16px\",\n  },\n  centerVertically: {\n    position: \"relative\",\n    top: \"40%\",\n    transform: \"translateY(-50%)\",\n    textAlign:'center'\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginBottom:'-8px'\n  },\n  stepIcon: {\n    fill: \"#e53935\",\n  },\n  stepText: {\n    fill: \"#ffffff\",\n  },\n  stepCompleted: {\n    fill: \"#e53935\"\n  },\n  stepLabel: {\n    fontSize: \"12px\"\n  }\n\n}));\n\nexport default useStyles;\n","import {\n  Stepper,\n  Step,\n  StepLabel,\n  Container,\n  Button,\n  Typography,\n} from \"@material-ui/core\";\nimport { ChevronLeft, ChevronRight } from \"@material-ui/icons\";\nimport React, { ReactElement, useCallback } from \"react\";\nimport useSlideshow from \"../../hooks/useSlideshow\";\nimport CentralModal from \"../CentralModal/CentralModal\";\nimport useStyles from \"./OnboardingModalStyles\";\n\ntype OnboardingModalProps = {\n  show: boolean;\n  dismiss: () => void;\n  title: ReactElement;\n  steps: string[];\n  stepsLabels: string[];\n  startButtonContent: ReactElement;\n};\n\nconst OnboardingModal: React.FC<OnboardingModalProps> = ({\n  show,\n  dismiss,\n  title,\n  steps,\n  stepsLabels,\n  startButtonContent,\n}) => {\n  const { page, goTo, reset } = useSlideshow(steps);\n\n  const dismissHandler = useCallback(() => {\n    reset();\n    dismiss();\n  }, [dismiss, reset]);\n\n  const nextPageHandler = useCallback(() => {\n    page === steps.length - 1 ? dismissHandler() : goTo(\"next\");\n  }, [page, goTo, dismissHandler, steps.length]);\n\n  const prevPageHandler = useCallback(() => {\n    goTo(\"prev\");\n  }, [goTo]);\n\n  const classes = useStyles();\n\n  return (\n    <CentralModal header={title} open={show} exit={dismissHandler}>\n      <div className={classes.contentContainer}>\n        <Stepper activeStep={page} alternativeLabel>\n          {steps.map((_, idx) => (\n            <Step key={idx}>\n              <StepLabel\n                StepIconProps={{\n                  classes: {\n                    active: classes.stepIcon,\n                    text: classes.stepText,\n                    completed: classes.stepCompleted,\n                  },\n                }}\n              >\n                {stepsLabels[idx]}\n              </StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n        <Container className={classes.instructionsContainer}>\n          <div className={classes.centerVertically}>\n            <Typography variant=\"h5\">{steps[page]}</Typography>\n          </div>\n        </Container>\n        <Container className={classes.buttonsContainer}>\n          {page === 0 ? (\n            <div />\n          ) : (\n            <Button\n              onClick={prevPageHandler}\n              variant=\"outlined\"\n              size=\"large\"\n              color=\"secondary\"\n            >\n              <ChevronLeft /> Previous\n            </Button>\n          )}\n          <Button\n            onClick={nextPageHandler}\n            variant=\"contained\"\n            disableElevation\n            size=\"large\"\n            color=\"secondary\"\n          >\n            {page === steps.length - 1 ? (\n              startButtonContent\n            ) : (\n              <>\n                Next <ChevronRight />\n              </>\n            )}\n          </Button>\n        </Container>\n      </div>\n    </CentralModal>\n  );\n};\n\nexport default OnboardingModal;\n","// External Dependencies\nimport { Add, Check, Stop, PlayArrow } from \"@material-ui/icons\";\nimport LocalizedStrings from \"react-localization\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\nimport {\n  Grid,\n  GridList,\n  GridListTile,\n  Mark,\n  useMediaQuery,\n  Fab,\n  Typography\n} from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\n// Internal Dependencies\nimport ChunkCard from \"../SimpleCard/ChunkCard\";\nimport useStyles from \"./ChunkEditorStyles\";\nimport { UserContext } from \"../UserProvider/UserProvider\";\nimport VideoPlayer from \"../VideoPlayer/VideoPlayer\";\nimport useVideoPlayerController from \"../VideoPlayer/Hooks/useVideoPlayerController\";\nimport {\n  useDeleteChunk,\n  useDoWithChunks,\n  useNewChunk,\n} from \"../../utils/ChunksContext/chunksActions\";\nimport chunksContext from \"../../utils/ChunksContext/chunksContext\";\nimport IndabaButton from \"../IndabaButton/IndabaButton\";\nimport { Chunk } from \"../../utils/types\";\nimport {\n  getEnclosingChunk,\n  getLastEndTimeSeconds,\n  getNameOf,\n  hasTranscription,\n} from \"../../utils/chunkManipulation/chunkManipulation\";\nimport EditChunkModal from \"../EditChunkModal/EditChunkModal\";\nimport VideoThumbnail from \"../VideoPlayer/VideoThumbnail\";\nimport BackButton from \"../BackButton/BackButton\";\nimport useConfirmBeforeAction from \"../../hooks/useConfirmBeforeAction\";\nimport ConfirmIntentModal from \"../ConfirmIntentModal/ConfirmIntentModal\";\nimport TranscriptionsModal from \"../TranscriptionsModal/TranscriptionsModal\";\nimport SimpleCard from \"../SimpleCard/SimpleCard\";\nimport ScrollToOnMount from \"../ScrollToOnMount/ScrollToOnMount\";\nimport ChunkCardContextMenu from \"./ChunkCardContextMenu\";\nimport { api_base_address } from \"../../utils/getApiKey\";\nimport LoadingModal from \"../LoadingModal/LoadingModal\";\nimport OnboardingModal from \"../OnboardingModal/OnboardingModal\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    instructionsOne:\n      \"You are about to chunk the video. The aim of chunking is to make Transcribing easy.\",\n    instructionOneStepLabel: \"Faster Transcribing\",\n    instructionsTwo:\n      \"Rather than transcribing the entire video at once, you will break the video down into smaller chunks, which you will transcribe individually.\",\n    instructionTwoStepLabel: \"Small chunks\",\n    instructionsThree:\n      \"You should aim to have only one person speaking in each chunk. Create a new chunk when there is a change in who is talking, there is a gap in the talking, or a person begins/ends talking.\",\n    instructionThreeStepLabel: \"One Speaker per chunk\",\n    instructionsFour:\n      \"To create a chunk, press the 'Add' button in the bottom right corner. The time that you press the 'Add' button in the video will be the end of the new chunk.\",\n    instructionFourStepLabel: \"Push 'Add' Button\",\n    instructionsTitle: \"Chunking Instructions\",\n    startChunking: \"Start Chunking\",\n    attemptDeleteWarningTitle: \"This chunk has a transcription\",\n    attemptDeleteWarningBody:\n      \"Attempting to delete chunk {0}, which has a transcription saved to it. Are you sure you want to delete it?\",\n    attemptNewChunkTitle: \"The enclosing chunk has a transcription\",\n    attemptNewChunkBody:\n      'Creating a new chunk here will delete the transcriptions on the enclosing chunk, \"{0}\". Are you sure you want to discard these transcriptions?',\n    delete: \"Delete\",\n    edit: \"Edit\",\n    viewTranscriptions: \"View Transcriptions\",\n    newChunk: \"New Chunk\",\n    doneCard: \"Done Card\",\n  },\n});\n\ntype ChunkEditorProps = {\n  /** Action to do when back button is pressed */\n  atExit: () => void;\n  story_id: string;\n  onboarding: {\n    showOnboardingModal: boolean;\n    dismissOnboardingModal: () => void;\n  };\n};\n\n/**\n * Helper function that converts a list of chunks\n * to a list of marks\n *\n * @param chunks the chunks to get the marks for\n */\nconst getMarks = (chunks: Chunk[]): Mark[] =>\n  chunks.map((chunk) => ({\n    value: chunk.endtimeseconds * 100,\n  }));\n\nconst GetCols = (): number => {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up(\"md\"));\n  console.log(matches);\n  return matches ? 3.5 : 2.5;\n};\n\nconst ChunkEditor: React.FC<ChunkEditorProps> = ({\n  atExit,\n  story_id,\n  onboarding,\n}) => {\n  const [chunks, setChunks] = chunksContext.useChunksState();\n\n  // This refreshes the chunks when the ChunkEditor is first rendered\n  useEffect(() => {\n    setChunks((newChunks) => newChunks);\n  }, [setChunks]);\n\n  const {\n    progressState: videoPlayerProgressState,\n    playingState,\n    duration,\n    controller: videoPlayerController,\n    playerRef,\n  } = useVideoPlayerController();\n\n  const { progress, setProgressWithVideoUpdate } = videoPlayerProgressState;\n\n  const [, setPlay] = playingState;\n\n  const marks = useMemo(() => getMarks(chunks), [chunks]);\n\n  const { userName } = useContext(UserContext);\n\n  const doWithChunks = useDoWithChunks(setChunks);\n  const deleteChunk = useDeleteChunk(setChunks);\n  const newChunk = useNewChunk(setChunks);\n\n  const classes = useStyles();\n\n  const [playingChunk, setPlayingChunk] = useState<undefined | Chunk>(\n    undefined\n  );\n\n  useEffect(() => {\n    if (playingChunk !== undefined && progress > playingChunk.endtimeseconds) {\n      setPlayingChunk(undefined);\n      setPlay(false);\n    }\n  }, [progress, playingChunk, chunks, setPlay]);\n\n  const handleChunkPlayButtonClick = useCallback(\n    (chunk: Chunk, playingChunk: Chunk | undefined, videoPlaying: boolean) => {\n      if (playingChunk?.id === chunk.id && videoPlaying) {\n        setPlay(false);\n      } else {\n        setPlay(true);\n        setPlayingChunk(chunk);\n        setProgressWithVideoUpdate(chunk.starttimeseconds);\n      }\n    },\n    [setProgressWithVideoUpdate, setPlay]\n  );\n\n  const [croppingChunk, setCroppingChunk] = useState<Chunk | undefined>(\n    undefined\n  );\n\n  const handleCompleteChunking = () => {\n    getLastEndTimeSeconds(chunks) !== 1 &&\n      userName &&\n      newChunk(1, duration, userName);\n    atExit();\n  };\n\n  const createNewChunk = (\n    _: Chunk[],\n    splitAt: number,\n    storyDuration: number,\n    userName: string\n  ) => newChunk(splitAt, storyDuration, userName);\n\n  const { attemptAction: attemptNewChunk, ...attemptNewChunkActionControls } =\n    useConfirmBeforeAction(createNewChunk, (chunks, time) => {\n      const enclosingChunk = getEnclosingChunk(chunks, time);\n      return enclosingChunk !== undefined && hasTranscription(enclosingChunk);\n    });\n\n  const handleNewChunk = () => {\n    if (userName) {\n      attemptNewChunk(chunks, progress, duration, userName);\n    }\n  };\n\n  const {\n    attemptAction: attemptToDeleteChunk,\n    ...attemptDeleteActionControls\n  } = useConfirmBeforeAction(deleteChunk, (chunk) => hasTranscription(chunk));\n\n  const [showTranscriptionsFor, setShowTranscriptionsFor] = useState<\n    Chunk | undefined\n  >(undefined);\n\n  const handleAttemptDeleteChunk = (c: Chunk) => {\n    doWithChunks((chunks: Chunk[]) => {\n      chunks.forEach(\n        (chunk) => chunk.id === c.id && attemptToDeleteChunk(chunk)\n      );\n    });\n  };\n\n  const playButtonStyle = useMemo(\n    () => ({\n      \n      position: \"absolute\",\n      left: \"50%\",\n      top: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n    }),\n    []\n  );\n\n  const chunkCardContentStyle = useRef({\n    backgroundColor: \"green\",\n    height: \"100%\",\n    padding: \"0px\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    color: \"white\",\n  });\n\n  const chunkCardStyle = useRef({\n    margin: \"8px\",\n    transform: \"translateY(8px)\",\n    height: \"calc(100% - 16px)\",\n  });\n\n  const { showOnboardingModal, dismissOnboardingModal } = onboarding;\n\n  const playerDragHandler = useCallback(\n    () => setPlayingChunk(undefined),\n    [setPlayingChunk]\n  );\n\n  return (\n    <Grid\n      item\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      style={{ height: \"85%\" }}\n    >\n      <Grid\n        item\n        container\n        alignContent=\"center\"\n        alignItems=\"center\"\n        className={classes.videoContainer}\n      >\n        <VideoPlayer\n          controller={videoPlayerController}\n          progressState={videoPlayerProgressState}\n          playerRef={playerRef}\n          url={`${api_base_address}/api/watch/getvideo/${story_id}`}\n          sliderMarks={marks}\n          onProgressDrag={playerDragHandler}\n        />\n      </Grid>\n      <Grid item container xs={12} style={{ height: \"40%\", margin: \"5px\" }}>\n        <GridList\n          className={classes.chunksList}\n          cellHeight=\"auto\"\n          cols={GetCols()}\n        >\n          {chunks\n            .map((c) => (\n              <GridListTile key={c.id} style={{ margin: \"0px 4px 4px 2px\" }}>\n                <ScrollToOnMount>\n                  <ChunkCard\n                    chunk={c}\n                    transcriptionIcon={\n                      <ChunkCardContextMenu\n                        menuItems={[\n                          {\n                            content: strings.delete,\n                            handler: () => handleAttemptDeleteChunk(c),\n                          },\n                          {\n                            content: strings.edit,\n                            handler: () => setCroppingChunk(c),\n                          },\n                        ].concat(\n                          c.transcriptions.length !== 0\n                            ? [\n                                {\n                                  content: strings.viewTranscriptions,\n                                  handler: () => setShowTranscriptionsFor(c),\n                                },\n                              ]\n                            : []\n                        )}\n                      />\n                    }\n                  >\n                    <div className={classes.chunkCardBody}>\n                      <VideoThumbnail\n                        url={`${api_base_address}/api/watch/getvideo/${story_id}`}\n                        time={\n                          c.starttimeseconds +\n                          (c.endtimeseconds - c.starttimeseconds) / 2\n                        }\n                      />\n                      <IndabaButton\n                        round\n                        color=\"primary\"\n                        style={playButtonStyle as React.CSSProperties}\n                        onClick={() =>\n                          handleChunkPlayButtonClick(\n                            c,\n                            playingChunk,\n                            playingState[0]\n                          )\n                        }\n                      >\n                        {playingChunk?.id === c.id && playingState[0] ? (\n                          <Stop style={{ fontSize: 40 }} />\n                        ) : (\n                          <PlayArrow style={{ fontSize: 40 }} />\n                        )}\n                      </IndabaButton>\n                    </div>\n                  </ChunkCard>\n                </ScrollToOnMount>\n              </GridListTile>\n            ))\n            .concat(\n              getLastEndTimeSeconds(chunks) > 0.75\n                ? [\n                    <GridListTile\n                      key={strings.doneCard}\n                      onClick={handleCompleteChunking}\n                    >\n                      <ScrollToOnMount style={{ height: \"103%\", marginTop:'-14px' }}>\n                        <SimpleCard\n                        \n                          contentStyle={chunkCardContentStyle.current}\n                          cardStyle={chunkCardStyle.current}\n                        >\n                          <Check\n                            style={{ fontSize:'60' }}\n                          />\n                        </SimpleCard>\n                      </ScrollToOnMount>\n                    </GridListTile>,\n                  ]\n                : []\n            )}\n        </GridList>\n      </Grid>\n      <div>\n        <div className={classes.newChunkButtonContainer}>\n          <Fab onClick={handleNewChunk} color=\"primary\" style={{margin:'10px',bottom:'70px'}}>\n            <Add />\n          </Fab>\n          {/* <IndabaButton\n            round\n            aria-label={strings.newChunk}\n            style={{ margin: \"20px\" }}\n            \n          >\n            <Add />\n          </IndabaButton> */}\n        </div>\n      </div>\n      <LoadingModal open={duration === 0} />\n      <OnboardingModal\n        show={showOnboardingModal}\n        dismiss={dismissOnboardingModal}\n        title={\n          <h2 className={classes.onboardingTitle}>\n            {strings.instructionsTitle}\n          </h2>\n        }\n        steps={[\n          strings.instructionsOne,\n          strings.instructionsTwo,\n          strings.instructionsThree,\n          strings.instructionsFour,\n        ]}\n        stepsLabels={[\n          strings.instructionOneStepLabel,\n          strings.instructionTwoStepLabel,\n          strings.instructionThreeStepLabel,\n          strings.instructionFourStepLabel,\n        ]}\n        startButtonContent={<div>{strings.startChunking}</div>}\n      />\n      <EditChunkModal\n        story_id={story_id}\n        chunk={croppingChunk}\n        exit={() => setCroppingChunk(undefined)}\n        storyDuration={duration}\n      />\n      <ConfirmIntentModal\n        actionControls={attemptDeleteActionControls}\n        warningMessage={<div>{strings.attemptDeleteWarningTitle}</div>}\n      >\n        {(...args) => (\n          <div style={{ overflowWrap: \"anywhere\" }}>\n            {strings.formatString(\n              strings.attemptDeleteWarningBody,\n              args[0] && ` \"${getNameOf(args[0])}\"`\n            )}\n          </div>\n        )}\n      </ConfirmIntentModal>\n      {/* <ConfirmIntentModal\n        actionControls={attemptNewChunkActionControls}\n        warningMessage={<div>{strings.attemptNewChunkTitle}</div>}\n      >\n        {(...args) => (\n          <Typography variant=\"body1\">\n            {strings.formatString(\n              strings.attemptNewChunkBody,\n              getNameOf(getEnclosingChunk(args[0], args[1]) ?? args[0][0])\n            )}\n          </Typography>\n        )}\n      </ConfirmIntentModal> */}\n      <TranscriptionsModal\n        chunk={showTranscriptionsFor}\n        exit={() => setShowTranscriptionsFor(undefined)}\n      />\n      <BackButton action={atExit} />\n    </Grid>\n  );\n};\n\nexport default ChunkEditor;\n","import {\n  Card,\n  // CardHeader,\n  // Avatar,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Divider\n} from \"@material-ui/core\";\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\nimport { Classes } from \"@material-ui/styles/mergeClasses/mergeClasses\";\nimport { api_base_address } from \"../../utils/getApiKey\";\nimport React from \"react\";\n\nconst FlatCard: React.FC<{\n  style?: CSSProperties;\n  className: Classes;\n  context: React.ReactNode;\n  actions: React.ReactNode;\n  title: string;\n}> = React.forwardRef(\n  ({ className, context, actions, style, title }, ref) => {\n    return (\n      <Card ref={ref} elevation={0} style={style} className={className.card}>\n        {/* <CardActionArea focusRipple={false}> */}\n          <CardMedia\n            className={className.card_image}\n            image={`${api_base_address}/images/event_back.png`}\n          >\n            <div style={{color:'white', textAlign:'center', lineHeight:'130px',fontSize:'3em'}}>{title}</div>\n            </CardMedia>\n        {/* <CardHeader avatar={\n          <Avatar>\n            {title.substring(0,1)}\n          </Avatar>\n        }\n        title={title}>\n        </CardHeader> */}\n          <CardContent className={className.content}>{context} </CardContent>\n        {/* </CardActionArea> */}\n        <Divider />\n        <CardActions\n          style={{ justifyContent: \"center\" }}\n          className={className.actions}\n        >\n          {actions}\n        </CardActions>\n      </Card>\n    );\n  }\n);\n\nexport default FlatCard;\n","import React from 'react';\nimport LinearProgress, { LinearProgressProps } from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nfunction LinearProgressWithLabel(props: LinearProgressProps & { value: number }) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <LinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nexport default LinearProgressWithLabel;","\nenum View {\n  Dashboard,\n  Chunking,\n  Transcribing,\n  Reviewing,\n};\n\nexport default View;","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst borderColor = \"#dddddd\";\n\nconst useStyles = makeStyles({\n  html: {\n    fontFamily: \"'Open Sans', 'Helvetica Neue', sans-serif\",\n  },\n  paper: {\n    border: `1px solid ${borderColor}`,\n    borderTop: \"0\",\n    borderTopRightRadius: \"0\",\n    borderTopLeftRadius: \"0\",\n    padding: \"15px\",\n  },\n  stepHeader: {\n    padding: \"4px\",\n    backgroundColor: \"#f5f5f5\",\n    border: `1px solid ${borderColor}`,\n    borderBottomRightRadius: \"0\",\n    borderBottomLeftRadius: \"0\",\n  },\n  card: {\n    border: `1px solid ${borderColor}`,\n    borderRadius: \"6px\",\n    margin: \"5px\",\n    marginBottom: \"20px\",\n    minHeight: \"320px\",\n  },\n  header: {\n    padding: \"4px\",\n    borderBottomRightRadius: \"0\",\n    borderBottomLeftRadius: \"0\",\n    fontFamily: \"'Open Sans', 'Helvetica Neue', sans-serif\",\n  },\n  card_image: {\n    height: 140,\n  },\n  content: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexGrow: 1,\n  },\n  button: {\n    marginTop: \"10px\",\n    fontSize: \"1.1rem\",\n  },\n});\n\nexport default useStyles;\n","// External Dependencies\nimport React from \"react\";\nimport { Box, Typography,Button } from \"@material-ui/core\";\nimport LocalizedStrings from \"react-localization\";\n\n// Internal Dependencies\nimport FlatCard from \"../FlatCard/FlatCard\";\nimport LinearProgressWithLabel from \"../LinearProgressWithLabel/LinearProgressWithLabel\";\nimport useStyles from \"./StepInfoStyles\";\n// import IndabaButton from \"../IndabaButton/IndabaButton\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    perform: \"Perform {0}\",\n  },\n});\n\nexport type StepInfoProps = {\n  title: string;\n  description: string;\n  progress: number;\n  onSelect: () => void;\n  enabled: boolean;\n};\n\nconst StepInfo: React.FC<StepInfoProps> = ({\n  title,\n  description,\n  progress,\n  onSelect,\n  enabled,\n}) => {\n  const classes = useStyles();\n  return (\n    <FlatCard\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        flexDirection: \"column\",\n        flexGrow: 1,\n      }}\n      className={classes}\n      title={title}\n      context={\n        <Box style={{ marginTop: \"8px\" }}>\n          {/* <Typography\n            variant=\"h5\"\n            style={{ fontFamily: \"'Open Sans', 'Helvetica Neue', sans-serif\" }}\n          >\n            {title}\n          </Typography> */}\n          <LinearProgressWithLabel value={progress} color=\"secondary\" />\n          <Typography style={{ padding: \"6px\", fontSize: \"1.1rem\" }}>\n            {description}\n          </Typography>\n        </Box>\n      }\n      actions={\n        <Box style={{ marginTop: \"8px\" }}>\n          <Button disabled={!enabled} onClick={onSelect}>\n            <Typography style={{ padding: \"6px\", fontSize: \"1.1rem\" }}>\n              {strings.formatString(strings.perform, title)}\n            </Typography>\n          </Button>\n        </Box>\n      }\n    />\n  );\n};\n\nexport default StepInfo;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  introContainer: {\n    textAlign: \"center\",\n  },\n  transcriberModal: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  }\n});\n\nexport default useStyles;\n","import { InputBase, Divider, Button } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n// import IndabaButton from \"../IndabaButton/IndabaButton\";\n\ntype SimpleInputFormProps = {\n  /** Placeholder for the Text Input */\n  placeholder: string;\n  /** Label for the submit button */\n  buttonText: string;\n  /** Class names for the text input */\n  classes: { input: string; };\n  /** Submit callback */\n  onSubmit: (value: string) => void;\n};\n\nconst SimpleInputForm: React.FC<SimpleInputFormProps> = React.forwardRef<HTMLDivElement, SimpleInputFormProps>(({\n  placeholder,\n  buttonText,\n  classes,\n  onSubmit,\n}, ref) => {\n  const [input, setInput] = useState<string | null>(null);\n  return (\n    <div ref={ref}>\n      <InputBase\n      style={{margin:'8px'}}\n        className={classes.input}\n        onChange={(e) => setInput(e.target.value)}\n        placeholder={placeholder}\n      />\n      <Divider variant=\"fullWidth\" />\n      <div>\n      <Button\n        onClick={() => input && onSubmit(input)}\n        style={{  }}\n      >\n        {buttonText}\n      </Button>\n      </div>\n    </div>\n  );\n});\n\nexport default SimpleInputForm;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  modal: {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  modalContentBox: {\n    padding: \"16px\",\n  },\n  input: {\n    flex: 1,\n    width: \"400px\",\n    height: \"3.5rem\",\n    border: \"1px solid #cccccc\",\n    paddingLeft: \"8px\",\n    borderRadius: \"8px 9px 8px 8px\",\n  },\n});\n\nexport default useStyles;\n","import { Divider, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport CentralModal from \"../CentralModal/CentralModal\";\nimport { StateSetter } from \"../../utils/types\";\nimport SimpleInputForm from \"../SimpleInputForm/SimpleInputForm\";\nimport useStyles from \"./NameModalStyles\";\n\ntype NameModalProps = {\n  show: boolean;\n  setName: StateSetter<string | undefined>;\n};\n\nconst NameModal: React.FC<NameModalProps> = ({ show, setName }) => {\n  const classes = useStyles();\n\n  return (\n    <CentralModal open={show}>\n      <div>\n        <Typography variant=\"h5\" style={{padding:'4px',paddingLeft:'4px'}}>\n          Please enter your name\n        </Typography>\n        <Divider variant=\"fullWidth\" style={{}} />\n        <div style={{}}>\n          <SimpleInputForm\n            placeholder=\"My Name\"\n            buttonText=\"Start Transcribing\"\n            classes={classes}\n            onSubmit={setName}\n          />\n        </div>\n        </div>\n    </CentralModal>\n  );\n};\n\nexport default NameModal;\n","// External Dependencies\nimport { Box, Typography, Grid, Chip, Avatar } from \"@material-ui/core\";\nimport LocalizedStrings from \"react-localization\";\n// import { ChevronLeft } from \"@material-ui/icons\";\nimport React, { useContext } from \"react\";\n// import { useHistory } from \"react-router-dom\";\n\n\n// Internal Dependencies\nimport StepInfo, { StepInfoProps } from \"../App/StepInfo\";\nimport useStyles from \"./DashboardStyles\";\nimport { UserContext } from \"../UserProvider/UserProvider\";\nimport NameModal from \"../NameModal/NameModal\";\n// import IndabaLink from \"../IndabaLink/IndabaLink\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    back: \"Back\",\n    greeting: \"Hello {0}\",\n    transcriptionFor: \"Field Transcription for {0}\",\n    notMe: \"This is not me!\",\n    steps:\n      \"There are 3 stages to transcribing, select which stage you are performing\",\n  },\n});\n\ntype DashboardProps = {\n  /** The name of the story being transcribed */\n  storyName: string;\n  /** The transcription steps and their progress */\n  steps: StepInfoProps[];\n  /** Action for logging out */\n  logOutAction: () => void;\n};\n\n// const Greeting: React.FC<{ name: string | undefined }> = ({ name }) => (\n//   <Chip\n//     avatar={<Avatar>M</Avatar>}\n//     variant=\"outlined\"\n//     label={name}\n//     style={{\n      \n//     }}\n//     />\n// );\n\nconst Title: React.FC<{ storyName: string }> = ({ storyName }) => (\n  <Typography variant=\"h4\" style={{ color: \"gray\", fontWeight: \"lighter\", marginTop:'0.4em' }}>\n    {strings.formatString(\n      strings.transcriptionFor,\n      <Box component=\"span\" style={{ color: \"black\" }}>\n        {storyName}\n      </Box>\n    )}\n  </Typography>\n);\n\nconst Dashboard: React.FC<DashboardProps> = ({\n  storyName,\n  steps,\n  logOutAction,\n}) => {\n\n  // const history = useHistory();\n\n  const { userName, setName, clearName } = useContext(UserContext);\n\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={9} md={11}>\n      <NameModal setName={setName} show={!userName} />\n      <Grid item xs={12} className={classes.introContainer}>\n      {/* <Button component=\"a\" href=\"/\">\n        <ChevronLeft fontSize=\"large\" />\n        {strings.back}\n        </Button> */}\n        <Title storyName={storyName} />\n        {/* <Greeting name={userName} /> */}\n        {/* {userName && (\n          <IndabaLink\n            onClick={() => {\n              clearName();\n              logOutAction();\n            }}\n          >\n            {strings.notMe}\n          </IndabaLink>\n        )} */}\n        {userName && (\n        <Chip\n        onDelete={() => {\n          clearName();\n          logOutAction();\n        }}\n    avatar={<Avatar>{userName.substring(0,1)}</Avatar>}\n    variant=\"outlined\"\n    label={userName}\n    style={{\n      marginTop:'10px'\n    }}\n    />)}\n      </Grid>\n      <div\n        style={{ marginBottom: \"16px\", marginTop: \"16px\", textAlign: \"center\",color:\"#333\" }}\n      >\n        {strings.steps}\n      </div>\n      <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justify=\"center\"\n        alignContent=\"flex-start\"\n        alignItems=\"stretch\"\n      >\n        {steps.map((step) => (\n          <Grid\n            item\n            key={step.title}\n            xs={12}\n            md={4}\n            lg={3}\n            style={{ display: \"flex\" }}\n          >\n            <StepInfo {...step} />\n          </Grid>\n        ))}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Dashboard;\n","import {\n  // ClickAwayListener,\n  // Divider,\n  // Button,\n  Fab,\n  Grid,\n} from \"@material-ui/core\";\nimport React, { ReactNode } from \"react\";\nimport { HelpOutline } from \"@material-ui/icons\";\n\n\n// import useStyles from \"./HeaderStyles\";\n// import Logo from \"../../assets/images/logo_web.svg\";\n// import { MoreVert } from \"@material-ui/icons\";\n// import useToggle from \"../../hooks/useToggle\";\n// import IndabaMenu from \"../IndabaMenu/IndabaMenu\";\n\ntype HeaderProps = {\n  title: string;\n  contextMenuItems: { content: ReactNode; handler: () => void }[];\n  // showOnBoarding:{ handler: () => void },\n  hidden?: boolean;\n};\n\nconst Header: React.FC<HeaderProps> = ({\n  children,\n  // title,\n  // showOnBoarding,\n  contextMenuItems,\n  // hidden,\n}) => {\n  // const classes = useStyles();\n\n  // const contextMenuButtonRef = useRef(null);\n\n  // const [showContextMenu, toggleShowContextMenu, setShowContextMenu] = useToggle(false);\n\n  // const hideContextMenu = () => setShowContextMenu(false);\n\n  return (\n    <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n      {contextMenuItems.length > 0 && <Fab onClick={contextMenuItems[0].handler} style={{margin:'10px',position: \"fixed\",backgroundColor:\"#aaa\", right: '0px', bottom: '0px'}}>\n        <HelpOutline />\n      </Fab>\n      }\n      <Grid container item xs={12} justify=\"center\" alignItems=\"center\">\n        {children}\n      </Grid>\n      {/* <Grid container item xs={12} justify=\"center\" alignItems=\"center\">\n        <ClickAwayListener onClickAway={hideContextMenu}>\n          <Button\n            size=\"large\"\n            style={{ maxWidth: \"265px\" }}\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={toggleShowContextMenu}\n            ref={contextMenuButtonRef}\n          >\n            All Contributions\n          </Button>\n        </ClickAwayListener>\n        <IndabaMenu\n          show={showContextMenu}\n          anchor={contextMenuButtonRef.current!}\n          menuItems={contextMenuItems}\n        />\n      </Grid> */}\n    </Grid>\n  );\n};\n\nexport default Header;\n","// External Dependencies\nimport { useMemo } from \"react\";\nimport LocalizedStrings from \"react-localization\";\n\n// Internal Dependencies\nimport { StepInfoProps } from \"../StepInfo\";\nimport View from \"../Views\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    chunkingDesc:\n      \"We need to know when people are talking in the story, so that we can transcribe them.\",\n    chunkingTitle: \"Chunking\",\n    transcriptionDesc:\n      \"Writing down exactly what is said in each chunk of the story.\",\n    transcriptionTitle: \"Transcription\",\n    reviewDesc:\n      \"Reviewing content is key to making sure we represent participants authentically.\",\n    reviewTitle: \"Review\",\n  },\n});\n\ntype Three<T> = [T, T, T];\n\nconst useSteps = (\n  setView: (view: View) => void,\n  state: Three<Pick<StepInfoProps, \"progress\" | \"enabled\">>\n): Three<StepInfoProps> =>\n  useMemo(\n    () => [\n      {\n        title: strings.chunkingTitle,\n        description: strings.chunkingDesc,\n        progress: state[0].progress,\n        onSelect: () => setView(View.Chunking),\n        enabled: state[0].enabled,\n      },\n      {\n        title: strings.transcriptionTitle,\n        description: strings.transcriptionDesc,\n        progress: state[1].progress,\n        onSelect: () => setView(View.Transcribing),\n        enabled: state[1].enabled,\n      },\n      {\n        title: strings.reviewTitle,\n        description: strings.reviewDesc,\n        progress: state[2].progress,\n        onSelect: () => setView(View.Reviewing),\n        enabled: state[2].enabled,\n      },\n    ],\n    [setView, state]\n  );\n\nexport default useSteps;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst chunkProgressHeight = \"8px\";\n\nconst useStyles = makeStyles(theme => ({\n  videoPlayerContainer: {\n    position: \"relative\",\n    overflow: \"hidden\",\n  },\n  backButtonContainer: {\n    marginTop: \"4px\",\n    padding: \"0px\",\n  },\n  transcribeButton: {\n    height: \"300px\",\n    margin: \"0px 6px 0px 6px\",\n    width: \"70px\",\n  },\n  videoContainer: {\n    height: \"40%\",\n    minHeight: \"350px\",\n    maxWidth: \"80%\",\n    [theme.breakpoints.up(\"md\")]: {\n      maxWidth: \"50%\",\n    },\n  },\n  inputField: {\n    width: \"100%\",\n  },\n  chunkProgressRail: {\n    height: chunkProgressHeight,\n    color: \"#d9534f\",\n  },\n  chunkProgressTrack: {\n    height: chunkProgressHeight,\n    color: \"#d9534f\",\n  },\n  chunkProgressMark: {\n    height: chunkProgressHeight,\n    width: \"4px\",\n    backgroundColor: \"#FFFFFF\",\n    opacity: 0.8\n  },\n  stepperDots: {\n    backgroundColor: \"#d9534f\",\n  },\n  stepperDotsContainer: {\n    flexWrap: \"wrap\",\n    // width: \"90%\"\n    background:'none'\n  },\n  stepperDot:{\n    margin: \"2px\"\n  },\n  stepperRoot:{\n    background:'none',\n    marginTop:'-20px'\n  }\n  }));\n\nexport default useStyles;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  slideshowContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n    alignItems: \"flex-start\",\n    width: \"100%\",\n  },\n  slideshowContentContainer: {\n    flexGrow: 4,\n  }\n});\n\nexport default useStyles;\n","import { Box } from \"@material-ui/core\";\nimport { Done, NavigateBefore, NavigateNext } from \"@material-ui/icons\";\nimport React, { ReactNode } from \"react\";\nimport IndabaButton from \"../IndabaButton/IndabaButton\";\nimport useStyles from \"./SlideshowStyles\";\n\ntype SlideshowProps = {\n  onNavigate: (direction: \"next\" | \"prev\") => void;\n  currentPage: number;\n  numberOfPages: number;\n  style?: any;\n  contentContainerStyle?: any;\n  onComplete?: () => void;\n  leftColumn?: ReactNode;\n  rightColumn?: ReactNode;\n};\n\nconst Slideshow: React.FC<SlideshowProps> = ({\n  onNavigate,\n  onComplete,\n  currentPage,\n  numberOfPages,\n  children,\n  style,\n  contentContainerStyle,\n  leftColumn,\n  rightColumn\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.slideshowContainer} style={style}>\n      {leftColumn ?? <IndabaButton\n        round\n        aria-label=\"Previous\"\n        style={{ color: \"#FFFFFF\", alignSelf: \"flex-start\", marginTop: \"32px\" }}\n        disabled={currentPage === 0}\n        onClick={() => onNavigate(\"prev\")}\n      >\n        <NavigateBefore />\n      </IndabaButton>}\n      <Box style={{...contentContainerStyle}} className={classes.slideshowContentContainer}>{children}</Box>\n      {rightColumn ?? (onComplete && currentPage === numberOfPages - 1 ? (\n        <IndabaButton\n          round\n          aria-label=\"Complete\"\n          style={{\n            color: \"#FFFFFF\",\n            backgroundColor: \"#40bf11\",\n            alignSelf: \"flex-start\",\n            marginTop: \"32px\",\n          }}\n          onClick={onComplete}\n        >\n          <Done />\n        </IndabaButton>\n      ) : (\n        <IndabaButton\n          round\n          aria-label=\"Next\"\n          style={{\n            color: \"#FFFFFF\",\n            alignSelf: \"flex-start\",\n            marginTop: \"32px\",\n          }}\n          disabled={currentPage === numberOfPages - 1}\n          onClick={() => onNavigate(\"next\")}\n        >\n          <NavigateNext />\n        </IndabaButton>\n      ))}\n    </div>\n  );\n};\n\nexport default Slideshow;\n","// External Dependencies\nimport { TextField } from \"@material-ui/core\";\nimport LocalizedStrings from \"react-localization\";\nimport React, { ReactNode } from \"react\";\n\n// Internal Dependencies\n// import SimpleCard from \"./SimpleCard\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    transcription: \"Transcription\",\n  },\n});\n\ntype EditTranscriptionCardProps = {\n  inputRef?: React.MutableRefObject<null>;\n  transcriptionIcon?: ReactNode;\n  transcriptionValue: string;\n  onChange: (newValue: string) => void;\n};\n\nconst EditTranscriptionCard: React.FC<EditTranscriptionCardProps> = ({\n  inputRef,\n  transcriptionValue,\n  transcriptionIcon,\n  onChange,\n}) => {\n  // console.log(transcriptionValue)\n  return (\n      // <SimpleCard\n      //   title={transcriptionIcon}\n      //   cardStyle={{ paddingBottom: \"0px\" }}\n      // >\n      <TextField\n        autoFocus\n        multiline\n        rows={7}\n        inputRef={inputRef}\n        style={{ width: \"100%\" }}\n        variant=\"outlined\"\n        label={strings.transcription}\n        value={transcriptionValue}\n        color=\"secondary\"\n        onChange={(e) => {\n          onChange(e.target.value);\n        }}\n      />\n    // </SimpleCard>\n  );\n};\n\nexport default EditTranscriptionCard;\n","import { useCallback } from \"react\";\nimport oneSatisfies from \"../../../utils/oneSatisfies\";\nimport { Chunk, Transcription } from \"../../../utils/types\";\nimport { SplitState } from \"../../VideoPlayer/Hooks/useVideoPlayerState\";\n\nexport const getUsersTranscription = (\n  chunk: Chunk,\n  userName: string\n): Transcription | undefined =>\n  oneSatisfies(chunk.transcriptions, (t) => t.creatorid === userName)\n    ? chunk.transcriptions.filter((t) => t.creatorid === userName)[0]\n    : undefined;\n\nexport const getMiniChunks = (chunk: Chunk, duration: number) => {\n  var miniChunks: number[] = [];\n\n  var currentTime = chunk.starttimeseconds + 4 / duration;\n\n  while (currentTime < chunk.endtimeseconds) {\n    miniChunks.push(currentTime);\n    currentTime += 5 / duration;\n  }\n  if (currentTime !== chunk.endtimeseconds) {\n    miniChunks.push(chunk.endtimeseconds);\n  }\n\n  return miniChunks;\n};\n\ntype TranscriberAction = {\n  actionType:\n    | \"go to next page\"\n    | \"go to previous page\"\n    | \"transcription changed\"\n    | \"go to first mini chunk\"\n    | \"go to last mini chunk\"\n    | \"refresh mini chunks\"\n    | \"flush transcription changes\";\n  newTranscription?: string;\n};\n\ntype TranscriberState = {\n  currentChunk: number;\n  currentMiniChunk: number;\n  miniChunks: number[];\n  transcription: string;\n};\n\nconst getMiniChunkEnd = (miniChunk: number, duration: number) => {\n  const value = miniChunk + 1 / duration;\n  return value > duration ? duration : value;\n};\n\nconst getMiniChunkStart = (\n  prevMiniChunk: number | undefined,\n  currentChunk: Chunk\n) => {\n  return prevMiniChunk ?? currentChunk.starttimeseconds;\n};\n\n// const makeTranscriberPageChange = ;\n\n/**\n * TODO - change this into a hook, so that the caller doesn't have to use 'useCallback',\n * we should do that internall\n */\nconst useTranscriberReducer = (\n  chunks: Chunk[],\n  duration: number,\n  updateTranscription: (\n    toUpdate: Chunk,\n    updatedTranscription: string,\n    userName: string\n  ) => void,\n  userName: string | undefined,\n  setSplit: React.Dispatch<React.SetStateAction<SplitState>>,\n  setProgress: React.Dispatch<React.SetStateAction<number>>,\n  onComplete: () => void\n) => {\n  const pageChange = useCallback(\n    (\n      newCurrentChunk: number,\n      newMiniChunks: number[],\n      newCurrentMiniChunk: number,\n      newTranscription: string\n    ) => {\n      const newChunkStart = getMiniChunkStart(\n        newMiniChunks[newCurrentMiniChunk - 1],\n        chunks[newCurrentChunk]\n      );\n\n      console.log(newTranscription);\n\n      setProgress(newChunkStart);\n      setSplit({\n        start: newChunkStart,\n        end: getMiniChunkEnd(newMiniChunks[newCurrentMiniChunk], duration),\n      });\n      return {\n        miniChunks: newMiniChunks,\n        currentChunk: newCurrentChunk,\n        currentMiniChunk: newCurrentMiniChunk,\n        transcription: newTranscription,\n      };\n    },\n    [setProgress, setSplit, chunks, duration]\n  );\n\n  const trancribeReducer = useCallback(\n    (state: TranscriberState, action: TranscriberAction): TranscriberState => {\n      if (\n        userName &&\n        [\n          \"go to next page\",\n          \"go to previous page\",\n          \"flush transcription changes\",\n        ].includes(action.actionType)\n      ) {\n        updateTranscription(\n          chunks[state.currentChunk],\n          state.transcription,\n          userName\n        );\n      }\n\n      switch (action.actionType) {\n        case \"go to next page\":\n          if (\n            state.currentMiniChunk === state.miniChunks.length - 1 &&\n            state.currentChunk < chunks.length - 1\n          ) {\n            const newCurrentChunk = state.currentChunk + 1;\n            return pageChange(\n              newCurrentChunk,\n              getMiniChunks(chunks[newCurrentChunk], duration),\n              0,\n              getUsersTranscription(chunks[newCurrentChunk], userName ?? \"\")\n                ?.content ?? \"\"\n            );\n          } else if (state.currentMiniChunk < state.miniChunks.length - 1) {\n            return pageChange(\n              state.currentChunk,\n              state.miniChunks,\n              state.currentMiniChunk + 1,\n              state.transcription\n            );\n          } else {\n            onComplete();\n          }\n          break;\n        case \"go to previous page\":\n          if (state.currentMiniChunk === 0 && state.currentChunk > 0) {\n            const newCurrentChunk = state.currentChunk - 1;\n            const newMiniChunks = getMiniChunks(\n              chunks[newCurrentChunk],\n              duration\n            );\n            return pageChange(\n              newCurrentChunk,\n              newMiniChunks,\n              newMiniChunks.length - 1,\n              getUsersTranscription(chunks[newCurrentChunk], userName ?? \"\")\n                ?.content ?? \"\"\n            );\n          } else if (state.currentMiniChunk > 0) {\n            return pageChange(\n              state.currentChunk,\n              state.miniChunks,\n              state.currentMiniChunk - 1,\n              state.transcription\n            );\n          }\n          break;\n        case \"transcription changed\":\n          return action.newTranscription !== undefined\n            ? { ...state, transcription: action.newTranscription }\n            : { ...state };\n        case \"go to first mini chunk\":\n          const firstMiniChunk = 0;\n          pageChange(\n            state.currentChunk,\n            state.miniChunks,\n            firstMiniChunk,\n            state.transcription\n          );\n          return { ...state, currentMiniChunk: firstMiniChunk };\n        case \"go to last mini chunk\":\n          const lastMiniChunk = state.miniChunks.length - 1;\n          pageChange(\n            state.currentChunk,\n            state.miniChunks,\n            lastMiniChunk,\n            state.transcription\n          );\n          return { ...state, currentMiniChunk: lastMiniChunk };\n        case \"refresh mini chunks\":\n          const newMiniChunks = getMiniChunks(\n            chunks[state.currentChunk],\n            duration\n          );\n          pageChange(state.currentChunk, newMiniChunks, 0, state.transcription);\n          return {\n            ...state,\n            currentMiniChunk: 0,\n            miniChunks: newMiniChunks,\n            transcription:\n              getUsersTranscription(chunks[state.currentChunk], userName ?? \"\")\n                ?.content ?? \"\",\n          };\n      }\n      return state;\n    },\n    [chunks, duration, updateTranscription, userName, onComplete, pageChange]\n  );\n  return trancribeReducer;\n};\n\nexport default useTranscriberReducer;\n","import { useDebounceCallback } from \"@react-hook/debounce\";\nimport { useCallback, useState } from \"react\";\n\nconst useAutoPauseOnType = (\n  playing: boolean,\n  setPlaying: React.Dispatch<React.SetStateAction<boolean>>\n) => {\n  /*\n   * Here, we automatically pause the video when the user types.\n   *\n   * If the video was paused when the user starts typing, keep it\n   * paused. Otherwise, play the video again once the user stops typing\n   */\n  const [, setTypingDebounced] = useState(false);\n  const [\n    playStateBeforeTypingDebounce,\n    setPlayStateBeforeTypingDebounce,\n  ] = useState(false);\n\n  const debouncedPlay = useDebounceCallback(() => {\n    setPlaying(playStateBeforeTypingDebounce);\n    setTypingDebounced(false);\n  }, 500);\n\n  const onType = useCallback(() => {\n    setTypingDebounced((typingDebounced) => {\n      if (!typingDebounced) {\n        setPlayStateBeforeTypingDebounce(playing);\n      }\n      return true;\n    });\n    debouncedPlay();\n    setPlaying(false);\n  }, [playing, setPlaying, debouncedPlay]);\n\n  return onType;\n};\n\nexport default useAutoPauseOnType;\n","// External Dependencies\nimport LocalizedStrings from \"react-localization\";\nimport {Button, MobileStepper, Slider, Grid } from \"@material-ui/core\";\nimport { ArrowLeft, ArrowRight, Check } from \"@material-ui/icons\";\nimport React, {\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from \"react\";\n\n// Internal Dependencies\nimport { UserContext } from \"../UserProvider/UserProvider\";\nimport VideoPlayer from \"../VideoPlayer/VideoPlayer\";\nimport useStyles from \"./TranscriberStyles\";\nimport useVideoPlayerController from \"../VideoPlayer/Hooks/useVideoPlayerController\";\nimport { useUpdateTranscription } from \"../../utils/ChunksContext/chunksActions\";\nimport chunksContext from \"../../utils/ChunksContext/chunksContext\";\nimport Slideshow from \"../Slideshow/Slideshow\";\nimport IndabaButton from \"../IndabaButton/IndabaButton\";\nimport BackButton from \"../BackButton/BackButton\";\nimport EditTranscriptionCard from \"../SimpleCard/EditTranscriptionCard\";\nimport SkipForwardBackButtons from \"../SkipForwardBackButtons/SkipForwardBackButtons\";\nimport { api_base_address } from \"../../utils/getApiKey\";\nimport {\n  getNameOf,\n  toShortTimeStamp,\n} from \"../../utils/chunkManipulation/chunkManipulation\";\nimport LoadingModal from \"../LoadingModal/LoadingModal\";\nimport OnboardingModal from \"../OnboardingModal/OnboardingModal\";\nimport useTranscriberReducer from \"./hooks/useTranscriberState\";\nimport useAutoPauseOnType from \"./hooks/useAutoPauseOnType\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    instructionsOne: \"You are about to Transcribe the chunks.\",\n    instructionOneStepLabel: \"The Aim\",\n    instructionsTwo:\n      \"Each chunk has been divided into 5 second clips for you. These clips will loop.\",\n    instructionTwoStepLabel: \"The Process\",\n    instructionsThree:\n      \"When you type, the video will pause until you stop typing\",\n    instructionThreeStepLabel: \"The Instruction\",\n    instructionsFour:\n      'When you are done transcribing a clip press the \">\" button',\n    instructionFourStepLabel: \"The Finish\",\n    last: \"Last\",\n    first: \"First\",\n  },\n});\n\nconst EmptyComponent: React.FC<{}> = () => {\n  return <div />;\n};\n\ntype TranscriberProps = {\n  story_id: string;\n  atExit: () => void;\n  onboarding: {\n    showOnboardingModal: boolean;\n    dismissOnboardingModal: () => void;\n  };\n};\n\nconst Transcriber: React.FC<TranscriberProps> = ({\n  story_id,\n  atExit,\n  onboarding,\n}) => {\n  const [chunks, setChunks] = chunksContext.useChunksState();\n\n  const { showOnboardingModal, dismissOnboardingModal } = onboarding;\n\n  const {\n    progressState,\n    playerRef,\n    splitState: [split, setSplit],\n    duration,\n    controller,\n    playingState: [playing, setPlaying],\n  } = useVideoPlayerController();\n\n  const updateTranscription = useUpdateTranscription(setChunks);\n\n  const { userName } = useContext(UserContext);\n\n  const { setProgressWithVideoUpdate } = progressState;\n\n  const transcriberReducer = useTranscriberReducer(\n    chunks,\n    duration,\n    updateTranscription,\n    userName,\n    setSplit,\n    setProgressWithVideoUpdate,\n    atExit\n  );\n\n  const [transcriberState, transcriberDispatch] = useReducer(\n    transcriberReducer,\n    {\n      currentChunk: 0,\n      currentMiniChunk: 0,\n      miniChunks: [],\n      transcription: \"\",\n    }\n  );\n  useEffect(() => {\n    if (duration !== 0) {\n      transcriberDispatch({ actionType: \"refresh mini chunks\" });\n    }\n  }, [duration]);\n\n  const lastPage = useMemo(\n    () =>\n      transcriberState.currentChunk === chunks.length - 1 &&\n      transcriberState.currentMiniChunk ===\n        transcriberState.miniChunks.length - 1,\n    [\n      transcriberState.currentChunk,\n      transcriberState.currentMiniChunk,\n      transcriberState.miniChunks,\n      chunks,\n    ]\n  );\n\n  const classes = useStyles();\n\n  const inputRef = useRef(null);\n\n  const focusInput = () => {\n    (inputRef.current\n      ? (inputRef.current as any)\n      : { focus: () => null }\n    ).focus();\n  };\n\n  useEffect(() => {\n    focusInput();\n  }, [\n    playing,\n    transcriberState.currentChunk,\n    transcriberState.currentMiniChunk,\n  ]);\n\n  const exitHandler = () => {\n    transcriberDispatch({ actionType: \"flush transcription changes\" });\n    atExit();\n  };\n\n  const onType = useAutoPauseOnType(playing, setPlaying);\n\n  return (\n    <Grid\n      item\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      style={{ height: \"85%\" }}\n    >\n      <LoadingModal open={duration === 0} />\n      {/* <Grid\n        item\n        container\n        className={classes.backButtonContainer}\n        xs={12}\n        style={{ height: \"10%\", minHeight: \"40px\" }}\n      >\n        \n      </Grid> */}\n      <BackButton action={exitHandler} />\n      <OnboardingModal\n        show={showOnboardingModal}\n        dismiss={dismissOnboardingModal}\n        title={<h2 style={{ margin: 0 }}>Transcribing Instructions</h2>}\n        steps={[\n          strings.instructionsOne,\n          strings.instructionsTwo,\n          strings.instructionsThree,\n          strings.instructionsFour,\n        ]}\n        stepsLabels={[\n          strings.instructionOneStepLabel,\n          strings.instructionTwoStepLabel,\n          strings.instructionThreeStepLabel,\n          strings.instructionFourStepLabel,\n        ]}\n        startButtonContent={<div>Start Transcribing</div>}\n      />\n      {chunks.length && (\n        <>\n          <Grid\n            item\n            container\n            alignContent=\"center\"\n            alignItems=\"center\"\n            className={classes.videoContainer}\n          >\n            <VideoPlayer\n              progressState={progressState}\n              playerRef={playerRef}\n              url={`${api_base_address}/api/watch/getvideo/${story_id}`}\n              controller={controller}\n              loop\n            />\n          </Grid>\n          <Grid\n            item\n            container\n            xs={12}\n            style={{ width: \"80%\", marginBottom: \"16px\"}}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={12}>\n              <div style={{textAlign:'center',overflowWrap: \"anywhere\" }}>\n                  {getNameOf(chunks[transcriberState.currentChunk])} ({transcriberState.currentChunk+1} of {chunks.length})\n              </div>\n              </Grid>\n            \n            <Grid item xs={12}\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      marginTop:'-8px',\n                      marginBottom:\"-8px\",\n                      margin: \"0 24px 0 24px\",\n                    }}\n                  >\n                    \n                    <Slider\n                      ThumbComponent={EmptyComponent}\n                      value={[\n                        chunks[transcriberState.currentChunk].starttimeseconds *\n                          100,\n                        chunks[transcriberState.currentChunk].endtimeseconds *\n                          100,\n                      ]}\n                      classes={{\n                        rail: classes.chunkProgressRail,\n                        track: classes.chunkProgressTrack,\n                        mark: classes.chunkProgressMark,\n                        markActive: classes.chunkProgressMark,\n                      }}\n                      marks={[\n                        {\n                          value: split.start * 100,\n                          label: toShortTimeStamp(\n                            transcriberState.miniChunks[\n                              transcriberState.currentMiniChunk\n                            ] * duration\n                          ),\n                        },\n                      ]}\n                    />\n                  </Grid>\n                  <Grid item>\n              \n              <MobileStepper\n              \n              variant=\"dots\"\n              steps={transcriberState.miniChunks.length}\n              activeStep={transcriberState.currentMiniChunk}\n              position=\"static\"\n              classes={{\n                root:classes.stepperRoot,\n                dotActive: classes.stepperDots,\n                dots: classes.stepperDotsContainer,\n                dot: classes.stepperDot,\n              }}\n              nextButton={\n                <Button\n                  onClick={() =>\n                    transcriberDispatch({ actionType: \"go to last mini chunk\" })\n                  }\n                >\n                  {strings.last}\n                </Button>\n              }\n              backButton={\n                <Button\n                  onClick={() =>\n                    transcriberDispatch({\n                      actionType: \"go to first mini chunk\",\n                    })\n                  }\n                >\n                  {strings.first}\n                </Button>\n              }\n            />\n            </Grid>\n            <Slideshow\n              currentPage={transcriberState.currentChunk}\n              onNavigate={() => null}\n              numberOfPages={chunks.length}\n              onComplete={exitHandler}\n              leftColumn={\n                <div>\n                  <IndabaButton\n                    onClick={() =>\n                      transcriberDispatch({ actionType: \"go to previous page\" })\n                    }\n                    style={{\n                      height: \"300px\",\n                      margin: \"0px 6px 0px 6px\",\n                      width: \"70px\",\n                    }}\n                  >\n                    <ArrowLeft style={{fontSize:'50'}} />\n                  </IndabaButton>\n                </div>\n              }\n              rightColumn={\n                <div>\n                  <IndabaButton\n                    style={{\n                      backgroundColor: lastPage ? \"green\" : \"#d9534f\",\n                      height: \"300px\",\n                      margin: \"0px 6px 0px 6px\",\n                      width: \"70px\",\n                    }}\n                    onClick={() =>\n                      transcriberDispatch({ actionType: \"go to next page\" })\n                    }\n                  >\n                    {lastPage ? <Check /> : <ArrowRight style={{fontSize:'50'}} />}\n                  </IndabaButton>\n                </div>\n              }\n            >\n              <EditTranscriptionCard\n                // transcriptionIcon={\n                //   <div\n                //     style={{\n                //       display: \"flex\",\n                //       flexDirection: \"column\",\n                //       margin: \"0 8px 0 8px\",\n                //     }}\n                //   >\n                //     <span style={{ fontWeight: 600, overflowWrap: \"anywhere\" }}>\n                //       {getNameOf(chunks[transcriberState.currentChunk])}\n                //     </span>\n                //     <Slider\n                //       ThumbComponent={EmptyComponent}\n                //       value={[\n                //         chunks[transcriberState.currentChunk].starttimeseconds *\n                //           100,\n                //         chunks[transcriberState.currentChunk].endtimeseconds *\n                //           100,\n                //       ]}\n                //       classes={{\n                //         rail: classes.chunkProgressRail,\n                //         track: classes.chunkProgressTrack,\n                //         mark: classes.chunkProgressMark,\n                //         markActive: classes.chunkProgressMark,\n                //       }}\n                //       marks={[\n                //         {\n                //           value: split.start * 100,\n                //           label: toShortTimeStamp(\n                //             transcriberState.miniChunks[\n                //               transcriberState.currentMiniChunk\n                //             ] * duration\n                //           ),\n                //         },\n                //       ]}\n                //     />\n                //   </div>\n                // }\n                inputRef={inputRef}\n                transcriptionValue={transcriberState.transcription}\n                onChange={(newValue: string) => {\n                  onType();\n                  transcriberDispatch({\n                    actionType: \"transcription changed\",\n                    newTranscription: newValue,\n                  });\n                }}\n              />\n            </Slideshow>\n          </Grid>\n        </>\n      )}\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          bottom: 0,\n          width: \"100%\",\n        }}\n      >\n        {false && (\n          <SkipForwardBackButtons\n            style={{\n              margin: \"8px\",\n              width: \"calc(100% - 16px)\",\n              display: \"flex\",\n              justifyContent: \"space-between\",\n            }}\n            skipForward={() =>\n              duration &&\n              setProgressWithVideoUpdate((progress) => progress + 5 / duration)\n            }\n            skipBackward={() =>\n              duration &&\n              setProgressWithVideoUpdate((progress) => progress - 5 / duration)\n            }\n          />\n        )}\n      </div>\n    </Grid>\n  );\n};\n\nexport default Transcriber;\n","// External Dependencies\nimport axios from \"axios\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\n// Internal Dependencies\nimport api_key, { api_base_address } from \"../../../utils/getApiKey\";\nimport { Chunk, Story } from \"../../../utils/types\";\n\nconst pushStoryChanges = (new_story: Story, story_id: string) => {\n  // console.log(\"pushStoryChanges\", new_story.transcription.chunks);\n  const url = `${api_base_address}/api/watch/savedit/${story_id}?apikey=${api_key}`;\n  axios.request<Story>({\n    url: url,\n    method: \"POST\",\n    withCredentials: true,\n    data: new_story,\n  });\n};\n\n/**\n * This hook synchronizes the chunks being created and edited in the user\n * interface with the ourstory backend\n *\n * setChunks refetches the chunks from the server everytime it is called\n *\n * @param chunks - the chunks state to synchonise to the api\n * @param setChunks - setter for the chunks\n */\nconst useOurstoryApi = (\n  story_id: string\n): {\n  storyTitle: string | undefined;\n  chunksState: [Chunk[], (setter: (newState: Chunk[]) => Chunk[]) => void];\n} => {\n  const [story, setStory] = useState<Story | undefined>(undefined);\n\n  const chunks = useMemo(\n    () => story?.transcription.chunks ?? [],\n    [story?.transcription?.chunks]\n  );\n\n  const setChunks = (new_chunks: Chunk[]) => {\n    setStory((story) =>\n      story === undefined\n        ? undefined\n        : { ...story, transcription: { chunks: new_chunks } }\n    );\n  };\n\n  const setChunksWithUpdate = useCallback(\n    async (setter: (new_chunks: Chunk[]) => Chunk[]) => {\n      // console.log(\n      //   \"setChunksWithUpdate, currentsstate:\",\n      //   story?.transcription.chunks\n      // );\n      const new_chunks = setter(\n        (\n          await axios.request<Chunk[]>({\n            withCredentials: true,\n            url: `${api_base_address}/api/watch/edit/${story_id}`,\n            transformResponse: (r: string) =>\n              (JSON.parse(r) as Story)?.transcription?.chunks ?? [],\n          })\n        ).data\n      );\n      // console.log(new_chunks);\n\n      setStory((old_story) => {\n        const new_story =\n          old_story === undefined\n            ? undefined\n            : { ...old_story, transcription: { chunks: new_chunks } };\n        new_story && pushStoryChanges(new_story, story_id);\n        return new_story;\n      });\n    },\n    [story_id]\n  );\n\n  useEffect(() => {\n    // console.log(story_id)\n    if (story_id) {\n      axios\n        .request<Story>({\n          url: `${api_base_address}/api/watch/edit/${story_id}`,\n          withCredentials: true,\n          transformResponse: (r: string) => JSON.parse(r),\n        })\n        .then((response) => {\n          setStory(response.data);\n          setChunks(response.data?.transcription?.chunks ?? []);\n        });\n    }\n  }, [story_id]);\n\n  const memoChunks = useMemo<\n    [Chunk[], (setter: (newState: Chunk[]) => Chunk[]) => void]\n  >(() => [chunks, setChunksWithUpdate], [chunks, setChunksWithUpdate]);\n\n  return {\n    storyTitle: story && story.title,\n    chunksState: memoChunks,\n  };\n};\n\nexport default useOurstoryApi;\n","// External Dependencies\nimport {\n  Box,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  makeStyles,\n  Radio,\n  Typography,\n  Card,\n  Button,\n  CardActions\n} from \"@material-ui/core\";\nimport LocalizedStrings from \"react-localization\";\nimport {\n  // AccountCircle,\n  ArrowLeft,\n  ArrowRight,\n  Check,\n  // Done,\n  // Edit,\n} from \"@material-ui/icons\";\nimport React, { useMemo, useContext, useEffect, useState } from \"react\";\n\n// Internal Dependencies\nimport useSlideshow from \"../../hooks/useSlideshow\";\nimport { hasTranscription,getNameOf,toShortTimeStamp,secondsOf,parseChunkTimeStamps } from \"../../utils/chunkManipulation/chunkManipulation\";\nimport {\n  useDeleteReview,\n  useUpdateReview,\n  useUpdateTranscription,\n} from \"../../utils/ChunksContext/chunksActions\";\nimport chunksContext from \"../../utils/ChunksContext/chunksContext\";\nimport { api_base_address } from \"../../utils/getApiKey\";\nimport { Transcription } from \"../../utils/types\";\nimport BackButton from \"../BackButton/BackButton\";\nimport CentralModal from \"../CentralModal/CentralModal\";\nimport IndabaButton from \"../IndabaButton/IndabaButton\";\nimport LoadingModal from \"../LoadingModal/LoadingModal\";\nimport OnboardingModal from \"../OnboardingModal/OnboardingModal\";\n// import ChunkCard from \"../SimpleCard/ChunkCard\";\n// import SimpleCard from \"../SimpleCard/SimpleCard\";\nimport EditTranscriptionCard from \"../SimpleCard/EditTranscriptionCard\";\nimport Slideshow from \"../Slideshow/Slideshow\";\nimport { UserContext } from \"../UserProvider/UserProvider\";\nimport useVideoPlayerController from \"../VideoPlayer/Hooks/useVideoPlayerController\";\nimport VideoPlayer from \"../VideoPlayer/VideoPlayer\";\nimport WarningMessage from \"../WarningMessage/WarningMessage\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    instructionsOne:\n      \"You are about to review the transcriptions made on the video.\",\n    instructionOneStepLabel: \"Why?\",\n    instructionsTwo:\n      \"For each chunk, select one of the transcriptions from the list. You can do this by clicking on the text or the check box to the left of the text.\",\n    instructionTwoStepLabel: \"What?\",\n    instructionsThree:\n      \"You can also edit the transcriptions by clicking on the pencil button above the text.\",\n    instructionThreeStepLabel: \"How\",\n    editingTranscriptionWarningHeading: \"You are editing {0}'s transcription\",\n    nameTranscription: \"{0}: {1}\",\n    instructionsTitle: \"Reviewing Instructions\",\n  },\n});\n\ntype ReviewerProps = {\n  story_id: string;\n  atExit: () => void;\n  onboarding: {\n    showOnboardingModal: boolean;\n    dismissOnboardingModal: () => void;\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  doneButton: {\n    backgroundColor: \"green\",\n    color: \"white\",\n  },\n  cardContainer: {\n    marginTop: \"8px\",\n    marginBottom: \"8px\",\n    padding: \"0 8px 0 8px\",\n    width: \"100%\",\n  },\n  backButtonContainer: {\n    marginTop: \"4px\",\n    padding: \"0px\",\n  },\n  videoContainer: {\n    height: \"40%\",\n    minHeight: \"350px\",\n    maxWidth: \"80%\",\n    [theme.breakpoints.up(\"md\")]: {\n      maxWidth: \"50%\",\n    },\n  },\n  textReview: {\n    padding: \"8px\",\n    overflowWrap: \"anywhere\",\n    whiteSpace: \"pre-line\",\n    maxHeight: \"500px\",\n    overflowY: \"scroll\",\n    border: \"2px solid rgba(0, 0, 0, 0.12)\",\n    borderRadius: \"6px\",\n    marginRight: \"12px\",\n    flexGrow: 1,\n    [theme.breakpoints.up(\"md\")]: {\n      maxHeight: \"250px\",\n    },\n  },\n}));\n\nexport const Reviewer: React.FC<ReviewerProps> = ({\n  atExit,\n  story_id,\n  onboarding,\n}) => {\n  const { showOnboardingModal, dismissOnboardingModal } = onboarding;\n\n  const {\n    progressState,\n    splitState: [, setSplit],\n    controller: playerController,\n    playerRef,\n    duration,\n  } = useVideoPlayerController();\n\n  const { setProgressWithVideoUpdate } = progressState;\n\n  const [chunks, setChunks] = chunksContext.useChunksState();\n\n  const classes = useStyles();\n\n  const chunksToReview = chunks.filter(hasTranscription);\n\n  const { page, goTo, lastPage } = useSlideshow(chunksToReview);\n\n  const currentChunk = useMemo(\n    /**\n     * Here, if the chunks to review array is empty, we use a dummy chunk,\n     * as we are about to exit, and if we set it to undefined we will crash\n     */\n    () => chunksToReview[page],\n    [page, chunksToReview]\n  );\n\n  /*\n   * When the user navigates between chunks,\n   * this effect keeps the split and progress of\n   * the video player up to date\n   */\n  useEffect(() => {\n    setSplit({\n      start: currentChunk.starttimeseconds,\n      end: currentChunk.endtimeseconds,\n    });\n    setProgressWithVideoUpdate(currentChunk.starttimeseconds);\n  }, [page, chunks, currentChunk, setProgressWithVideoUpdate, setSplit]);\n\n  const updateReview = useUpdateReview(setChunks);\n  const deleteReview = useDeleteReview(setChunks);\n\n  const { userName } = useContext(UserContext);\n\n  /*\n   * This is the state for the new transcription being edited\n   * when the user decides to edit a transcription.\n   */\n  const [transcriptionEdit, setTranscriptionEdit] = useState(\"\");\n\n  /*\n   * State to keep track of which transcription is currently\n   * being edited\n   */\n  const [editingTranscription, setEditingTranscription] = useState<\n    undefined | Transcription\n  >(undefined);\n\n  useEffect(() => {\n    setTranscriptionEdit(\n      editingTranscription ? editingTranscription.content : \"\"\n    );\n  }, [editingTranscription]);\n\n  const updateTranscription = useUpdateTranscription(setChunks);\n\n  return (\n    <Grid\n      container\n      alignContent=\"center\"\n      alignItems=\"center\"\n      spacing={1}\n      direction=\"column\"\n    >\n      <LoadingModal open={duration === 0} />\n      {/* <Grid\n        item\n        container\n        className={classes.backButtonContainer}\n        xs={12}\n        style={{ height: \"10%\", minHeight: \"40px\" }}\n      >\n        \n      </Grid> */}\n      <BackButton action={atExit} />\n      <Grid\n        item\n        container\n        alignContent=\"center\"\n        alignItems=\"center\"\n        className={classes.videoContainer}\n      >\n        <VideoPlayer\n          playerRef={playerRef}\n          progressState={progressState}\n          url={`${api_base_address}/api/watch/getvideo/${story_id}`}\n          controller={playerController}\n        />\n        \n      </Grid>\n      <Grid item alignContent=\"center\" style={{marginTop:'-10px'}}>\n          {getNameOf(currentChunk)}&nbsp;\n           \n          ({`${toShortTimeStamp(secondsOf(parseChunkTimeStamps(currentChunk).start))} - ${toShortTimeStamp(\n            secondsOf(parseChunkTimeStamps(currentChunk).end)\n          )}`})\n          </Grid>\n      <Grid\n        item\n        container\n        xs={12}\n        style={{ height: \"40%\", marginBottom: \"16px\" }}\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Slideshow\n          currentPage={page}\n          onNavigate={goTo}\n          numberOfPages={chunksToReview.length}\n          onComplete={atExit}\n          style={{ width: \"100%\",marginLeft:'-28px' }}\n          contentContainerStyle={{ margin: \"0px 0px\", marginLeft:'18px',marginRight:'-10px' }}\n          leftColumn={\n            <div\n              style={{\n                height: \"300px\",\n                margin: \"0px 6px 0px 6px\",\n                width: \"70px\",\n                zIndex: 1,\n              }}\n            >\n              <IndabaButton\n                onClick={() => goTo(\"prev\")}\n                style={{ height: \"300px\" }}\n              >\n                <ArrowLeft style={{ fontSize: 50 }} />\n              </IndabaButton>\n            </div>\n          }\n          rightColumn={\n            <div\n              style={{\n                margin: \"0px 6px 0px 6px\",\n                width: \"70px\",\n                zIndex: 1,\n              }}\n            >\n              <IndabaButton\n                onClick={() => (lastPage ? atExit() : goTo(\"next\"))}\n                style={{\n                  backgroundColor: lastPage ? \"green\" : \"#d9534f\",\n                  height: \"300px\",\n                }}\n              >\n                {lastPage ? <Check style={{ fontSize: 50 }} /> : <ArrowRight style={{ fontSize: 50 }} />}\n              </IndabaButton>\n            </div>\n          }\n        >\n          <div>\n            {\n            currentChunk.transcriptions.map(\n              (transcription) =>\n                transcription.content && (\n                  <Card variant=\"outlined\" style={{marginBottom:'8px'}}>\n                    \n                  <Box key={transcription.id} className={classes.cardContainer}>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"end\",\n                        marginBottom: \"4px\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          fontSize: \"1.2rem\",\n                          marginTop:'-6px',\n                          display: \"flex\",\n                          // justifyContent: \"center\",\n                          // paddingLeft: \"10px\",\n                        }}\n                      >\n                        {/* <AccountCircle /> */}\n                        {/* <div\n                          style={{\n                            // marginLeft: \"4px\",\n                            overflowWrap: \"anywhere\",\n                          }}\n                        > */}\n                          {transcription.creatorid}\n                        {/* </div> */}\n                      </div>\n                      \n                    </div>\n                    <div\n                      onClick={() =>\n                        userName &&\n                        (currentChunk.review?.selectedtranscription !==\n                        transcription.id\n                          ? updateReview(currentChunk, transcription, userName)\n                          : deleteReview(currentChunk))\n                      }\n                      style={{ display: \"flex\", flexDirection: \"row\" }}\n                    >\n                      \n                      <Typography style={{fontSize:'1.3em',padding:'8px'}}>\n                        {transcription.content}\n                      </Typography>\n                    </div>\n                  </Box>\n                  <Divider />\n                  <CardActions style={{justifyContent:\"space-between\"}}>\n                    \n                  <Button\n                        onClick={() => setEditingTranscription(transcription)}\n                      >\n                        {/* <Edit fontSize=\"small\" /> */}\n                        Correct\n                      </Button>\n                      <div>\n                      Select for Final\n                  <Radio\n                        checked={\n                          currentChunk.review?.selectedtranscription ===\n                          transcription.id\n                        }\n                        onChange={(_, checked) =>\n                          userName &&\n                          (checked\n                            ? updateReview(\n                                currentChunk,\n                                transcription,\n                                userName\n                              )\n                            : deleteReview(currentChunk))\n                        }\n                        style={{ backgroundColor: \"initial\" }}\n                      />\n                      </div>\n                      </CardActions>\n                  </Card>\n                )\n            )}\n          </div>\n        </Slideshow>\n      </Grid>\n      <OnboardingModal\n        show={showOnboardingModal}\n        dismiss={dismissOnboardingModal}\n        steps={[\n          strings.instructionsOne,\n          strings.instructionsTwo,\n          strings.instructionsThree,\n        ]}\n        stepsLabels={[\n          strings.instructionOneStepLabel,\n          strings.instructionTwoStepLabel,\n          strings.instructionThreeStepLabel,\n        ]}\n        title={<h2 style={{ margin: 0 }}>{strings.instructionsTitle}</h2>}\n        startButtonContent={<div>Start Reviewing</div>}\n      />\n      <CentralModal\n        open={editingTranscription !== undefined}\n        header={\n          <WarningMessage\n            message={\n              <div style={{ whiteSpace: \"pre\" }}>\n                {strings.formatString(\n                  strings.editingTranscriptionWarningHeading,\n                  <span\n                    style={{ textDecoration: \"underline\" }}\n                  >{`${editingTranscription?.creatorid}`}</span>\n                )}\n              </div>\n            }\n          />\n        }\n        exit={() => {\n          setEditingTranscription(undefined);\n        }}\n      >\n        <div style={{ position: \"relative\" }}>\n          <List style={{ maxHeight: \"300px\", overflow: \"scroll\" }}>\n            {currentChunk.transcriptions\n              .filter((t) => t.id !== editingTranscription?.id)\n              .map((t) => (\n                <ListItem style={{ display: \"flex\", whiteSpace: \"pre\" }}>\n                  {strings.formatString(\n                    strings.nameTranscription,\n                    <div\n                      style={{\n                        alignSelf: \"flex-start\",\n                        fontWeight: 600,\n                      }}\n                    >\n                      {t.creatorid}\n                    </div>,\n                    <div\n                      style={{ whiteSpace: \"pre\", overflowWrap: \"anywhere\" }}\n                    >\n                      {t.content}\n                    </div>\n                  )}\n                </ListItem>\n              ))}\n          </List>\n          <div style={{margin:'10px'}}> \n          <EditTranscriptionCard\n            transcriptionValue={transcriptionEdit}\n            onChange={setTranscriptionEdit}\n          />\n          \n          </div>\n          <Divider variant=\"fullWidth\" />\n          <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n            <Button\n              onClick={() => {\n                editingTranscription &&\n                  updateTranscription(\n                    currentChunk,\n                    transcriptionEdit,\n                    editingTranscription.creatorid\n                  );\n                setEditingTranscription(undefined);\n              }}\n              style={{\n                margin: \"8px\",\n                // backgroundColor: \"green\",\n                position: \"relative\",\n                bottom: 0,\n                right: 0,\n              }}\n              disabled={transcriptionEdit === \"\"}\n            >\n              Complete\n              {/* <Done /> */}\n            </Button>\n          </div>\n        </div>\n      </CentralModal>\n    </Grid>\n  );\n};\n","// External Dependencies\nimport {\n  Container,\n  Typography,\n  GridList,\n  GridListTile,\n  List,\n  // Divider,\n  ListItem,\n} from \"@material-ui/core\";\nimport React, { useMemo } from \"react\";\nimport LocalizedStrings from \"react-localization\";\n\n// Internal Dependencies\nimport {\n  listContributions,\n  getNameOf,\n  toShortTimeStamp,\n  parseTimeStamp,\n  secondsOf,\n} from \"../../utils/chunkManipulation/chunkManipulation\";\nimport { Contribution, Chunk } from \"../../utils/types\";\nimport CentralModal from \"../CentralModal/CentralModal\";\nimport FlatPaper from \"../FlatPaper/FlatPaper\";\nimport SimpleCard from \"../SimpleCard/SimpleCard\";\nimport { getUsersTranscription } from \"../Transcriber/hooks/useTranscriberState\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    yr: \"year\",\n    mt: \"month\",\n    dy: \"day\",\n    hr: \"hour\",\n    min: \"minute\",\n    sec: \"second\",\n    yrs: \"years\",\n    mts: \"months\",\n    dys: \"days\",\n    hrs: \"hours\",\n    mins: \"minutes\",\n    secs: \"seconds\",\n    periodAgo: \"{0} {1} ago\",\n    contributions: \"Contributions\",\n\n    created: \"Created\",\n    transcribed: \"Transcribed\",\n    reviewed: \"Reviewed\",\n    contributionDescription: '{0} the chunk \"{1}\" ({2}) {3}', // Example: Created the chunk \"chunk_name\" (00:00:00 - 01:01:01) 4 minutes ago\n  },\n});\n\nconst pluralize = (epoch: string) => {\n  return strings.getString(`${epoch}s`);\n};\n\nconst epochs = [\n  [\"yr\", 31536000],\n  [\"mt\", 2592000],\n  [\"dy\", 86400],\n  [\"hr\", 3600],\n  [\"min\", 60],\n  [\"sec\", 1],\n] as [string, number][];\n\nconst getDuration = (\n  timeAgoInSeconds: number\n): { interval: number; epoch: string } => {\n  for (let [name, seconds] of epochs) {\n    const interval = Math.floor(timeAgoInSeconds / +seconds);\n    if (interval >= 1) {\n      return {\n        interval: interval,\n        epoch: name,\n      };\n    }\n  }\n  return { interval: 0, epoch: strings.sec };\n};\n\nconst timeAgo = (date: Date) => {\n  const timeAgoInSeconds = Math.floor((+new Date() - +new Date(date)) / 1000);\n  const { interval, epoch } = getDuration(timeAgoInSeconds);\n  return epoch === strings.sec\n    ? strings.formatString(strings.periodAgo, \"Less than a\", \"minute\")\n    : strings.formatString(\n        strings.periodAgo,\n        interval.toString(),\n        `${interval === 1 ? strings.getString(epoch) : pluralize(epoch)}`\n      );\n};\n\nconst ContributionDescription: React.FC<{\n  contribution: Contribution;\n}> = ({ contribution }) => {\n  const { type, name, chunk } = contribution;\n  const typeDescription = (type: \"chunk\" | \"transcription\" | \"review\") => {\n    switch (type) {\n      case \"chunk\":\n        return strings.created;\n      case \"transcription\":\n        return strings.transcribed;\n      case \"review\":\n        return strings.reviewed;\n    }\n  };\n  return (\n    <span style={{ whiteSpace: \"pre\", display: \"flex\", flexWrap: \"wrap\" }}>\n      {strings.formatString(\n        strings.contributionDescription,\n        <span style={{ fontWeight: \"bold\" }}>{typeDescription(type)}</span>,\n        <div style={{ overflowWrap: \"anywhere\" }}>{getNameOf(chunk)}</div>,\n        <>\n          {`${toShortTimeStamp(\n            secondsOf(parseTimeStamp(chunk.starttimestamp))\n          )} - ${toShortTimeStamp(\n            secondsOf(parseTimeStamp(chunk.endtimestamp))\n          )}`}\n        </>,\n        <Typography\n          variant=\"subtitle2\"\n          style={{ marginLeft: \"4px\", fontWeight: 600 }}\n        >\n          {timeAgo(\n            type === \"chunk\"\n              ? chunk.updatedat\n              : type === \"transcription\"\n              ? getUsersTranscription(chunk, name)?.updatedat ?? new Date()\n              : chunk.review?.reviewedat ?? new Date()\n          )}\n        </Typography>\n      )}\n    </span>\n  );\n};\n\nconst ContributerListModal: React.FC<{\n  show: boolean;\n  exit: () => void;\n  chunks: Chunk[];\n}> = ({ show, exit, chunks }) => {\n  const contributers = useMemo(\n    () =>\n      Array.from(\n        listContributions(chunks).reduce(\n          (acc, contribution) =>\n            acc.get(contribution.name)\n              ? acc.set(\n                  contribution.name,\n                  acc.get(contribution.name)!.concat([contribution])\n                )\n              : acc.set(contribution.name, [contribution]),\n          new Map<string, Contribution[]>()\n        )\n      ),\n    [chunks]\n  );\n\n  return (\n    <CentralModal\n      header={\n        <Typography variant=\"h3\" style={{ fontWeight: \"lighter\" }}>\n          {strings.contributions}\n        </Typography>\n      }\n      open={show}\n      exit={exit}\n    >\n      <FlatPaper>\n        <Container\n          style={{ height: \"80vh\", width: \"90vw\", overflow: \"scroll\" }}\n        >\n          <GridList cols={1} cellHeight=\"auto\">\n            {contributers.map((contributer) => (\n              <GridListTile key={contributer[0]}>\n                <SimpleCard\n                  title={\n                    <div style={{ overflowWrap: \"anywhere\" }}>\n                      {contributer[0]}\n                    </div>\n                  }\n                >\n                  <List>\n                    {contributer[1].map((contribution) => (\n                      <ListItem\n                        key={`${contribution.chunk.id}${contribution.type}`}\n                      >\n                        <ContributionDescription contribution={contribution} />\n                      </ListItem>\n                    ))}\n                  </List>\n                </SimpleCard>\n                {/* <Divider /> */}\n              </GridListTile>\n            ))}\n          </GridList>\n        </Container>\n      </FlatPaper>\n    </CentralModal>\n  );\n};\n\nexport default ContributerListModal;\n","// External Dependencies\nimport React, { useMemo, useState, useCallback } from \"react\";\nimport LocalizedStrings from \"react-localization\";\n\n// Internal Dependencies\nimport ChunkEditor from \"../ChunkEditor/ChunkEditor\";\nimport Dashboard from \"../Dashboard/Dashboard\";\nimport Header from \"../Header/Header\";\nimport useSteps from \"./hooks/useSteps\";\nimport View from \"./Views\";\nimport { useStoryId } from \"../../utils/getId\";\nimport Transcriber from \"../Transcriber/Transcriber\";\nimport UserProvider from \"../UserProvider/UserProvider\";\nimport useOurstoryApi from \"./hooks/useOurstoryApi\";\nimport { Reviewer } from \"../Reviewer/Reviewer\";\nimport chunksContext from \"../../utils/ChunksContext/chunksContext\";\nimport {\n  countChunksWithTranscription,\n  countReviewedChunks,\n  getLastEndTimeSeconds,\n} from \"../../utils/chunkManipulation/chunkManipulation\";\nimport useToggle from \"../../hooks/useToggle\";\nimport ContributerListModal from \"../ContributersModal/ContributersModal\";\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\n\nconst strings = new LocalizedStrings({\n  en: {\n    loading: \"Loading\",\n    viewInstructions: \"View Instructions\",\n    chunking: \"Chunking\",\n    dashboard: \"Dashboard\",\n    reviewing: \"Reviewing\",\n    transcribing: \"Transcribing\",\n    showContributions: \"Show Contributions\"\n  },\n});\n\nconst getTitle = (view: View) => {\n  switch (view) {\n    case View.Chunking:\n      return strings.chunking;\n    case View.Dashboard:\n      return strings.dashboard;\n    case View.Reviewing:\n      return strings.reviewing;\n    case View.Transcribing:\n      return strings.transcribing;\n  }\n};\n\nconst App: React.FC<{}> = () => {\n  const [view, setView] = useState<View>(View.Dashboard);\n  const { ChunksProvider } = chunksContext;\n\n  const story_id = useStoryId();\n\n  const {\n    storyTitle,\n    chunksState: [chunks, setChunks],\n  } = useOurstoryApi(story_id);\n\n  const chunkingProgress = useMemo(() => getLastEndTimeSeconds(chunks), [\n    chunks,\n  ]);\n  const transcriptionProgress = useMemo(\n    () =>\n      chunks.length ? countChunksWithTranscription(chunks) / chunks.length : 0,\n    [chunks]\n  );\n  const reviewProgress = useMemo(\n    () => (chunks.length ? countReviewedChunks(chunks) / chunks.length : 0),\n    [chunks]\n  );\n\n  const steps = useSteps(setView, [\n    { progress: chunkingProgress * 100, enabled: true },\n    {\n      progress: transcriptionProgress * 100,\n      enabled: chunkingProgress > 0,\n    },\n    {\n      progress: reviewProgress * 100,\n      enabled: transcriptionProgress > 0,\n    },\n  ]);\n\n  const [showContributers, toggleShowContributers] = useToggle(false);\n\n  const [\n    showChunkEditorOnboarding,\n    setShowChunkEditorOnboarding,\n  ] = useLocalStorage(\"showChunkEditorOnboardingModal\", \"true\");\n\n  const [\n    showTranscriberOnboarding,\n    setShowTranscriberOnboarding,\n  ] = useLocalStorage(\"showTranscriberOnboardingModal\", \"true\");\n\n  const [showReviewerOnboardring, setShowReviewerOnboarding] = useLocalStorage(\n    \"showReviewerOnboardingModal\",\n    \"true\"\n  );\n\n  const logOutAction = () => {\n    setShowChunkEditorOnboarding(\"true\");\n    setShowTranscriberOnboarding(\"true\");\n    setShowReviewerOnboarding(\"true\");\n  };\n\n  const exit = useCallback(() => setView(View.Dashboard), []);\n\n  // const onBoardingItem = ()=>{\n  //   return {\n  //     handler: (): void => {\n  //     setShowChunkEditorOnboarding(\"true\");\n  //   }\n  // };\n  // };\n\n  const contextMenuItems = useMemo(\n    () =>\n        view === View.Chunking\n          ? [{\n              content: <div>{strings.viewInstructions}</div>,\n              handler: (): void => {\n                setShowChunkEditorOnboarding(\"true\");\n              },\n            }]\n          : view === View.Reviewing\n          ? [{\n              content: <div>{strings.viewInstructions}</div>,\n              handler: (): void => {\n                setShowReviewerOnboarding(\"true\");\n              },\n            }]\n          : view === View.Transcribing\n          ? [{\n              content: <div>{strings.viewInstructions}</div>,\n              handler: (): void => {\n                setShowTranscriberOnboarding(\"true\");\n              },\n            }]\n          : [],\n    [\n      view,\n      // setShowChunkEditorOnboarding,\n      // setShowReviewerOnboarding,\n      // toggleShowContributers,\n    ]\n  );\n\n  return (\n    <ChunksProvider state={[chunks, setChunks]}>\n      <UserProvider>\n        <main>\n          <ContributerListModal\n            chunks={chunks}\n            show={showContributers}\n            exit={toggleShowContributers}\n          />\n          <Header\n            title={getTitle(view)}\n            hidden={view === View.Transcribing}\n            contextMenuItems={contextMenuItems}\n            // showOnBoarding={onBoardingItem}\n          >\n            {view === View.Dashboard ? (\n              <Dashboard\n                steps={steps}\n                storyName={storyTitle ? storyTitle : strings.loading}\n                logOutAction={logOutAction}\n              />\n            ) : view === View.Chunking ? (\n              <ChunkEditor\n                story_id={story_id}\n                atExit={exit}\n                onboarding={{\n                  showOnboardingModal: showChunkEditorOnboarding === \"true\",\n                  dismissOnboardingModal: () =>\n                    setShowChunkEditorOnboarding(\"false\"),\n                }}\n              />\n            ) : view === View.Transcribing ? (\n              <Transcriber\n                story_id={story_id}\n                atExit={exit}\n                onboarding={{\n                  showOnboardingModal: showTranscriberOnboarding === \"true\",\n                  dismissOnboardingModal: () =>\n                    setShowTranscriberOnboarding(\"false\"),\n                }}\n              />\n            ) : view === View.Reviewing ? (\n              <Reviewer\n                atExit={exit}\n                story_id={story_id}\n                onboarding={{\n                  showOnboardingModal: showReviewerOnboardring === \"true\",\n                  dismissOnboardingModal: () =>\n                    setShowReviewerOnboarding(\"false\"),\n                }}\n              />\n            ) : null}\n          </Header>\n        </main>\n      </UserProvider>\n    </ChunksProvider>\n  );\n};\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport const useStoryId = () => {\n  const [storyId, setStoryId] = useState(\"\");\n\n  useEffect(() => {\n    //console.log(window.location.href.split('/')[4].split('?')[0]);\n    let editid = window.location.href.split('editid=')[1].split('&')[0];\n    // console.log(editid);\n    // if (process.env.NODE_ENV==='production')\n    setStoryId(editid);\n    // else\n      // setStoryId('5cdf38cf6efadf1a00cb0555');\n  }, []);\n\n  return storyId\n};\n\n// export default story_id;\n// http://localhost:8845/transcribe/5cdf38cf6efadf1a00cb0555?apikey=71932364-1925-4130-8e0c-389fa455f37e","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { createMuiTheme } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\n// import red from '@material-ui/core/colors/red';\n// import green from '@material-ui/core/colors/green';\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      '\"Open Sans\"',\n      '\"Helvetica Neue\"'\n    ].join(',')},\n  palette: {\n    primary: {\n      main: '#d9534f',\n    },\n    secondary: {\n      main: '#d9534f',\n    },\n  },\n});\n// declare module '@mui/material/styles' {\n//   interface Theme {\n//     status: {\n//       danger: string;\n//     };\n//   }\n//   // allow configuration using `createTheme`\n//   interface ThemeOptions {\n//     status?: {\n//       danger?: string;\n//     };\n//   }\n// }\n\n// const theme = {\n  // palette: {\n  //   primary: '#00bcd4',\n  //   secondary: '#ff4081'\n  // }\n// }\n\nReactDOM.render(\n  // <React.StrictMode>\n  <ThemeProvider theme={theme}>\n  <App />\n  </ThemeProvider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}